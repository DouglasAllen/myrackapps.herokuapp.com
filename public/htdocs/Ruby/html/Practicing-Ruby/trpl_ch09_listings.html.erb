<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/>
  
  <style>
    body {
      font-family: "Helvetica Neue", arial, sans-serif;
      font-size: 14px;
      line-height: 1.6;
      padding-top: 10px;
      padding-bottom: 10px;
      background-color: white;
      padding: 30px;
      color: #333;
      border: 1px solid #aaa;
      max-width: 900px;
      margin: 20px auto;
    }

    body > *:first-child {
      margin-top: 0 !important;
    }

    body > *:last-child {
      margin-bottom: 0 !important;
    }

    a {
      color: #4183C4;
      text-decoration: none;
    }

    a.absent {
      color: #cc0000;
    }

    a.anchor {
      display: block;
      padding-left: 30px;
      margin-left: -30px;
      cursor: pointer;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
    }

    h1, h2, h3, h4, h5, h6 {
      margin: 20px 0 10px;
      padding: 0;
      font-weight: bold;
      -webkit-font-smoothing: antialiased;
      cursor: text;
      position: relative;
    }

    h2:first-child, h1:first-child, h1:first-child + h2, h3:first-child, h4:first-child, h5:first-child, h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor {
      text-decoration: none;
    }

    h1 tt, h1 code {
      font-size: inherit;
    }

    h2 tt, h2 code {
      font-size: inherit;
    }

    h3 tt, h3 code {
      font-size: inherit;
    }

    h4 tt, h4 code {
      font-size: inherit;
    }

    h5 tt, h5 code {
      font-size: inherit;
    }

    h6 tt, h6 code {
      font-size: inherit;
    }

    h1 {
      font-size: 28px;
      color: black;
    }

    h2 {
      font-size: 24px;
      border-bottom: 1px solid #cccccc;
      color: black;
    }

    h3 {
      font-size: 18px;
    }

    h4 {
      font-size: 16px;
    }

    h5 {
      font-size: 14px;
    }

    h6 {
      color: #777777;
      font-size: 14px;
    }

    p, blockquote, ul, ol, dl, li, table, pre {
      margin: 3px 0;
    }

    hr {
      background: transparent url("http://tinyurl.com/bq5kskr") repeat-x 0 0;
      border: 0 none;
      color: #cccccc;
      height: 4px;
      padding: 0;
    }

    body > h2:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child + h2 {
      margin-top: 0;
      padding-top: 0;
    }

    body > h3:first-child, body > h4:first-child, body > h5:first-child, body > h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
      margin-top: 0;
      padding-top: 0;
    }

    h1 p, h2 p, h3 p, h4 p, h5 p, h6 p {
      margin-top: 0;
    }

    li p.first {
      display: inline-block;
    }

    ul, ol {
      padding-left: 30px;
    }

    ul :first-child, ol :first-child {
      margin-top: 0;
    }

    ul :last-child, ol :last-child {
      margin-bottom: 0;
    }

    dl {
      padding: 0;
    }

    dl dt {
      font-size: 14px;
      font-weight: bold;
      font-style: italic;
      padding: 0;
      margin: 15px 0 5px;
    }

    dl dt:first-child {
      padding: 0;
    }

    dl dt > :first-child {
      margin-top: 0;
    }

    dl dt > :last-child {
      margin-bottom: 0;
    }

    dl dd {
      margin: 0 0 15px;
      padding: 0 15px;
    }

    dl dd > :first-child {
      margin-top: 0;
    }

    dl dd > :last-child {
      margin-bottom: 0;
    }

    blockquote {
      border-left: 4px solid #dddddd;
      padding: 0 15px;
      color: #777777;
    }

    blockquote > :first-child {
      margin-top: 0;
    }

    blockquote > :last-child {
      margin-bottom: 0;
    }

    table {
      padding: 0;
    }
    table tr {
      border-top: 1px solid #cccccc;
      background-color: white;
      margin: 0;
      padding: 0;
    }

    table tr:nth-child(2n) {
      background-color: #f8f8f8;
    }

    table tr th {
      font-weight: bold;
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr td {
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr th :first-child, table tr td :first-child {
      margin-top: 0;
    }

    table tr th :last-child, table tr td :last-child {
      margin-bottom: 0;
    }

    img {
      max-width: 100%;
    }

    span.frame {
      display: block;
      overflow: hidden;
    }

    span.frame > span {
      border: 1px solid #dddddd;
      display: block;
      float: left;
      overflow: hidden;
      margin: 13px 0 0;
      padding: 7px;
      width: auto;
    }

    span.frame span img {
      display: block;
      float: left;
    }

    span.frame span span {
      clear: both;
      color: #333333;
      display: block;
      padding: 5px 0 0;
    }

    span.align-center {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-center > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: center;
    }

    span.align-center span img {
      margin: 0 auto;
      text-align: center;
    }

    span.align-right {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-right > span {
      display: block;
      overflow: hidden;
      margin: 13px 0 0;
      text-align: right;
    }

    span.align-right span img {
      margin: 0;
      text-align: right;
    }

    span.float-left {
      display: block;
      margin-right: 13px;
      overflow: hidden;
      float: left;
    }

    span.float-left span {
      margin: 13px 0 0;
    }

    span.float-right {
      display: block;
      margin-left: 13px;
      overflow: hidden;
      float: right;
    }

    span.float-right > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: right;
    }

    code, tt {
      font-family: "Lucida Console", "Courier New", courier;
      font-size: 12px;
      margin: 0 2px;
      padding: 3px 5px;
      white-space: nowrap;
      border: 1px solid #eaeaea;
      background-color: #f8f8f8;
      border-radius: 3px;
    }

    pre code {
      margin: 0;
      padding: 0;
      white-space: pre;
      border: none;
      background: transparent;
    }

    .highlight pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre code, pre tt {
      background-color: transparent;
      border: none;
    }

    span.line-numbers {
      margin-right: 10px;
    }

    img.logo {
      display: block;
      margin: 10px auto;
    }

    h1.logo {
      text-align: center;
      font-size: 40px;
    }
  </style>
</head>
<body>
  <div id="containter">
    
    <h1 id="the-ruby-programming-language">The Ruby Programming Language</h1>

<h2 id="chapter-9">CHAPTER 9</h2>

<h3 id="the-ruby-platform">The Ruby Platform</h3>

<h4 id="strings">9.1 Strings</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>s = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>
s.concat(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> world</span><span style="color:#710">&quot;</span></span>)    <span style="color:#777"># Synonym for &lt;&lt;. Mutating append to s. Returns new s.</span>
s.insert(<span style="color:#00D">5</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> there</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># Same as s[5] = &quot; there&quot;. Alters s. Returns new s.</span>
s.slice(<span style="color:#00D">0</span>,<span style="color:#00D">5</span>)          <span style="color:#777"># Same as s[0,5]. Returns a substring.</span>
s.slice!(<span style="color:#00D">5</span>,<span style="color:#00D">6</span>)         <span style="color:#777"># Deletion. Same as s[5,6]=&quot;&quot;. Returns deleted substring.</span>
s.eql?(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello world</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># True. Same as ==.</span>
<span style="color:#777">###########################</span>
s.length         <span style="color:#777"># =&gt; 5: counts characters in 1.9, bytes in 1.8</span>
s.size           <span style="color:#777"># =&gt; 5: size is a synonym</span>
s.bytesize       <span style="color:#777"># =&gt; 5: length in bytes; Ruby 1.9 only</span>
s.empty?         <span style="color:#777"># =&gt; false</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#710">&quot;</span></span>.empty?        <span style="color:#777"># =&gt; true</span>
<span style="color:#777">###########################</span>
s = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>
<span style="color:#777"># Finding the position of a substring or pattern match</span>
s.index(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">l</span><span style="color:#710">'</span></span>)         <span style="color:#777"># =&gt; 2: index of first l in string</span>
s.index(<span style="color:#00D">?l</span>)          <span style="color:#777"># =&gt; 2: works with character codes as well</span>
s.index(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">l+</span><span style="color:#404">/</span></span>)        <span style="color:#777"># =&gt; 2: works with regular expressions, too</span>
s.index(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">l</span><span style="color:#710">'</span></span>,<span style="color:#00D">3</span>)       <span style="color:#777"># =&gt; 3: index of first l in string at or after position 3</span>
s.index(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Ruby</span><span style="color:#710">'</span></span>)      <span style="color:#777"># =&gt; nil: search string not found</span>
s.rindex(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">l</span><span style="color:#710">'</span></span>)        <span style="color:#777"># =&gt; 3: index of rightmost l in string</span>
s.rindex(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">l</span><span style="color:#710">'</span></span>,<span style="color:#00D">2</span>)      <span style="color:#777"># =&gt; 2: index of rightmost l in string at or before 2</span>

<span style="color:#777"># Checking for prefixes and suffixes: Ruby 1.9 and later</span>
s.start_with? <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hell</span><span style="color:#710">&quot;</span></span> <span style="color:#777"># =&gt; true.  Note singular &quot;start&quot; not &quot;starts&quot;</span>
s.end_with? <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">bells</span><span style="color:#710">&quot;</span></span>  <span style="color:#777"># =&gt; false</span>

<span style="color:#777"># Testing for presence of substring</span>
s.include?(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ll</span><span style="color:#710">&quot;</span></span>)     <span style="color:#777"># =&gt; true: &quot;hello&quot; includes &quot;ll&quot;</span>
s.include?(<span style="color:#00D">?H</span>)       <span style="color:#777"># =&gt; false: &quot;hello&quot; does not include character H</span>

<span style="color:#777"># Pattern matching with regular expressions</span>
s =~ <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">[aeiou]{2}</span><span style="color:#404">/</span></span>    <span style="color:#777"># =&gt; nil: no double vowels in &quot;hello&quot;</span>
s.match(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">[aeiou]</span><span style="color:#404">/</span></span>) {|m| m.to_s} <span style="color:#777"># =&gt; &quot;e&quot;: return first vowel</span>

<span style="color:#777"># Splitting a string into substrings based on a delimiter string or pattern</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">this is it</span><span style="color:#710">&quot;</span></span>.split     <span style="color:#777"># =&gt; [&quot;this&quot;, &quot;is&quot;, &quot;it&quot;]: split on spaces by default</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>.split(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">l</span><span style="color:#710">'</span></span>)     <span style="color:#777"># =&gt; [&quot;he&quot;, &quot;&quot;, &quot;o&quot;]</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">1, 2,3</span><span style="color:#710">&quot;</span></span>.split(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">,</span><span style="color:#D20">\s</span><span style="color:#808">*</span><span style="color:#404">/</span></span>) <span style="color:#777"># =&gt; [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]: comma and optional space delimiter</span>

<span style="color:#777"># Split a string into two parts plus a delimiter. Ruby 1.9 only.</span>
<span style="color:#777"># These methods always return arrays of 3 strings:</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">banana</span><span style="color:#710">&quot;</span></span>.partition(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">an</span><span style="color:#710">&quot;</span></span>)  <span style="color:#777"># =&gt; [&quot;b&quot;, &quot;an&quot;, &quot;ana&quot;] </span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">banana</span><span style="color:#710">&quot;</span></span>.rpartition(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">an</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># =&gt; [&quot;ban&quot;, &quot;an&quot;, &quot;a&quot;]: start from right</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">a123b</span><span style="color:#710">&quot;</span></span>.partition(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\d</span><span style="color:#808">+</span><span style="color:#404">/</span></span>)  <span style="color:#777"># =&gt; [&quot;a&quot;, &quot;123&quot;, &quot;b&quot;]: works with Regexps, too</span>

<span style="color:#777"># Search and replace the first (sub, sub!) or all (gsub, gsub!)</span>
<span style="color:#777"># occurrences of the specified string or pattern.</span>
<span style="color:#777"># More about sub and gsub when we cover regular expressions later.</span>
s.sub(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">l</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">L</span><span style="color:#710">&quot;</span></span>)            <span style="color:#777"># =&gt; &quot;heLlo&quot;: Just replace first occurrence</span>
s.gsub(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">l</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">L</span><span style="color:#710">&quot;</span></span>)           <span style="color:#777"># =&gt; &quot;heLLo&quot;: Replace all occurrences</span>
s.sub!(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">(.)(.)</span><span style="color:#404">/</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">\2</span><span style="color:#D20">\1</span><span style="color:#710">'</span></span>)   <span style="color:#777"># =&gt; &quot;ehllo&quot;: Match and swap first 2 letters</span>
s.sub!(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">(.)(.)</span><span style="color:#404">/</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\\</span><span style="color:#D20">2</span><span style="color:#b0b">\\</span><span style="color:#D20">1</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># =&gt; &quot;hello&quot;: Double backslashes for double quotes</span>

<span style="color:#777"># sub and gsub can also compute a replacement string with a block</span>
<span style="color:#777"># Match the first letter of each word and capitalize it</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello world</span><span style="color:#710">&quot;</span></span>.gsub(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\b</span><span style="color:#808">.</span><span style="color:#404">/</span></span>) {|match| match.upcase } <span style="color:#777"># =&gt; &quot;Hello World&quot;</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Case modification methods</span>
s = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">world</span><span style="color:#710">&quot;</span></span>   <span style="color:#777"># These methods work with ASCII characters only</span>
s.upcase      <span style="color:#777"># =&gt; &quot;WORLD&quot;</span>
s.upcase!     <span style="color:#777"># =&gt; &quot;WORLD&quot;; alter s in place</span>
s.downcase    <span style="color:#777"># =&gt; &quot;world&quot;</span>
s.capitalize  <span style="color:#777"># =&gt; &quot;World&quot;: first letter upper, rest lower</span>
s.capitalize! <span style="color:#777"># =&gt; &quot;World&quot;: alter s in place</span>
s.swapcase    <span style="color:#777"># =&gt; &quot;wORLD&quot;: alter case of each letter</span>

<span style="color:#777"># Case insensitive comparison. (ASCII text only)</span>
<span style="color:#777"># casecmp works like &lt;=&gt; and returns -1 for less, 0 for equal, +1 for greater</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">world</span><span style="color:#710">&quot;</span></span>.casecmp(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">WORLD</span><span style="color:#710">&quot;</span></span>)  <span style="color:#777"># =&gt; 0 </span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">a</span><span style="color:#710">&quot;</span></span>.casecmp(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">B</span><span style="color:#710">&quot;</span></span>)          <span style="color:#777"># =&gt; -1 (&lt;=&gt; returns 1 in this case)</span>
<span style="color:#777">###########################</span>
s = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#b0b">\r</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>      <span style="color:#777"># A string with a line terminator</span>
s.chomp!             <span style="color:#777"># =&gt; &quot;hello&quot;: remove one line terminator from end</span>
s.chomp              <span style="color:#777"># =&gt; &quot;hello&quot;: no line terminator so no change</span>
s.chomp!             <span style="color:#777"># =&gt; nil: return of nil indicates no change made</span>
s.chomp(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">o</span><span style="color:#710">&quot;</span></span>)         <span style="color:#777"># =&gt; &quot;hell&quot;: remove &quot;o&quot; from end</span>
<span style="color:#d70">$/</span> = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">;</span><span style="color:#710">&quot;</span></span>             <span style="color:#777"># Set global record separator $/ to semicolon</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello;</span><span style="color:#710">&quot;</span></span>.chomp       <span style="color:#777"># =&gt; &quot;hello&quot;: now chomp removes semicolons and end</span>

<span style="color:#777"># chop removes trailing character or line terminator (\n, \r, or \r\n)</span>
s = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>
s.chop!              <span style="color:#777"># =&gt; &quot;hello&quot;: line terminator removed. s modified.</span>
s.chop               <span style="color:#777"># =&gt; &quot;hell&quot;: last character removed. s not modified.</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#710">&quot;</span></span>.chop              <span style="color:#777"># =&gt; &quot;&quot;: no characters to remove</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#710">&quot;</span></span>.chop!             <span style="color:#777"># =&gt; nil: nothing changed</span>

<span style="color:#777"># Strip all whitespace (including \t, \r, \n) from left, right, or both</span>
<span style="color:#777"># strip!, lstrip! and rstrip! modify the string in place.</span>
s = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\t</span><span style="color:#D20"> hello </span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>   <span style="color:#777"># Whitespace at beginning and end</span>
s.strip             <span style="color:#777"># =&gt; &quot;hello&quot;</span>
s.lstrip            <span style="color:#777"># =&gt; &quot;hello \n&quot;</span>
s.rstrip            <span style="color:#777"># =&gt; &quot;\t hello&quot;</span>

<span style="color:#777"># Left-justify, right-justify, or center a string in a field n-characters wide.</span>
<span style="color:#777"># There are no mutator versions of these methods. See also printf method.</span>
s = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">x</span><span style="color:#710">&quot;</span></span>
s.ljust(<span style="color:#00D">3</span>)          <span style="color:#777"># =&gt; &quot;x  &quot;</span>
s.rjust(<span style="color:#00D">3</span>)          <span style="color:#777"># =&gt; &quot;  x&quot;</span>
s.center(<span style="color:#00D">3</span>)         <span style="color:#777"># =&gt; &quot; x &quot;</span>
s.center(<span style="color:#00D">5</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">-</span><span style="color:#710">'</span></span>)    <span style="color:#777"># =&gt; &quot;--x--&quot;: padding other than space are allowed</span>
s.center(<span style="color:#00D">7</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">-=</span><span style="color:#710">'</span></span>)   <span style="color:#777"># =&gt; &quot;-=-x-=-&quot;: multicharacter padding allowed</span>
<span style="color:#777">###########################</span>
s = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">A</span><span style="color:#b0b">\n</span><span style="color:#D20">B</span><span style="color:#710">&quot;</span></span>                       <span style="color:#777"># Three ASCII characters on two lines</span>
s.each_byte {|b| print b, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> </span><span style="color:#710">&quot;</span></span> }  <span style="color:#777"># Prints &quot;65 10 66 &quot;</span>
s.each_line {|l| print l.chomp}  <span style="color:#777"># Prints &quot;AB&quot;</span>

<span style="color:#777"># Sequentially iterate characters as 1-character strings</span>
<span style="color:#777"># Works in Ruby 1.9, or in 1.8 with the jcode library:</span>
s.each_char { |c| print c, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> </span><span style="color:#710">&quot;</span></span> } <span style="color:#777"># Prints &quot;A \n B &quot;</span>

<span style="color:#777"># Enumerate each character as a 1-character string</span>
<span style="color:#777"># This does not work for multibyte strings in 1.8</span>
<span style="color:#777"># It works (inefficiently) for multibyte strings in 1.9:</span>
<span style="color:#00D">0</span>.upto(s.length-<span style="color:#00D">1</span>) {|n| print s[n,<span style="color:#00D">1</span>], <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> </span><span style="color:#710">&quot;</span></span>}

<span style="color:#777"># In Ruby 1.9, bytes, lines, and chars are aliases</span>
s.bytes.to_a                     <span style="color:#777"># =&gt; [65,10,66]: alias for each_byte</span>
s.lines.to_a                     <span style="color:#777"># =&gt; [&quot;A\n&quot;,&quot;B&quot;]: alias for each_line</span>
s.chars.to_a                     <span style="color:#777"># =&gt; [&quot;A&quot;, &quot;\n&quot;, &quot;B&quot;] alias for each_char</span>
<span style="color:#777">###########################</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">10</span><span style="color:#710">&quot;</span></span>.to_i          <span style="color:#777"># =&gt; 10: convert string to integer</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">10</span><span style="color:#710">&quot;</span></span>.to_i(<span style="color:#00D">2</span>)       <span style="color:#777"># =&gt; 2: argument is radix: between base-2 and base-36</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">10x</span><span style="color:#710">&quot;</span></span>.to_i         <span style="color:#777"># =&gt; 10: nonnumeric suffix is ignored. Same for oct, hex</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> 10</span><span style="color:#710">&quot;</span></span>.to_i         <span style="color:#777"># =&gt; 10: leading whitespace ignored</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ten</span><span style="color:#710">&quot;</span></span>.to_i         <span style="color:#777"># =&gt; 0: does not raise exception on bad input</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">10</span><span style="color:#710">&quot;</span></span>.oct           <span style="color:#777"># =&gt; 8: parse string as base-8 integer</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">10</span><span style="color:#710">&quot;</span></span>.hex           <span style="color:#777"># =&gt; 16: parse string as hexadecimal integer</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">0xff</span><span style="color:#710">&quot;</span></span>.hex         <span style="color:#777"># =&gt; 255: hex numbers may begin with 0x prefix</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> 1.1 dozen</span><span style="color:#710">&quot;</span></span>.to_f  <span style="color:#777"># =&gt; 1.1: parse leading floating-point number</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">6.02e23</span><span style="color:#710">&quot;</span></span>.to_f     <span style="color:#777"># =&gt; 6.02e+23: exponential notation supported</span>

<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">one</span><span style="color:#710">&quot;</span></span>.to_sym       <span style="color:#777"># =&gt; :one -- string to symbol conversion</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">two</span><span style="color:#710">&quot;</span></span>.intern       <span style="color:#777"># =&gt; :two -- intern is a synonym for to_sym</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Increment a string:</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">a</span><span style="color:#710">&quot;</span></span>.succ                      <span style="color:#777"># =&gt; &quot;b&quot;: the successor of &quot;a&quot;. Also, succ!</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">aaz</span><span style="color:#710">&quot;</span></span>.next                    <span style="color:#777"># =&gt; &quot;aba&quot;: next is a synonym. Also, next!</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">a</span><span style="color:#710">&quot;</span></span>.upto(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">e</span><span style="color:#710">&quot;</span></span>) {|c| print c }  <span style="color:#777"># Prints &quot;abcde. upto iterator based on succ.</span>

<span style="color:#777"># Reverse a string:</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>.reverse     <span style="color:#777"># =&gt; &quot;olleh&quot;. Also reverse!</span>

<span style="color:#777"># Debugging</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>.dump      <span style="color:#777"># =&gt; &quot;\&quot;hello\\n\&quot;&quot;: Escape special characters</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>.inspect   <span style="color:#777"># Works much like dump</span>

<span style="color:#777"># Translation from one set of characters to another</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>.tr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">aeiou</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">AEIOU</span><span style="color:#710">&quot;</span></span>)  <span style="color:#777"># =&gt; &quot;hEllO&quot;: capitalize vowels. Also tr!</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>.tr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">aeiou</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> </span><span style="color:#710">&quot;</span></span>)      <span style="color:#777"># =&gt; &quot;h ll &quot;: convert vowels to spaces</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">bead</span><span style="color:#710">&quot;</span></span>.tr_s(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">aeiou</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> </span><span style="color:#710">&quot;</span></span>)     <span style="color:#777"># =&gt; &quot;b d&quot;: convert and remove duplicates</span>

<span style="color:#777"># Checksums</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>.sum          <span style="color:#777"># =&gt; 532: weak 16-bit checksum</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>.sum(<span style="color:#00D">8</span>)       <span style="color:#777"># =&gt; 20: 8 bit checksum instead of 16 bit</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>.crypt(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ab</span><span style="color:#710">&quot;</span></span>)  <span style="color:#777"># =&gt; &quot;abl0JrMf6tlhw&quot;: one way cryptographic checksum</span>
                     <span style="color:#777"># Pass two alphanumeric characters as &quot;salt&quot;</span>
                     <span style="color:#777"># The result may be platform-dependent</span>

<span style="color:#777"># Counting letters, deleting letters, and removing duplicates</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>.count(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">aeiou</span><span style="color:#710">'</span></span>)  <span style="color:#777"># =&gt; 2: count lowercase vowels</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>.delete(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">aeiou</span><span style="color:#710">'</span></span>) <span style="color:#777"># =&gt; &quot;hll&quot;: delete lowercase vowels. Also delete!</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>.squeeze(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">a-z</span><span style="color:#710">'</span></span>)  <span style="color:#777"># =&gt; &quot;helo&quot;: remove runs of letters. Also squeeze!</span>
<span style="color:#777"># When there is more than one argument, take the intersection.</span>
<span style="color:#777"># Arguments that begin with ^ are negated.</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>.count(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">a-z</span><span style="color:#710">'</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">^aeiou</span><span style="color:#710">'</span></span>)   <span style="color:#777"># =&gt; 3: count lowercase consonants</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>.delete(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">a-z</span><span style="color:#710">'</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">^aeiou</span><span style="color:#710">'</span></span>)  <span style="color:#777"># =&gt; &quot;eo: delete lowercase consonants</span>
</pre></div>
</div>
</div>

<h4 id="formatting-text">9.1.1 Formatting Text</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>n, animal = <span style="color:#00D">2</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">mice</span><span style="color:#710">&quot;</span></span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>n+<span style="color:#00D">1</span><span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20"> blind </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>animal<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>  <span style="color:#777"># =&gt; '3 blind mice'</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Alternatives to the interpolation above</span>
printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%d blind %s</span><span style="color:#710">'</span></span>, n+<span style="color:#00D">1</span>, animal)  <span style="color:#777"># Prints '3 blind mice', returns nil</span>
sprintf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%d blind %s</span><span style="color:#710">'</span></span>, n+<span style="color:#00D">1</span>, animal) <span style="color:#777"># =&gt; '3 blind mice'</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%d blind %s</span><span style="color:#710">'</span></span> % [n+<span style="color:#00D">1</span>, animal]  <span style="color:#777"># Use array on right if more than one argument</span>

<span style="color:#777"># Formatting numbers</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%d</span><span style="color:#710">'</span></span> % <span style="color:#00D">10</span>         <span style="color:#777"># =&gt; '10': %d for decimal integers</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%x</span><span style="color:#710">'</span></span> % <span style="color:#00D">10</span>         <span style="color:#777"># =&gt; 'a': hexadecimal integers</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%X</span><span style="color:#710">'</span></span> % <span style="color:#00D">10</span>         <span style="color:#777"># =&gt; 'A': uppercase hexadecimal integers</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%o</span><span style="color:#710">'</span></span> % <span style="color:#00D">10</span>         <span style="color:#777"># =&gt; '12': octal integers</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%f</span><span style="color:#710">'</span></span> % <span style="color:#60E">1234.567</span>   <span style="color:#777"># =&gt; '1234.567000': full-length floating-point numbers</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%e</span><span style="color:#710">'</span></span> % <span style="color:#60E">1234.567</span>   <span style="color:#777"># =&gt; '1.234567e+03': force exponential notation</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%E</span><span style="color:#710">'</span></span> % <span style="color:#60E">1234.567</span>   <span style="color:#777"># =&gt; '1.234567e+03': exponential with uppercase E</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%g</span><span style="color:#710">'</span></span> % <span style="color:#60E">1234.567</span>   <span style="color:#777"># =&gt; '1234.57': six significant digits</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%g</span><span style="color:#710">'</span></span> % <span style="color:#60E">1.23456E12</span> <span style="color:#777"># =&gt; '1.23456e+12': Use %f or %e depending on magnitude</span>

<span style="color:#777"># Field width</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%5s</span><span style="color:#710">'</span></span> % <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">&lt;&lt;&lt;</span><span style="color:#710">'</span></span>     <span style="color:#777"># '  &lt;&lt;&lt;': right-justify in field five characters wide</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%-5s</span><span style="color:#710">'</span></span> % <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">&gt;&gt;&gt;</span><span style="color:#710">'</span></span>    <span style="color:#777"># '&gt;&gt;&gt;  ': left-justify in field five characters wide</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%5d</span><span style="color:#710">'</span></span> % <span style="color:#00D">123</span>       <span style="color:#777"># '  123': field is five characters wide</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%05d</span><span style="color:#710">'</span></span> % <span style="color:#00D">123</span>      <span style="color:#777"># '00123': pad with zeros in field five characters wide</span>

<span style="color:#777"># Precision</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%.2f</span><span style="color:#710">'</span></span> % <span style="color:#60E">123.456</span>  <span style="color:#777"># '123.46': two digits after decimal place</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%.2e</span><span style="color:#710">'</span></span> % <span style="color:#60E">123.456</span>  <span style="color:#777"># '1.23e+02': two digits after decimal = three significant digits</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%.6e</span><span style="color:#710">'</span></span> % <span style="color:#60E">123.456</span>  <span style="color:#777"># '1.234560e+02': note added zero </span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%.4g</span><span style="color:#710">'</span></span> % <span style="color:#60E">123.456</span>  <span style="color:#777"># '123.5': four significant digits</span>

<span style="color:#777"># Field and precision combined</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%6.4g</span><span style="color:#710">'</span></span> % <span style="color:#60E">123.456</span> <span style="color:#777"># ' 123.5': four significant digits in field six chars wide</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%3s</span><span style="color:#710">'</span></span> % <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">ruby</span><span style="color:#710">'</span></span>    <span style="color:#777"># 'ruby': string argument exceeds field width</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">%3.3s</span><span style="color:#710">'</span></span> % <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">ruby</span><span style="color:#710">'</span></span>  <span style="color:#777"># 'rub': precision forces truncation of string</span>

<span style="color:#777"># Multiple arguments to be formatted</span>
args = [<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Syntax Error</span><span style="color:#710">'</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">test.rb</span><span style="color:#710">'</span></span>, <span style="color:#00D">20</span>]  <span style="color:#777"># An array of arguments</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%s: in '%s' line %d</span><span style="color:#710">&quot;</span></span> % args    <span style="color:#777"># =&gt; &quot;Syntax Error: in 'test.rb' line 20&quot; </span>
<span style="color:#777"># Same args, interpolated in different order!  Good for internationalization.</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%2$s:%3$d: %1$s</span><span style="color:#710">&quot;</span></span> % args        <span style="color:#777"># =&gt; &quot;test.rb:20: Syntax Error&quot;</span>
</pre></div>
</div>
</div>

<h4 id="packing-and-unpacking-binary-strings">9.1.2 Packing and Unpacking Binary Strings</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>a = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>,<span style="color:#00D">4</span>,<span style="color:#00D">5</span>,<span style="color:#00D">6</span>,<span style="color:#00D">7</span>,<span style="color:#00D">8</span>,<span style="color:#00D">9</span>,<span style="color:#00D">10</span>]  <span style="color:#777"># An array of 10 integers</span>
b = a.pack(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">i10</span><span style="color:#710">'</span></span>)           <span style="color:#777"># Pack 10 4-byte integers (i) into binary string b</span>
c = b.unpack(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">i*</span><span style="color:#710">'</span></span>)          <span style="color:#777"># Decode all (*) the 4-byte integers from b</span>
c == a                      <span style="color:#777"># =&gt; true</span>

m = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">hello world</span><span style="color:#710">'</span></span>           <span style="color:#777"># A message to encode</span>
data = [m.size, m]          <span style="color:#777"># Length first, then the bytes</span>
template = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Sa*</span><span style="color:#710">'</span></span>            <span style="color:#777"># Unsigned short, any number of ASCII chars</span>
b = data.pack(template)     <span style="color:#777"># =&gt; &quot;\v\000hello world&quot;</span>
b.unpack(template)          <span style="color:#777"># =&gt; [11, &quot;hello world&quot;]</span>
</pre></div>
</div>
</div>

<h4 id="regexp-literals">9.2.1 Regexp Literals</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">Ruby?</span><span style="color:#404">/</span></span>  <span style="color:#777"># Matches the text &quot;Rub&quot; followed by an optional &quot;y&quot;</span>
<span style="color:#777">###########################</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">ruby?</span><span style="color:#404">/</span><span style="color:#C2C">i</span></span>  <span style="color:#777"># Case-insensitive: matches &quot;ruby&quot; or &quot;RUB&quot;, etc.</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">.</span><span style="color:#404">/</span><span style="color:#C2C">mu</span></span>     <span style="color:#777"># Matches Unicode characters in Multiline mode</span>
<span style="color:#777">###########################</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">%r|</span><span style="color:#808">/</span><span style="color:#404">|</span></span>         <span style="color:#777"># Matches a single slash character, no escape required</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">%r[</span><span style="color:#808">&lt;/(.*)&gt;</span><span style="color:#404">]</span><span style="color:#C2C">i</span></span>  <span style="color:#777"># Flag characters are allowed with this syntax, too</span>
<span style="color:#777">###########################</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\(</span><span style="color:#D20">\)</span><span style="color:#404">/</span></span>     <span style="color:#777"># Matches open and close parentheses</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\\</span><span style="color:#404">/</span></span>       <span style="color:#777"># Matches a single backslash</span>
<span style="color:#777">###########################</span>
money = <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">[$</span><span style="color:#D20">\u</span><span style="color:#808">20AC</span><span style="color:#D20">\u</span><span style="color:#808">{a3}</span><span style="color:#D20">\u</span><span style="color:#808">{a5}]</span><span style="color:#404">/</span></span> <span style="color:#777"># match dollar,euro,pound, or yen sign</span>
<span style="color:#777">###########################</span>
prefix = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">,</span><span style="color:#710">&quot;</span></span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>prefix<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20">\t</span><span style="color:#404">/</span></span>   <span style="color:#777"># Matches a comma followed by an ASCII TAB character</span>
<span style="color:#777">###########################</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>].map{|x| <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>x<span style="font-weight:bold;color:#666">}</span></span><span style="color:#404">/</span></span>}   <span style="color:#777"># =&gt; [/1/, /2/]</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>].map{|x| <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>x<span style="font-weight:bold;color:#666">}</span></span><span style="color:#404">/</span><span style="color:#C2C">o</span></span>}  <span style="color:#777"># =&gt; [/1/, /1/]</span>
</pre></div>
</div>
</div>

<h4 id="regexp-factory-methods">9.2.2 Regexp Factory Methods</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#036;font-weight:bold">Regexp</span>.new(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Ruby?</span><span style="color:#710">&quot;</span></span>)                          <span style="color:#777"># /Ruby?/</span>
<span style="color:#036;font-weight:bold">Regexp</span>.new(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby?</span><span style="color:#710">&quot;</span></span>, <span style="color:#036;font-weight:bold">Regexp</span>::<span style="color:#036;font-weight:bold">IGNORECASE</span>)      <span style="color:#777"># /ruby?/i</span>
<span style="color:#036;font-weight:bold">Regexp</span>.compile(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">.</span><span style="color:#710">&quot;</span></span>, <span style="color:#036;font-weight:bold">Regexp</span>::<span style="color:#036;font-weight:bold">MULTILINE</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">u</span><span style="color:#710">&quot;</span></span>)  <span style="color:#777"># /./mu</span>
<span style="color:#777">###########################</span>
pattern = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">[a-z]+</span><span style="color:#710">&quot;</span></span>                <span style="color:#777"># One or more letters</span>
suffix = <span style="color:#036;font-weight:bold">Regexp</span>.escape(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">()</span><span style="color:#710">&quot;</span></span>)      <span style="color:#777"># Treat these characters literally</span>
r = <span style="color:#036;font-weight:bold">Regexp</span>.new(pattern + suffix)  <span style="color:#777"># /[a-z]+\(\)/</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Match any one of five language names.</span>
pattern = <span style="color:#036;font-weight:bold">Regexp</span>.union(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Ruby</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Perl</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Python</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">Java(Script)?</span><span style="color:#404">/</span></span>)
<span style="color:#777"># Match empty parens, brackets, or braces. Escaping is automatic:</span>
<span style="color:#036;font-weight:bold">Regexp</span>.union(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">()</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">[]</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">{}</span><span style="color:#710">&quot;</span></span>)   <span style="color:#777"># =&gt; /\(\)|\[\]|\{\}/</span>
</pre></div>
</div>
</div>

<h4 id="regular-expression-syntax">9.2.3 Regular Expression Syntax</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Literal characters</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">ruby</span><span style="color:#404">/</span></span>             <span style="color:#777"># Match &quot;ruby&quot;. Most characters simply match themselves.</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">&amp;#xA5;</span><span style="color:#404">/</span></span>                <span style="color:#777"># Matches Yen sign. Multibyte characters are suported</span>
                   <span style="color:#777"># in Ruby 1.9 and Ruby 1.8.</span>

<span style="color:#777"># Character classes</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">[Rr]uby</span><span style="color:#404">/</span></span>          <span style="color:#777"># Match &quot;Ruby&quot; or &quot;ruby&quot;</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">rub[ye]</span><span style="color:#404">/</span></span>          <span style="color:#777"># Match &quot;ruby&quot; or &quot;rube&quot;</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">[aeiou]</span><span style="color:#404">/</span></span>          <span style="color:#777"># Match any one lowercase vowel</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">[0-9]</span><span style="color:#404">/</span></span>            <span style="color:#777"># Match any digit; same as /[0123456789]/</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">[a-z]</span><span style="color:#404">/</span></span>            <span style="color:#777"># Match any lowercase ASCII letter</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">[A-Z]</span><span style="color:#404">/</span></span>            <span style="color:#777"># Match any uppercase ASCII letter</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">[a-zA-Z0-9]</span><span style="color:#404">/</span></span>      <span style="color:#777"># Match any of the above</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">[^aeiou]</span><span style="color:#404">/</span></span>         <span style="color:#777"># Match anything other than a lowercase vowel</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">[^0-9]            # Match anything other than a digit

# Special character classes
</span><span style="color:#404">/</span></span>./                <span style="color:#777"># Match any character except newline</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">.</span><span style="color:#404">/</span><span style="color:#C2C">m</span></span>               <span style="color:#777"># In multiline mode . matches newline, too</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\d</span><span style="color:#404">/</span></span>               <span style="color:#777"># Match a digit /[0-9]/</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\D</span><span style="color:#404">/</span></span>               <span style="color:#777"># Match a nondigit: /[^0-9]/</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\s</span><span style="color:#404">/</span></span>               <span style="color:#777"># Match a whitespace character: /[ \t\r\n\f]/</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\S</span><span style="color:#404">/</span></span>               <span style="color:#777"># Match nonwhitespace: /[^ \t\r\n\f]/</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\w</span><span style="color:#404">/</span></span>               <span style="color:#777"># Match a single word character: /[A-Za-z0-9_]/</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\W</span><span style="color:#404">/</span></span>               <span style="color:#777"># Match a nonword character: /[^A-Za-z0-9_]/</span>

<span style="color:#777"># Repetition</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">ruby?</span><span style="color:#404">/</span></span>            <span style="color:#777"># Match &quot;rub&quot; or &quot;ruby&quot;: the y is optional</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">ruby*</span><span style="color:#404">/</span></span>            <span style="color:#777"># Match &quot;rub&quot; plus 0 or more ys</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">ruby+</span><span style="color:#404">/</span></span>            <span style="color:#777"># Match &quot;rub&quot; plus 1 or more ys</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\d</span><span style="color:#808">{3}</span><span style="color:#404">/</span></span>            <span style="color:#777"># Match exactly 3 digits</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\d</span><span style="color:#808">{3,}</span><span style="color:#404">/</span></span>           <span style="color:#777"># Match 3 or more digits</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\d</span><span style="color:#808">{3,5}</span><span style="color:#404">/</span></span>          <span style="color:#777"># Match 3, 4, or 5 digits</span>

<span style="color:#777"># Nongreedy repetition: match the smallest number of repetitions</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">&lt;.*&gt;</span><span style="color:#404">/</span></span>             <span style="color:#777"># Greedy repetition: matches &quot;&lt;ruby&gt;perl&gt;&quot;</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">&lt;.*?&gt;</span><span style="color:#404">/</span></span>            <span style="color:#777"># Nongreedy: matches &quot;&lt;ruby&gt;&quot; in &quot;&lt;ruby&gt;perl&gt;&quot; </span>
                   <span style="color:#777"># Also nongreedy: ??, +?, and {n,m}?</span>

<span style="color:#777"># Grouping with parentheses</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\D</span><span style="color:#D20">\d</span><span style="color:#808">+</span><span style="color:#404">/</span></span>            <span style="color:#777"># No group: + repeats \d</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">(</span><span style="color:#D20">\D</span><span style="color:#D20">\d</span><span style="color:#808">)+</span><span style="color:#404">/</span></span>          <span style="color:#777"># Grouped: + repeats \D\d pair</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">([Rr]uby(, )?)+</span><span style="color:#404">/</span></span>  <span style="color:#777"># Match &quot;Ruby&quot;, &quot;Ruby, ruby, ruby&quot;, etc.</span>

<span style="color:#777"># Backreferences: matching a previously matched group again</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">([Rr])uby&amp;</span><span style="color:#D20">\1</span><span style="color:#808">ails</span><span style="color:#404">/</span></span> <span style="color:#777"># Match ruby&amp;rails or Ruby&amp;Rails</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">(['&quot;])[^</span><span style="color:#D20">\1</span><span style="color:#808">]*</span><span style="color:#D20">\1</span><span style="color:#404">/</span></span>   <span style="color:#777"># Single or double-quoted string</span>
                   <span style="color:#777">#   \1 matches whatever the 1st group matched</span>
                   <span style="color:#777">#   \2 matches whatever the 2nd group matched, etc.</span>

<span style="color:#777"># Named groups and backreferences in Ruby 1.9: match a 4-letter palindrome</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">(?&lt;first&gt;</span><span style="color:#D20">\w</span><span style="color:#808">)(?&lt;second&gt;</span><span style="color:#D20">\w</span><span style="color:#808">)</span><span style="color:#D20">\k</span><span style="color:#808">&lt;second&gt;</span><span style="color:#D20">\k</span><span style="color:#808">&lt;first&gt;</span><span style="color:#404">/</span></span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">(?'first'</span><span style="color:#D20">\w</span><span style="color:#808">)(?'second'</span><span style="color:#D20">\w</span><span style="color:#808">)</span><span style="color:#D20">\k</span><span style="color:#808">'second'</span><span style="color:#D20">\k</span><span style="color:#808">'first'</span><span style="color:#404">/</span></span> <span style="color:#777"># Alternate syntax</span>

<span style="color:#777"># Alternatives</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">ruby|rube</span><span style="color:#404">/</span></span>        <span style="color:#777"># Match &quot;ruby&quot; or &quot;rube&quot;</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">rub(y|le))</span><span style="color:#404">/</span></span>       <span style="color:#777"># Match &quot;ruby&quot; or &quot;ruble&quot;</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">ruby(!+|</span><span style="color:#D20">\?</span><span style="color:#808">)</span><span style="color:#404">/</span></span>      <span style="color:#777"># &quot;ruby&quot; followed by one or more ! or one ?</span>

<span style="color:#777"># Anchors: specifying match position</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">^Ruby</span><span style="color:#404">/</span></span>            <span style="color:#777"># Match &quot;Ruby&quot; at the start of a string or internal line</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">Ruby$</span><span style="color:#404">/</span></span>            <span style="color:#777"># Match &quot;Ruby&quot; at the end of a string or line</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\A</span><span style="color:#808">Ruby</span><span style="color:#404">/</span></span>           <span style="color:#777"># Match &quot;Ruby&quot; at the start of a string</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">Ruby</span><span style="color:#D20">\Z</span><span style="color:#404">/</span></span>           <span style="color:#777"># Match &quot;Ruby&quot; at the end of a string</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\b</span><span style="color:#808">Ruby</span><span style="color:#D20">\b</span><span style="color:#404">/</span></span>         <span style="color:#777"># Match &quot;Ruby&quot; at a word boundary</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\b</span><span style="color:#808">rub</span><span style="color:#D20">\B</span><span style="color:#404">/</span></span>          <span style="color:#777"># \B is nonword boundary:</span>
                   <span style="color:#777">#   match &quot;rub&quot; in &quot;rube&quot; and &quot;ruby&quot; but not alone</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">Ruby(?=!)</span><span style="color:#404">/</span></span>        <span style="color:#777"># Match &quot;Ruby&quot;, if followed by an exclamation point</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">Ruby(?!!)</span><span style="color:#404">/</span></span>        <span style="color:#777"># Match &quot;Ruby&quot;, if not followed by an exclamation point</span>

<span style="color:#777"># Special syntax with parentheses</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">R(?#comment)</span><span style="color:#404">/</span></span>     <span style="color:#777"># Matches &quot;R&quot;. All the rest is a comment</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">R(?i)uby</span><span style="color:#404">/</span></span>         <span style="color:#777"># Case-insensitive while matching &quot;uby&quot;</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">R(?i:uby)</span><span style="color:#404">/</span></span>        <span style="color:#777"># Same thing</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">rub(?:y|le))</span><span style="color:#404">/</span></span>     <span style="color:#777"># Group only without creating \1 backreference</span>

<span style="color:#777"># The x option allows comments and ignores whitespace</span>
<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">  # This is not a Ruby comment. It is a literal part
   # of the regular expression, but is ignored.
   R      # Match a single letter R
   (uby)+ # Followed by one or more &quot;uby&quot;s
   </span><span style="color:#D20">\ </span><span style="color:#808">     # Use backslash for a nonignored space
</span><span style="color:#404">/</span><span style="color:#C2C">x</span></span>                 <span style="color:#777"># Closing delimiter. Don't forget the x option!</span>
</pre></div>
</div>
</div>

<h4 id="pattern-matching-with-regular-expressions">9.2.4 Pattern Matching with Regular Expressions</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>pattern = <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">Ruby?</span><span style="color:#404">/</span><span style="color:#C2C">i</span></span>      <span style="color:#777"># Match &quot;Rub&quot; or &quot;Ruby&quot;, case-insensitive</span>
pattern =~ <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">backrub</span><span style="color:#710">&quot;</span></span>    <span style="color:#777"># Returns 4.</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rub ruby</span><span style="color:#710">&quot;</span></span> =~ pattern   <span style="color:#777"># 0</span>
pattern =~ <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">r</span><span style="color:#710">&quot;</span></span>          <span style="color:#777"># nil</span>
<span style="color:#777">###########################</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span> =~ <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">e</span><span style="color:#D20">\w</span><span style="color:#808">{2}</span><span style="color:#404">/</span></span>     <span style="color:#777"># 1: Match an e followed by 2 word characters</span>
<span style="color:#d70">$~</span>.string               <span style="color:#777"># &quot;hello&quot;: the complete string</span>
<span style="color:#d70">$~</span>.to_s                 <span style="color:#777"># &quot;ell&quot;: the portion that matched</span>
<span style="color:#d70">$~</span>.pre_match            <span style="color:#777"># &quot;h&quot;: the portion before the match</span>
<span style="color:#d70">$~</span>.post_match           <span style="color:#777"># &quot;o&quot;: the portion after the match</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># This is a pattern with three subpatterns</span>
pattern = <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">(Ruby|Perl)(</span><span style="color:#D20">\s</span><span style="color:#808">+)(rocks|sucks)!</span><span style="color:#404">/</span></span> 
text = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Ruby</span><span style="color:#b0b">\t</span><span style="color:#D20">rocks!</span><span style="color:#710">&quot;</span></span>     <span style="color:#777"># Text that matches the pattern    </span>
pattern =~ text           <span style="color:#777"># =&gt; 0: pattern matches at the first character</span>
data = <span style="color:#036;font-weight:bold">Regexp</span>.last_match  <span style="color:#777"># =&gt; Get match details</span>
data.size                 <span style="color:#777"># =&gt; 4: MatchData objects behave like arrays</span>
data[<span style="color:#00D">0</span>]                   <span style="color:#777"># =&gt; &quot;Ruby\trocks!&quot;: the complete matched text</span>
data[<span style="color:#00D">1</span>]                   <span style="color:#777"># =&gt; &quot;Ruby&quot;: text matching first subpattern</span>
data[<span style="color:#00D">2</span>]                   <span style="color:#777"># =&gt; &quot;\t&quot;: text matching second subpattern</span>
data[<span style="color:#00D">3</span>]                   <span style="color:#777"># =&gt; &quot;rocks&quot;: text matching third subpattern</span>
data[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>]                 <span style="color:#777"># =&gt; [&quot;Ruby&quot;, &quot;\t&quot;]</span>
data[<span style="color:#00D">1</span>..<span style="color:#00D">3</span>]                <span style="color:#777"># =&gt; [&quot;Ruby&quot;, &quot;\t&quot;, &quot;rocks&quot;]</span>
data.values_at(<span style="color:#00D">1</span>,<span style="color:#00D">3</span>)       <span style="color:#777"># =&gt; [&quot;Ruby&quot;, &quot;rocks&quot;]: only selected indexes</span>
data.captures             <span style="color:#777"># =&gt; [&quot;Ruby&quot;, &quot;\t&quot;, &quot;rocks&quot;]: only subpatterns</span>
<span style="color:#036;font-weight:bold">Regexp</span>.last_match(<span style="color:#00D">3</span>)      <span style="color:#777"># =&gt; &quot;rocks&quot;: same as Regexp.last_match[3]</span>

<span style="color:#777"># Start and end positions of matches</span>
data.begin(<span style="color:#00D">0</span>)             <span style="color:#777"># =&gt; 0: start index of entire match</span>
data.begin(<span style="color:#00D">2</span>)             <span style="color:#777"># =&gt; 4: start index of second subpattern</span>
data.end(<span style="color:#00D">2</span>)               <span style="color:#777"># =&gt; 5: end index of second subpattern</span>
data.offset(<span style="color:#00D">3</span>)            <span style="color:#777"># =&gt; [5,10]: start and end of third subpattern</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Ruby 1.9 only</span>
pattern = <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">(?&lt;lang&gt;Ruby|Perl) (?&lt;ver&gt;</span><span style="color:#D20">\d</span><span style="color:#808">(</span><span style="color:#D20">\.</span><span style="color:#D20">\d</span><span style="color:#808">)+) (?&lt;review&gt;rocks|sucks)!</span><span style="color:#404">/</span></span> 
<span style="color:#080;font-weight:bold">if</span> (pattern =~ <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Ruby 1.9.1 rocks!</span><span style="color:#710">&quot;</span></span>)
  <span style="color:#d70">$~</span>[<span style="color:#A60">:lang</span>]            <span style="color:#777"># =&gt; &quot;Ruby&quot;</span>
  <span style="color:#d70">$~</span>[<span style="color:#A60">:ver</span>]             <span style="color:#777"># =&gt; &quot;1.9.1&quot;</span>
  <span style="color:#d70">$~</span>[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">review</span><span style="color:#710">&quot;</span></span>]         <span style="color:#777"># =&gt; &quot;rocks&quot;</span>
  <span style="color:#d70">$~</span>.offset(<span style="color:#A60">:ver</span>)      <span style="color:#777"># =&gt; [5,10] start and end offsets of version number</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777"># Names of capturing groups and a map of group names to group numbers</span>
pattern.names          <span style="color:#777"># =&gt; [&quot;lang&quot;, &quot;ver&quot;, &quot;review&quot;]</span>
pattern.named_captures <span style="color:#777"># =&gt; {&quot;lang&quot;=&gt;[1],&quot;ver&quot;=&gt;[2],&quot;review&quot;=&gt;[3]}</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Ruby 1.9 only</span>
<span style="color:#080;font-weight:bold">if</span> <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">(?&lt;lang&gt;</span><span style="color:#D20">\w</span><span style="color:#808">+) (?&lt;ver&gt;</span><span style="color:#D20">\d</span><span style="color:#808">+</span><span style="color:#D20">\.</span><span style="color:#808">(</span><span style="color:#D20">\d</span><span style="color:#808">+)+) (?&lt;review&gt;</span><span style="color:#D20">\w</span><span style="color:#808">+)</span><span style="color:#404">/</span></span> =~ <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Ruby 1.9 rules!</span><span style="color:#710">&quot;</span></span>
  lang     <span style="color:#777"># =&gt; &quot;Ruby&quot;</span>
  ver      <span style="color:#777"># =&gt; &quot;1.9&quot;</span>
  review   <span style="color:#777"># =&gt; &quot;rules&quot;</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">###########################</span>
<span style="color:#080;font-weight:bold">if</span> data = pattern.match(text)  <span style="color:#777"># Or: data = text.match(pattern)</span>
  handle_match(data)
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">###########################</span>
pattern.match(text) {|data| handle_match(data) }
</pre></div>
</div>
</div>

<h4 id="pattern-matching-with-strings">9.2.4.2 Pattern matching with strings</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby123</span><span style="color:#710">&quot;</span></span>[<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\d</span><span style="color:#808">+</span><span style="color:#404">/</span></span>]              <span style="color:#777"># &quot;123&quot;</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby123</span><span style="color:#710">&quot;</span></span>[<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">([a-z]+)(</span><span style="color:#D20">\d</span><span style="color:#808">+)</span><span style="color:#404">/</span></span>,<span style="color:#00D">1</span>]  <span style="color:#777"># &quot;ruby&quot;</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby123</span><span style="color:#710">&quot;</span></span>[<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">([a-z]+)(</span><span style="color:#D20">\d</span><span style="color:#808">+)</span><span style="color:#404">/</span></span>,<span style="color:#00D">2</span>]  <span style="color:#777"># &quot;123&quot;</span>
<span style="color:#777">###########################</span>
r = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby123</span><span style="color:#710">&quot;</span></span>
r.slice!(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\d</span><span style="color:#808">+</span><span style="color:#404">/</span></span>)  <span style="color:#777"># Returns &quot;123&quot;, changes r to &quot;ruby&quot;</span>
<span style="color:#777">###########################</span>
s = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">one, two, three</span><span style="color:#710">&quot;</span></span>
s.split            <span style="color:#777"># [&quot;one,&quot;,&quot;two,&quot;,&quot;three&quot;]: whitespace delimiter by default</span>
s.split(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">, </span><span style="color:#710">&quot;</span></span>)      <span style="color:#777"># [&quot;one&quot;,&quot;two&quot;,&quot;three&quot;]: hardcoded delimiter</span>
s.split(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\s</span><span style="color:#808">*,</span><span style="color:#D20">\s</span><span style="color:#808">*</span><span style="color:#404">/</span></span>) <span style="color:#777"># [&quot;one&quot;,&quot;two&quot;,&quot;three&quot;]: space is optional around comma</span>
<span style="color:#777">###########################</span>
text = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello world</span><span style="color:#710">&quot;</span></span>
pattern = <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">l</span><span style="color:#404">/</span></span>
first = text.index(pattern)       <span style="color:#777"># 2: first match starts at char 2</span>
n = <span style="color:#036;font-weight:bold">Regexp</span>.last_match.end(<span style="color:#00D">0</span>)      <span style="color:#777"># 3: end position of first match</span>
second = text.index(pattern, n)   <span style="color:#777"># 3: search again from there</span>
last = text.rindex(pattern)       <span style="color:#777"># 9: rindex searches backward from end</span>
</pre></div>
</div>
</div>

<h4 id="search-and-replace">9.2.4.3 Search and replace</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>phone = gets                    <span style="color:#777"># Read a phone number</span>
phone.sub!(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">#.*$</span><span style="color:#404">/</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#710">&quot;</span></span>)          <span style="color:#777"># Delete Ruby-style comments</span>
phone.gsub!(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\D</span><span style="color:#404">/</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#710">&quot;</span></span>)           <span style="color:#777"># Remove anything other than digits</span>
<span style="color:#777">###########################</span>
text.gsub!(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rails</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Rails</span><span style="color:#710">&quot;</span></span>)     <span style="color:#777"># Change &quot;rails&quot; to &quot;Rails&quot; throughout</span>
<span style="color:#777">###########################</span>
text.gsub!(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\b</span><span style="color:#808">rails</span><span style="color:#D20">\b</span><span style="color:#404">/</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Rails</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># Capitalize the word &quot;Rails&quot; throughout</span>
<span style="color:#777">###########################</span>
text.gsub(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\b</span><span style="color:#808">ruby</span><span style="color:#D20">\b</span><span style="color:#404">/</span><span style="color:#C2C">i</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">&lt;b&gt;</span><span style="color:#D20">\0</span><span style="color:#D20">&lt;/b&gt;</span><span style="color:#710">'</span></span>)
<span style="color:#777">###########################</span>
text.gsub(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\b</span><span style="color:#808">ruby</span><span style="color:#D20">\b</span><span style="color:#404">/</span><span style="color:#C2C">i</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">&lt;b&gt;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span><span style="color:#d70">$&amp;</span><span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20">&lt;/b&gt;</span><span style="color:#710">&quot;</span></span>)
<span style="color:#777">###########################</span>
<span style="color:#777"># Strip pairs of quotes from a string</span>
re = <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">(?&lt;quote&gt;['&quot;])(?&lt;body&gt;[^'&quot;]*)</span><span style="color:#D20">\k</span><span style="color:#808">&lt;quote&gt;</span><span style="color:#404">/</span></span>
puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">These are 'quotes'</span><span style="color:#710">&quot;</span></span>.gsub(re, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">\k</span><span style="color:#D20">&lt;body&gt;</span><span style="color:#710">'</span></span>)
<span style="color:#777">###########################</span>
<span style="color:#777"># Use consistent capitalization for the names of programming languages</span>
text = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">RUBY Java perl PyThOn</span><span style="color:#710">&quot;</span></span>         <span style="color:#777"># Text to modify</span>
lang = <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">ruby|java|perl|python</span><span style="color:#404">/</span><span style="color:#C2C">i</span></span>        <span style="color:#777"># Pattern to match</span>
text.gsub!(lang) {|l| l.capitalize }   <span style="color:#777"># Fix capitalization</span>
<span style="color:#777">###########################</span>
pattern = <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">(['&quot;])([^</span><span style="color:#D20">\1</span><span style="color:#808">]*)</span><span style="color:#D20">\1</span><span style="color:#404">/</span></span>   <span style="color:#777"># Single- or double-quoted string</span>
text.gsub!(pattern) <span style="color:#080;font-weight:bold">do</span>
  <span style="color:#080;font-weight:bold">if</span> (<span style="color:#d70">$1</span> == <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">&quot;</span><span style="color:#710">'</span></span>)   <span style="color:#777"># If it was a double-quoted string</span>
    <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">'</span><span style="color:#666">#</span><span style="color:#d70">$2</span><span style="color:#D20">'</span><span style="color:#710">&quot;</span></span>        <span style="color:#777"># replace with single-quoted</span>
  <span style="color:#080;font-weight:bold">else</span>             <span style="color:#777"># Otherwise, if single-quoted</span>
    <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\&quot;</span><span style="color:#666">#</span><span style="color:#d70">$2</span><span style="color:#b0b">\&quot;</span><span style="color:#710">&quot;</span></span>      <span style="color:#777"># replace with double-quoted</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="numeric-methods">9.3.1 Numeric Methods</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># General Predicates</span>
<span style="color:#00D">0</span>.zero?        <span style="color:#777"># =&gt; true (is this number zero?)</span>
<span style="color:#60E">1.0</span>.zero?      <span style="color:#777"># =&gt; false</span>
<span style="color:#60E">0.0</span>.nonzero?   <span style="color:#777"># =&gt; nil (works like false)</span>
<span style="color:#00D">1</span>.nonzero?     <span style="color:#777"># =&gt; 1 (works like true)</span>
<span style="color:#00D">1</span>.integer?     <span style="color:#777"># =&gt; true</span>
<span style="color:#60E">1.0</span>.integer?   <span style="color:#777"># =&gt; false</span>
<span style="color:#00D">1</span>.scalar?      <span style="color:#777"># =&gt; false: not a complex number. Ruby 1.9.</span>
<span style="color:#60E">1.0</span>.scalar?    <span style="color:#777"># =&gt; false: not a complex number. Ruby 1.9.</span>
Complex(<span style="color:#00D">1</span>,<span style="color:#00D">2</span>).scalar? <span style="color:#777"># =&gt; true: a complex number. requires 'complex'.</span>

<span style="color:#777"># Integer predicates</span>
<span style="color:#00D">0</span>.even?        <span style="color:#777"># =&gt; true (Ruby 1.9)</span>
<span style="color:#00D">0</span>.odd?         <span style="color:#777"># =&gt; false</span>

<span style="color:#777"># Float predicates</span>
<span style="color:#036;font-weight:bold">ZERO</span>, <span style="color:#036;font-weight:bold">INF</span>, <span style="color:#036;font-weight:bold">NAN</span> = <span style="color:#60E">0.0</span>, <span style="color:#60E">1.0</span>/<span style="color:#60E">0.0</span>, <span style="color:#60E">0.0</span>/<span style="color:#60E">0.0</span>  <span style="color:#777"># Constants for testing</span>

<span style="color:#036;font-weight:bold">ZERO</span>.finite?   <span style="color:#777"># =&gt; true: is this number finite?</span>
<span style="color:#036;font-weight:bold">INF</span>.finite?    <span style="color:#777"># =&gt; false</span>
<span style="color:#036;font-weight:bold">NAN</span>.finite?    <span style="color:#777"># =&gt; false</span>

<span style="color:#036;font-weight:bold">ZERO</span>.infinite? <span style="color:#777"># =&gt; nil: is this number infinite? Positive or negative?</span>
<span style="color:#036;font-weight:bold">INF</span>.infinite?  <span style="color:#777"># =&gt; 1</span>
-<span style="color:#036;font-weight:bold">INF</span>.infinite? <span style="color:#777"># =&gt; -1</span>
<span style="color:#036;font-weight:bold">NAN</span>.infinite?  <span style="color:#777"># =&gt; nil</span>

<span style="color:#036;font-weight:bold">ZERO</span>.nan?      <span style="color:#777"># =&gt; false: is this number not-a-number?</span>
<span style="color:#036;font-weight:bold">INF</span>.nan?       <span style="color:#777"># =&gt; false</span>
<span style="color:#036;font-weight:bold">NAN</span>.nan?       <span style="color:#777"># =&gt; true</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Rounding methods</span>
<span style="color:#60E">1.1</span>.ceil     <span style="color:#777"># =&gt;  2: ceiling: smallest integer &gt;= its argument</span>
<span style="color:#60E">-1.1</span>.ceil    <span style="color:#777"># =&gt; -1: ceiling: smallest integer &gt;= its argument</span>
<span style="color:#60E">1.9</span>.floor    <span style="color:#777"># =&gt;  1: floor: largest integer &lt;= its argument</span>
<span style="color:#60E">-1.9</span>.floor   <span style="color:#777"># =&gt; -2: floor: largest integer &lt;= its argument</span>
<span style="color:#60E">1.1</span>.round    <span style="color:#777"># =&gt;  1: round to nearest integer</span>
<span style="color:#60E">0.5</span>.round    <span style="color:#777"># =&gt;  1: round toward infinity when halfway between integers </span>
<span style="color:#60E">-0.5</span>.round   <span style="color:#777"># =&gt; -1: or round toward negative infinity</span>
<span style="color:#60E">1.1</span>.truncate <span style="color:#777"># =&gt;  1: chop off fractional part: round toward zero</span>
<span style="color:#60E">-1.1</span>.to_i    <span style="color:#777"># =&gt; -1: synonym for truncate</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Absolute value and sign</span>
<span style="color:#60E">-2.0</span>.abs     <span style="color:#777"># =&gt; 2.0: absolute value</span>
<span style="color:#60E">-2.0</span>&lt;=&gt;<span style="color:#60E">0.0</span>   <span style="color:#777"># =&gt; -1: use &lt;=&gt; operator to compute sign of a number</span>

<span style="color:#777"># Constants</span>
<span style="color:#036;font-weight:bold">Float</span>::<span style="color:#036;font-weight:bold">MAX</span>     <span style="color:#777"># =&gt; 1.79769313486232e+308: may be platform dependent</span>
<span style="color:#036;font-weight:bold">Float</span>::<span style="color:#036;font-weight:bold">MIN</span>     <span style="color:#777"># =&gt; 2.2250738585072e-308</span>
<span style="color:#036;font-weight:bold">Float</span>::<span style="color:#036;font-weight:bold">EPSILON</span> <span style="color:#777"># =&gt; 2.22044604925031e-16: difference between adjacent floats</span>
</pre></div>
</div>
</div>

<h4 id="the-math-module">9.3.2 The Math Module</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Constants</span>
<span style="color:#036;font-weight:bold">Math</span>::<span style="color:#036;font-weight:bold">PI</span>               <span style="color:#777"># =&gt; 3.14159265358979</span>
<span style="color:#036;font-weight:bold">Math</span>::<span style="color:#036;font-weight:bold">E</span>                <span style="color:#777"># =&gt; 2.71828182845905</span>

<span style="color:#777"># Roots</span>
<span style="color:#036;font-weight:bold">Math</span>.sqrt(<span style="color:#60E">25.0</span>)        <span style="color:#777"># =&gt; 5.0: square root</span>
<span style="color:#60E">27.0</span>**(<span style="color:#60E">1.0</span>/<span style="color:#60E">3.0</span>)        <span style="color:#777"># =&gt; 3.0: cube root computed with ** operator</span>

<span style="color:#777"># Logarithms</span>
<span style="color:#036;font-weight:bold">Math</span>.log10(<span style="color:#60E">100.0</span>)      <span style="color:#777"># =&gt; 2.0: base-10 logarithm</span>
<span style="color:#036;font-weight:bold">Math</span>.log(<span style="color:#036;font-weight:bold">Math</span>::<span style="color:#036;font-weight:bold">E</span>**<span style="color:#00D">3</span>)   <span style="color:#777"># =&gt; 3.0: natural (base-e) logarithm</span>
<span style="color:#036;font-weight:bold">Math</span>.log2(<span style="color:#00D">8</span>)           <span style="color:#777"># =&gt; 3.0: base-2 logarithm. Ruby 1.9 and later.</span>
<span style="color:#036;font-weight:bold">Math</span>.log(<span style="color:#00D">16</span>, <span style="color:#00D">4</span>)        <span style="color:#777"># =&gt; 2.0: 2nd arg to log() is the base. Ruby 1.9.</span>
<span style="color:#036;font-weight:bold">Math</span>.exp(<span style="color:#00D">2</span>)            <span style="color:#777"># =&gt; 7.38905609893065&quot;: same as Math::E**2</span>

<span style="color:#777"># Trigonometry</span>
include <span style="color:#036;font-weight:bold">Math</span>           <span style="color:#777"># Save typing: we can now omit Math prefix.</span>
sin(<span style="color:#036;font-weight:bold">PI</span>/<span style="color:#00D">2</span>)              <span style="color:#777"># =&gt; 1.0: sine. Argument is in radians, not degrees.</span>
cos(<span style="color:#00D">0</span>)                 <span style="color:#777"># =&gt; 1.0: cosine.</span>
tan(<span style="color:#036;font-weight:bold">PI</span>/<span style="color:#00D">4</span>)              <span style="color:#777"># =&gt; 1.0: tangent.</span>
asin(<span style="color:#60E">1.0</span>)/<span style="color:#036;font-weight:bold">PI</span>           <span style="color:#777"># =&gt; 0.5: arcsine. See also acos and atan.</span>
sinh(<span style="color:#00D">0</span>)                <span style="color:#777"># =&gt; 0.0: hyperbolic sine. Also cosh, tanh.</span>
asinh(<span style="color:#60E">1.0</span>)             <span style="color:#777"># =&gt; 0.0: inverse sinh. Also acosh, atanh.</span>

<span style="color:#777"># Convert cartesian point (x,y) to polar coordinates (theta, r)</span>
theta = atan2(y,x)     <span style="color:#777"># Angle between X axis and line (0,0)-(x,y)</span>
r = hypot(x,y)         <span style="color:#777"># Hypotenuse: sqrt(x**2 + y**2)</span>

<span style="color:#777"># Decompose float x into fraction f and exponent e, such that x = f*2**e</span>
f,e = frexp(<span style="color:#60E">1024.0</span>)    <span style="color:#777"># =&gt; [0.5, 11]</span>
x = ldexp(f, e)        <span style="color:#777"># =&gt; 1024: compute x = f*2**e</span>

<span style="color:#777"># Error function</span>
erf(<span style="color:#60E">0.0</span>)               <span style="color:#777"># =&gt; 0.0: error function</span>
erfc(<span style="color:#60E">0.0</span>)              <span style="color:#777"># =&gt; 1.0: 1-erf(x): complementary error function</span>
</pre></div>
</div>
</div>

<h4 id="decimal-arithmetic">9.3.3 Decimal Arithmetic</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">bigdecimal</span><span style="color:#710">&quot;</span></span>      <span style="color:#777"># Load standard library</span>
dime = BigDecimal(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">0.1</span><span style="color:#710">&quot;</span></span>)  <span style="color:#777"># Pass a string to constructor, not a Float</span>
<span style="color:#00D">4</span>*dime-<span style="color:#00D">3</span>*dime == dime     <span style="color:#777"># true with BigDecimal, but false if we use Float</span>

<span style="color:#777"># Compute monthly interest payments on a mortgage with BigDecimal.</span>
<span style="color:#777"># Use &quot;Banker's Rounding&quot; mode, and limit computations to 20 digits</span>
<span style="color:#036;font-weight:bold">BigDecimal</span>.mode(<span style="color:#036;font-weight:bold">BigDecimal</span>::<span style="color:#036;font-weight:bold">ROUND_MODE</span>, <span style="color:#036;font-weight:bold">BigDecimal</span>::<span style="color:#036;font-weight:bold">ROUND_HALF_EVEN</span>)
<span style="color:#036;font-weight:bold">BigDecimal</span>.limit(<span style="color:#00D">20</span>)
principal = BigDecimal(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">200000</span><span style="color:#710">&quot;</span></span>)  <span style="color:#777"># Always pass strings to constructor</span>
apr = BigDecimal(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">6.5</span><span style="color:#710">&quot;</span></span>)           <span style="color:#777"># Annual percentage rate interest</span>
years = <span style="color:#00D">30</span>                        <span style="color:#777"># Term of mortgage in years</span>
payments = years*<span style="color:#00D">12</span>               <span style="color:#777"># 12 monthly payments in a year</span>
interest = apr/<span style="color:#00D">100</span>/<span style="color:#00D">12</span>             <span style="color:#777"># Convert APR to monthly fraction</span>
x = (interest+<span style="color:#00D">1</span>)**payments        <span style="color:#777"># Note exponentiation with BigDecimal</span>
monthly = (principal * interest * x)/(x-<span style="color:#00D">1</span>)  <span style="color:#777"># Compute monthly payment</span>
monthly = monthly.round(<span style="color:#00D">2</span>)        <span style="color:#777"># Round to two decimal places</span>
monthly = monthly.to_s(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">f</span><span style="color:#710">&quot;</span></span>)       <span style="color:#777"># Convert to human-readable string</span>
</pre></div>
</div>
</div>

<h4 id="complex-numbers">9.3.4 Complex Numbers</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">complex</span><span style="color:#710">&quot;</span></span>           <span style="color:#777"># Complex is part of the standard library</span>
c = Complex(<span style="color:#60E">0.5</span>,<span style="color:#60E">-0.2</span>)       <span style="color:#777"># .5-.2i.  </span>
z = <span style="color:#036;font-weight:bold">Complex</span>.new(<span style="color:#60E">0.0</span>, <span style="color:#60E">0.0</span>)   <span style="color:#777"># Complex.new also works, but is not required</span>
<span style="color:#00D">10</span>.times { z = z*z + c }    <span style="color:#777"># Iteration for computing Julia set fractals</span>
magnitude = z.abs           <span style="color:#777"># Magnitude of a complex number</span>
x = <span style="color:#036;font-weight:bold">Math</span>.sin(z)             <span style="color:#777"># Trig functions work with Complex numbers</span>
<span style="color:#036;font-weight:bold">Math</span>.sqrt(<span style="color:#60E">-1.0</span>).to_s        <span style="color:#777"># =&gt; &quot;1.0i&quot;: square root of -1</span>
<span style="color:#036;font-weight:bold">Math</span>.sqrt(<span style="color:#60E">-1.0</span>)==<span style="color:#036;font-weight:bold">Complex</span>::<span style="color:#036;font-weight:bold">I</span> <span style="color:#777"># =&gt; true</span>
</pre></div>
</div>
</div>

<h4 id="rational-numbers">9.3.5 Rational Numbers</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rational</span><span style="color:#710">&quot;</span></span>           <span style="color:#777"># Load the library</span>
penny = Rational(<span style="color:#00D">1</span>, <span style="color:#00D">100</span>)     <span style="color:#777"># A penny is 1/100th</span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">mathn</span><span style="color:#710">&quot;</span></span>              <span style="color:#777"># Makes integer division produce Rational values</span>
nickel = <span style="color:#00D">5</span>/<span style="color:#00D">100</span>
dime = <span style="color:#00D">10</span>/<span style="color:#00D">100</span>
quarter = <span style="color:#00D">1</span>/<span style="color:#00D">4</span>
change = <span style="color:#00D">2</span>*quarter + <span style="color:#00D">3</span>*penny <span style="color:#777"># Rational result: 53/100</span>
(<span style="color:#00D">1</span>/<span style="color:#00D">2</span> * <span style="color:#00D">1</span>/<span style="color:#00D">3</span>).to_s             <span style="color:#777"># &quot;1/6&quot;: mathn prints Rationals as fractions</span>
</pre></div>
</div>
</div>

<h4 id="vectors-and-matrices">9.3.6 Vectors and Matrices</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">matrix</span><span style="color:#710">&quot;</span></span>

<span style="color:#777"># Represent the point (1,1) as the vector [1,1]</span>
unit = <span style="color:#036;font-weight:bold">Vector</span>[<span style="color:#00D">1</span>,<span style="color:#00D">1</span>]

<span style="color:#777"># The identity transformation matrix</span>
identity = <span style="color:#036;font-weight:bold">Matrix</span>.identity(<span style="color:#00D">2</span>)  <span style="color:#777"># 2x2 matrix</span>
identity*unit == unit          <span style="color:#777"># true: no transformation</span>

<span style="color:#777"># This matrix scales a point by sx,sy</span>
sx,sy = <span style="color:#60E">2.0</span>, <span style="color:#60E">3.0</span>;
scale = <span style="color:#036;font-weight:bold">Matrix</span>[[sx,<span style="color:#00D">0</span>], [<span style="color:#00D">0</span>, sy]]
scale*unit             <span style="color:#777"># =&gt; [2.0, 3.0]: scaled point</span>

<span style="color:#777"># This matrix rotates counterclockwise around the origin</span>
theta = <span style="color:#036;font-weight:bold">Math</span>::<span style="color:#036;font-weight:bold">PI</span>/<span style="color:#00D">2</span>     <span style="color:#777"># 90 degrees</span>
rotate = <span style="color:#036;font-weight:bold">Matrix</span>[[<span style="color:#036;font-weight:bold">Math</span>.cos(theta), -<span style="color:#036;font-weight:bold">Math</span>.sin(theta)],
                [<span style="color:#036;font-weight:bold">Math</span>.sin(theta),  <span style="color:#036;font-weight:bold">Math</span>.cos(theta)]]
rotate*unit            <span style="color:#777"># [-1.0, 1.0]: 90 degree rotation</span>

<span style="color:#777"># Two transformations in one</span>
scale * (rotate*unit)  <span style="color:#777"># [-2.0, 3.0]</span>
</pre></div>
</div>
</div>

<h4 id="random-numbers">9.3.7 Random Numbers</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>rand       <span style="color:#777"># =&gt; 0.964395196505186</span>
rand       <span style="color:#777"># =&gt; 0.390523655919935</span>
rand(<span style="color:#00D">100</span>)  <span style="color:#777"># =&gt; 81</span>
rand(<span style="color:#00D">100</span>)  <span style="color:#777"># =&gt; 32</span>
<span style="color:#777">###########################</span>
srand(<span style="color:#00D">0</span>)                <span style="color:#777"># Known seed</span>
[rand(<span style="color:#00D">100</span>),rand(<span style="color:#00D">100</span>)]   <span style="color:#777"># =&gt; [44,47]: pseudorandom sequence</span>
srand(<span style="color:#00D">0</span>)                <span style="color:#777"># Reset the seed to repeat the sequence</span>
[rand(<span style="color:#00D">100</span>),rand(<span style="color:#00D">100</span>)]   <span style="color:#777"># =&gt; [44,47]</span>
</pre></div>
</div>
</div>

<h4 id="dates-and-times">9.4 Dates and Times</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Creating Time objects</span>
<span style="color:#036;font-weight:bold">Time</span>.now        <span style="color:#777"># Returns a time object that represents the current time</span>
<span style="color:#036;font-weight:bold">Time</span>.new        <span style="color:#777"># A synonym for Time.now</span>

<span style="color:#036;font-weight:bold">Time</span>.local(<span style="color:#00D">2007</span>, <span style="color:#00D">7</span>, <span style="color:#00D">8</span>)          <span style="color:#777"># July 8, 2007</span>
<span style="color:#036;font-weight:bold">Time</span>.local(<span style="color:#00D">2007</span>, <span style="color:#00D">7</span>, <span style="color:#00D">8</span>, <span style="color:#00D">9</span>, <span style="color:#00D">10</span>)   <span style="color:#777"># July 8, 2007, 09:10am, local time</span>
<span style="color:#036;font-weight:bold">Time</span>.utc(<span style="color:#00D">2007</span>, <span style="color:#00D">7</span>, <span style="color:#00D">8</span>, <span style="color:#00D">9</span>, <span style="color:#00D">10</span>)     <span style="color:#777"># July 8, 2007, 09:10 UTC</span>
<span style="color:#036;font-weight:bold">Time</span>.gm(<span style="color:#00D">2007</span>, <span style="color:#00D">7</span>, <span style="color:#00D">8</span>, <span style="color:#00D">9</span>, <span style="color:#00D">10</span>, <span style="color:#00D">11</span>)  <span style="color:#777"># July 8, 2007, 09:10:11 GMT (same as UTC)</span>

<span style="color:#777"># One microsecond before the new millennium began in London</span>
<span style="color:#777"># We'll use this Time object in many examples below.</span>
t = <span style="color:#036;font-weight:bold">Time</span>.utc(<span style="color:#00D">2000</span>, <span style="color:#00D">12</span>, <span style="color:#00D">31</span>, <span style="color:#00D">23</span>, <span style="color:#00D">59</span>, <span style="color:#00D">59</span>, <span style="color:#00D">999999</span>)

<span style="color:#777"># Components of a Time</span>
t.year    <span style="color:#777"># =&gt; 2000</span>
t.month   <span style="color:#777"># =&gt; 12: December</span>
t.day     <span style="color:#777"># =&gt; 31</span>
t.wday    <span style="color:#777"># =&gt; 0: day of week: 0 is Sunday</span>
t.yday    <span style="color:#777"># =&gt; 366: day of year: 2000 was a leap year</span>
t.hour    <span style="color:#777"># =&gt; 23: 24-hour clock</span>
t.min     <span style="color:#777"># =&gt; 59</span>
t.sec     <span style="color:#777"># =&gt; 59</span>
t.usec    <span style="color:#777"># =&gt; 999999: microseconds, not milliseconds</span>
t.zone    <span style="color:#777"># =&gt; &quot;UTC&quot;: timezone name</span>

<span style="color:#777"># Get all components in an array that holds</span>
<span style="color:#777"># [sec,min,hour,day,month,year,wday,yday,isdst,zone]</span>
<span style="color:#777"># Note that we lose microseconds</span>
values = t.to_a    <span style="color:#777"># =&gt; [59, 59, 23, 31, 12, 2000, 0, 366, false, &quot;UTC&quot;]</span>

<span style="color:#777"># Arrays of this form can be passed to Time.local and Time.utc</span>
values[<span style="color:#00D">5</span>] += <span style="color:#00D">1</span>     <span style="color:#777"># Increment the year</span>
<span style="color:#036;font-weight:bold">Time</span>.utc(*values)  <span style="color:#777"># =&gt; Mon Dec 31 23:59:59 UTC 2001</span>

<span style="color:#777"># Timezones and daylight savings time</span>
t.zone       <span style="color:#777"># =&gt; &quot;UTC&quot;: return the timezone</span>
t.utc?       <span style="color:#777"># =&gt; true: t is in UTC time zone</span>
t.utc_offset <span style="color:#777"># =&gt; 0: UTC is 0 seconds offset from UTC</span>
t.localtime  <span style="color:#777"># Convert to local timezone. Mutates the Time object!</span>
t.zone       <span style="color:#777"># =&gt; &quot;PST&quot; (or whatever your timezone is)</span>
t.utc?       <span style="color:#777"># =&gt; false</span>
t.utc_offset <span style="color:#777"># =&gt; -28800: 8 hours before UTC</span>
t.gmtime     <span style="color:#777"># Convert back to UTC. Another mutator.</span>
t.getlocal   <span style="color:#777"># Return a new Time object in local zone</span>
t.getutc     <span style="color:#777"># Return a new Time object in UTC</span>
t.isdst      <span style="color:#777"># =&gt; false: UTC does not have DST. Note no ?.</span>
t.getlocal.isdst <span style="color:#777"># =&gt; false: no daylight savings time in winter.</span>

<span style="color:#777"># Weekday predicates: Ruby 1.9</span>
t.sunday?    <span style="color:#777"># =&gt; true</span>
t.monday?    <span style="color:#777"># =&gt; false</span>
t.tuesday?   <span style="color:#777"># etc.</span>

<span style="color:#777"># Formatting Times and Dates</span>
t.to_s       <span style="color:#777"># =&gt; &quot;Sun Dec 31 23:59:59 UTC 2000&quot;: Ruby 1.8</span>
t.to_s       <span style="color:#777"># =&gt; &quot;2000-12-31 23:59:59 UTC&quot;: Ruby 1.9 uses ISO-8601</span>
t.ctime      <span style="color:#777"># =&gt; &quot;Sun Dec 31 23:59:59 2000&quot;: another basic format</span>

<span style="color:#777"># strftime interpolates date and time components into a template string</span>
<span style="color:#777"># Locale-independent formatting</span>
t.strftime(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%Y-%m-%d %H:%M:%S</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># =&gt; &quot;2000-12-31 23:59:59&quot;: ISO-8601 format</span>
t.strftime(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%H:%M</span><span style="color:#710">&quot;</span></span>)             <span style="color:#777"># =&gt; &quot;23:59&quot;: 24-hour time</span>
t.strftime(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%I:%M %p</span><span style="color:#710">&quot;</span></span>)          <span style="color:#777"># =&gt; &quot;11:59 PM&quot;: 12-hour clock</span>

<span style="color:#777"># Locale-dependent formats</span>
t.strftime(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%A, %B %d</span><span style="color:#710">&quot;</span></span>)         <span style="color:#777"># =&gt; &quot;Sunday, December 31&quot;</span>
t.strftime(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%a, %b %d %y</span><span style="color:#710">&quot;</span></span>)      <span style="color:#777"># =&gt; &quot;Sun, Dec 31 00&quot;: 2-digit year</span>
t.strftime(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%x</span><span style="color:#710">&quot;</span></span>)                <span style="color:#777"># =&gt; &quot;12/31/00&quot;: locale-dependent format</span>
t.strftime(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%X</span><span style="color:#710">&quot;</span></span>)                <span style="color:#777"># =&gt; &quot;23:59:59&quot;</span>
t.strftime(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%c</span><span style="color:#710">&quot;</span></span>)                <span style="color:#777"># same as ctime</span>

<span style="color:#777"># Parsing Times and Dates</span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">parsedate</span><span style="color:#710">'</span></span>    <span style="color:#777"># A versatile date/time parsing library</span>
include <span style="color:#036;font-weight:bold">ParseDate</span>      <span style="color:#777"># Include parsedate() as a global function</span>
datestring = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">2001-01-01</span><span style="color:#710">&quot;</span></span>
values = parsedate(datestring)  <span style="color:#777"># [2001, 1, 1, nil, nil, nil, nil, nil]</span>
t = <span style="color:#036;font-weight:bold">Time</span>.local(*values)         <span style="color:#777"># =&gt; Mon Jan 01 00:00:00 -0800 2001</span>
s = t.ctime                     <span style="color:#777"># =&gt; &quot;Mon Jan  1 00:00:00 2001&quot;</span>
<span style="color:#036;font-weight:bold">Time</span>.local(*parsedate(s))==t    <span style="color:#777"># =&gt; true</span>

s = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">2001-01-01 00:00:00-0500</span><span style="color:#710">&quot;</span></span>  <span style="color:#777"># midnight in New York</span>
v = parsedate(s)                <span style="color:#777"># =&gt; [2001, 1, 1, 0, 0, 0, &quot;-0500&quot;, nil]</span>
t = <span style="color:#036;font-weight:bold">Time</span>.local(*v)              <span style="color:#777"># Loses time zone information!</span>

<span style="color:#777"># Time arithmetic</span>
now = <span style="color:#036;font-weight:bold">Time</span>.now          <span style="color:#777"># Current time</span>
past = now - <span style="color:#00D">10</span>         <span style="color:#777"># 10 seconds ago. Time - number =&gt; Time</span>
future = now + <span style="color:#00D">10</span>       <span style="color:#777"># 10 seconds from now Time + number =&gt; Time</span>
future - now            <span style="color:#777"># =&gt; 10  Time - Time =&gt; number of seconds</span>

<span style="color:#777"># Time comparisons</span>
past &lt;=&gt; future         <span style="color:#777"># =&gt; -1</span>
past &lt; future           <span style="color:#777"># =&gt; true</span>
now &gt;= future           <span style="color:#777"># =&gt; false</span>
now == now              <span style="color:#777"># =&gt; true</span>

<span style="color:#777"># Helper methods for working with time units other than seconds</span>
<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Numeric</span>
  <span style="color:#777"># Convert time intervals to seconds</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">milliseconds</span>; <span style="color:#069">self</span>/<span style="color:#60E">1000.0</span>; <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">seconds</span>; <span style="color:#069">self</span>; <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">minutes</span>; <span style="color:#069">self</span>*<span style="color:#00D">60</span>; <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">hours</span>; <span style="color:#069">self</span>*<span style="color:#00D">60</span>*<span style="color:#00D">60</span>; <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">days</span>; <span style="color:#069">self</span>*<span style="color:#00D">60</span>*<span style="color:#00D">60</span>*<span style="color:#00D">24</span>; <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">weeks</span>; <span style="color:#069">self</span>*<span style="color:#00D">60</span>*<span style="color:#00D">60</span>*<span style="color:#00D">24</span>*<span style="color:#00D">7</span>; <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#777"># Convert seconds to other intervals</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_milliseconds</span>; <span style="color:#069">self</span>*<span style="color:#00D">1000</span>; <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_seconds</span>; <span style="color:#069">self</span>; <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_minutes</span>; <span style="color:#069">self</span>/<span style="color:#60E">60.0</span>; <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_hours</span>; <span style="color:#069">self</span>/(<span style="color:#00D">60</span>*<span style="color:#60E">60.0</span>); <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_days</span>; <span style="color:#069">self</span>/(<span style="color:#00D">60</span>*<span style="color:#00D">60</span>*<span style="color:#60E">24.0</span>); <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_weeks</span>; <span style="color:#069">self</span>/(<span style="color:#00D">60</span>*<span style="color:#00D">60</span>*<span style="color:#00D">24</span>*<span style="color:#60E">7.0</span>); <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>

expires = now + <span style="color:#00D">10</span>.days     <span style="color:#777"># 10 days from now</span>
expires - now               <span style="color:#777"># =&gt; 864000.0 seconds</span>
(expires - now).to_hours    <span style="color:#777"># =&gt; 240.0 hours</span>

<span style="color:#777"># Time represented internally as seconds since the (platform-dependent) epoch</span>
t = <span style="color:#036;font-weight:bold">Time</span>.now.to_i    <span style="color:#777"># =&gt; 1184036194 seconds since epoch</span>
<span style="color:#036;font-weight:bold">Time</span>.at(t)           <span style="color:#777"># =&gt; seconds since epoch to Time object</span>
t = <span style="color:#036;font-weight:bold">Time</span>.now.to_f    <span style="color:#777"># =&gt; 1184036322.90872: includes 908720 microseconds</span>
<span style="color:#036;font-weight:bold">Time</span>.at(<span style="color:#00D">0</span>)           <span style="color:#777"># =&gt; Wed Dec 31 16:00:00 -0800 1969: epoch in local time</span>
</pre></div>
</div>
</div>

<h4 id="iterating-and-converting-collections">9.5.1.1 Iterating and converting collections</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>(<span style="color:#00D">5</span>..<span style="color:#00D">7</span>).each {|x| print x }                 <span style="color:#777"># Prints &quot;567&quot;</span>
(<span style="color:#00D">5</span>..<span style="color:#00D">7</span>).each_with_index {|x,i| print x,i }  <span style="color:#777"># Prints &quot;506172&quot;</span>
<span style="color:#777">###########################</span>
(<span style="color:#00D">1</span>..<span style="color:#00D">10</span>).each_slice(<span style="color:#00D">4</span>) {|x| print x } <span style="color:#777"># Prints &quot;[1,2,3,4][5,6,7,8][9,10]&quot;</span>
<span style="color:#777">###########################</span>
(<span style="color:#00D">1</span>..<span style="color:#00D">5</span>).each_cons(<span style="color:#00D">3</span>) {|x| print x }    <span style="color:#777"># Prints &quot;[1,2,3][2,3,4][3,4,5]&quot;</span>
<span style="color:#777">###########################</span>
data = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>,<span style="color:#00D">4</span>]                        <span style="color:#777"># An enumerable collection</span>
roots = data.collect {|x| <span style="color:#036;font-weight:bold">Math</span>.sqrt(x)} <span style="color:#777"># Collect roots of our data</span>
words = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">%w[</span><span style="color:#D20">hello world</span><span style="color:#710">]</span></span>                 <span style="color:#777"># Another collection</span>
upper = words.map {|x| x.upcase }       <span style="color:#777"># Map to uppercase</span>
<span style="color:#777">###########################</span>
(<span style="color:#00D">1</span>..<span style="color:#00D">3</span>).zip([<span style="color:#00D">4</span>,<span style="color:#00D">5</span>,<span style="color:#00D">6</span>]) {|x| print x.inspect } <span style="color:#777"># Prints &quot;[1,4][2,5][3,6]&quot;</span>
(<span style="color:#00D">1</span>..<span style="color:#00D">3</span>).zip([<span style="color:#00D">4</span>,<span style="color:#00D">5</span>,<span style="color:#00D">6</span>],[<span style="color:#00D">7</span>,<span style="color:#00D">8</span>]) {|x| print x}    <span style="color:#777"># Prints &quot;14725836&quot;</span>
(<span style="color:#00D">1</span>..<span style="color:#00D">3</span>).zip(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">a</span><span style="color:#710">'</span></span>..<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">c</span><span style="color:#710">'</span></span>) {|x,y| print x,y }    <span style="color:#777"># Prints &quot;1a2b3c&quot;</span>
<span style="color:#777">###########################</span>
(<span style="color:#00D">1</span>..<span style="color:#00D">3</span>).to_a       <span style="color:#777"># =&gt; [1,2,3]</span>
(<span style="color:#00D">1</span>..<span style="color:#00D">3</span>).entries    <span style="color:#777"># =&gt; [1,2,3]</span>
<span style="color:#777">###########################</span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">set</span><span style="color:#710">'</span></span>
(<span style="color:#00D">1</span>..<span style="color:#00D">3</span>).to_set     <span style="color:#777"># =&gt; #&lt;Set: {1, 2, 3}&gt;</span>
</pre></div>
</div>
</div>

<h4 id="enumerators-and-external-iterators">9.5.1.2 Enumerators and external iterators</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>e = [<span style="color:#00D">1</span>..<span style="color:#00D">10</span>].to_enum              <span style="color:#777"># Uses Range.each</span>
e = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">test</span><span style="color:#710">&quot;</span></span>.enum_for(<span style="color:#A60">:each_byte</span>)  <span style="color:#777"># Uses String.each_byte</span>
e = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">test</span><span style="color:#710">&quot;</span></span>.each_byte             <span style="color:#777"># Uses String.each_byte</span>
<span style="color:#777">###########################</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Ruby</span><span style="color:#710">&quot;</span></span>.each_char.max       <span style="color:#777"># =&gt; &quot;y&quot;; Enumerable method of Enumerator</span>
iter = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Ruby</span><span style="color:#710">&quot;</span></span>.each_char    <span style="color:#777"># Create an Enumerator</span>
loop { print iter.next }   <span style="color:#777"># Prints &quot;Ruby&quot;; use it as external iterator</span>
print iter.next            <span style="color:#777"># Prints &quot;R&quot;: iterator restarts automatically</span>
iter.rewind                <span style="color:#777"># Force it to restart now</span>
print iter.next            <span style="color:#777"># Prints &quot;R&quot; again</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># print &quot;0:R\n1:u\n2:b\n3:y\n&quot;</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Ruby</span><span style="color:#710">&quot;</span></span>.each_char.with_index.each {|c,i| puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>i<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20">:</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>c<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span> }
</pre></div>
</div>
</div>

<h4 id="sorting-collections">9.5.1.3 Sorting collections</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>w = <span style="color:#036;font-weight:bold">Set</span>[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">apple</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Beet</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">carrot</span><span style="color:#710">'</span></span>]  <span style="color:#777"># A set of words to sort</span>
w.sort                         <span style="color:#777"># ['Beet','apple','carrot']: alphabetical</span>
w.sort {|a,b| b&lt;=&gt;a }          <span style="color:#777"># ['carrot','apple','Beet']: reverse</span>
w.sort {|a,b| a.casecmp(b) }   <span style="color:#777"># ['apple','Beet','carrot']: ignore case</span>
w.sort {|a,b| b.size&lt;=&gt;a.size} <span style="color:#777"># ['carrot','apple','Beet']: reverse length</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Case-insensitive sort</span>
words = [<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">carrot</span><span style="color:#710">'</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Beet</span><span style="color:#710">'</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">apple</span><span style="color:#710">'</span></span>]
words.sort_by {|x| x.downcase}       <span style="color:#777"># =&gt; ['apple', 'Beet', 'carrot']</span>
</pre></div>
</div>
</div>

<h4 id="searching-collections">9.5.1.4 Searching collections</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>primes = <span style="color:#036;font-weight:bold">Set</span>[<span style="color:#00D">2</span>, <span style="color:#00D">3</span>, <span style="color:#00D">5</span>, <span style="color:#00D">7</span>]
primes.include? <span style="color:#00D">2</span>        <span style="color:#777"># =&gt; true</span>
primes.member? <span style="color:#00D">1</span>         <span style="color:#777"># =&gt; false</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Find the first subarray that includes the number 1</span>
data = [[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>], [<span style="color:#00D">0</span>,<span style="color:#00D">1</span>], [<span style="color:#00D">7</span>,<span style="color:#00D">8</span>]]
data.find {|x| x.include? <span style="color:#00D">1</span>}     <span style="color:#777"># =&gt; [1,2]</span>
data.detect {|x| x.include? <span style="color:#00D">3</span>}   <span style="color:#777"># =&gt; nil: no such element</span>
<span style="color:#777">###########################</span>
data.find_index {|x| x.include? <span style="color:#00D">1</span>} <span style="color:#777"># =&gt; 0: the first element matches</span>
data.find_index {|x| x.include? <span style="color:#00D">3</span>} <span style="color:#777"># =&gt; nil: no such element</span>
</pre></div>
</div>
</div>

<h4 id="selecting-subcollections">9.5.1.5 Selecting subcollections</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>(<span style="color:#00D">1</span>..<span style="color:#00D">8</span>).select {|x| x%<span style="color:#00D">2</span>==<span style="color:#00D">0</span>}    <span style="color:#777"># =&gt; [2,4,6,8]: select even elements</span>
(<span style="color:#00D">1</span>..<span style="color:#00D">8</span>).find_all {|x| x%<span style="color:#00D">2</span>==<span style="color:#00D">1</span>}  <span style="color:#777"># =&gt; [1,3,5,7]: find all odd elements</span>
<span style="color:#777">###########################</span>
primes = [<span style="color:#00D">2</span>,<span style="color:#00D">3</span>,<span style="color:#00D">5</span>,<span style="color:#00D">7</span>]
primes.reject {|x| x%<span style="color:#00D">2</span>==<span style="color:#00D">0</span>}  <span style="color:#777"># =&gt; [3,5,7]: reject the even ones</span>
<span style="color:#777">###########################</span>
(<span style="color:#00D">1</span>..<span style="color:#00D">8</span>).partition {|x| x%<span style="color:#00D">2</span>==<span style="color:#00D">0</span>}  <span style="color:#777"># =&gt; [[2, 4, 6, 8], [1, 3, 5, 7]]</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Group programming languages by their first letter</span>
langs = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">%w[</span><span style="color:#D20"> java perl python ruby </span><span style="color:#710">]</span></span>
groups = langs.group_by {|lang| lang[<span style="color:#00D">0</span>] }
groups <span style="color:#777"># =&gt; {&quot;j&quot;=&gt;[&quot;java&quot;], &quot;p&quot;=&gt;[&quot;perl&quot;, &quot;python&quot;], &quot;r&quot;=&gt;[&quot;ruby&quot;]}</span>
<span style="color:#777">###########################</span>
langs = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">%w[</span><span style="color:#D20"> java perl python ruby </span><span style="color:#710">]</span></span>
langs.grep(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">^p</span><span style="color:#404">/</span></span>)                    <span style="color:#777"># =&gt; [perl, python]: start with 'p'</span>
langs.grep(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">^p</span><span style="color:#404">/</span></span>) {|x| x.capitalize} <span style="color:#777"># =&gt; [Perl, Python]: fix caps</span>
data = [<span style="color:#00D">1</span>, <span style="color:#00D">17</span>, <span style="color:#60E">3.0</span>, <span style="color:#00D">4</span>]
ints = data.grep(<span style="color:#036;font-weight:bold">Integer</span>)           <span style="color:#777"># =&gt; [1, 17, 4]: only integers</span>
small = ints.grep(<span style="color:#00D">0</span>..<span style="color:#00D">9</span>)             <span style="color:#777"># [1,4]: only in range</span>
<span style="color:#777">###########################</span>
p (<span style="color:#00D">1</span>..<span style="color:#00D">5</span>).first(<span style="color:#00D">2</span>)      <span style="color:#777"># =&gt; [1,2]</span>
p (<span style="color:#00D">1</span>..<span style="color:#00D">5</span>).take(<span style="color:#00D">3</span>)       <span style="color:#777"># =&gt; [1,2,3]</span>
p (<span style="color:#00D">1</span>..<span style="color:#00D">5</span>).drop(<span style="color:#00D">3</span>)       <span style="color:#777"># =&gt; [4,5]</span>
<span style="color:#777">###########################</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>,<span style="color:#069">nil</span>,<span style="color:#00D">4</span>].take_while {|x| x }  <span style="color:#777"># =&gt; [1,2,3]: take until nil</span>
[<span style="color:#069">nil</span>, <span style="color:#00D">1</span>, <span style="color:#00D">2</span>].drop_while {|x| !x }   <span style="color:#777"># =&gt; [1,2]: drop leading nils</span>
</pre></div>
</div>
</div>

<h4 id="reducing-collections">9.5.1.6 Reducing collections</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>[<span style="color:#00D">10</span>, <span style="color:#00D">100</span>, <span style="color:#00D">1</span>].min    <span style="color:#777"># =&gt; 1</span>
[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">a</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">c</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">b</span><span style="color:#710">'</span></span>].max   <span style="color:#777"># =&gt; 'c'</span>
[<span style="color:#00D">10</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">a</span><span style="color:#710">'</span></span>, []].min   <span style="color:#777"># =&gt; ArgumentError: elements not comparable</span>
<span style="color:#777">###########################</span>
langs = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">%w[</span><span style="color:#D20">java perl python ruby</span><span style="color:#710">]</span></span>    <span style="color:#777"># Which has the longest name?</span>
langs.max {|a,b| a.size &lt;=&gt; b.size } <span style="color:#777"># =&gt; &quot;python&quot;: block compares 2</span>
langs.max_by {|word| word.length }   <span style="color:#777"># =&gt; &quot;python&quot;: Ruby 1.9 only</span>
<span style="color:#777">###########################</span>
(<span style="color:#00D">1</span>..<span style="color:#00D">100</span>).minmax                   <span style="color:#777"># =&gt; [1,100] min, max as numbers</span>
(<span style="color:#00D">1</span>..<span style="color:#00D">100</span>).minmax_by {|n| n.to_s }  <span style="color:#777"># =&gt; [1,99]  min, max as strings</span>
<span style="color:#777">###########################</span>
c = <span style="color:#00D">-2</span>..<span style="color:#00D">2</span>
c.all? {|x| x&gt;<span style="color:#00D">0</span>}    <span style="color:#777"># =&gt; false: not all values are &gt; 0</span>
c.any? {|x| x&gt;<span style="color:#00D">0</span>}    <span style="color:#777"># =&gt; true: some values are &gt; 0</span>
c.none? {|x| x&gt;<span style="color:#00D">2</span>}   <span style="color:#777"># =&gt; true: no values are &gt; 2</span>
c.one? {|x| x&gt;<span style="color:#00D">0</span>}    <span style="color:#777"># =&gt; false: more than one value is &gt; 0</span>
c.one? {|x| x&gt;<span style="color:#00D">2</span>}    <span style="color:#777"># =&gt; false: no values are &gt; 2</span>
c.one? {|x| x==<span style="color:#00D">2</span>}   <span style="color:#777"># =&gt; true: one value == 2</span>
[<span style="color:#00D">1</span>, <span style="color:#00D">2</span>, <span style="color:#00D">3</span>].all?      <span style="color:#777"># =&gt; true: no values are nil or false</span>
[<span style="color:#069">nil</span>, <span style="color:#069">false</span>].any?   <span style="color:#777"># =&gt; false: no true values</span>
[].none?            <span style="color:#777"># =&gt; true: no non-false, non-nil values    </span>
<span style="color:#777">###########################</span>
a = [<span style="color:#00D">1</span>,<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>,<span style="color:#00D">5</span>,<span style="color:#00D">8</span>]
a.count(<span style="color:#00D">1</span>)                <span style="color:#777"># =&gt; 2: two elements equal 1</span>
a.count {|x| x % <span style="color:#00D">2</span> == <span style="color:#00D">1</span>}  <span style="color:#777"># =&gt; 4: four elements are odd</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># How many negative numbers?</span>
(<span style="color:#00D">-2</span>..<span style="color:#00D">10</span>).inject(<span style="color:#00D">0</span>) {|num, x| x&lt;<span style="color:#00D">0</span> ? num+<span style="color:#00D">1</span> : num }  <span style="color:#777"># =&gt; 2</span>

<span style="color:#777"># Sum of word lengths</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">%w[</span><span style="color:#D20">pea queue are</span><span style="color:#710">]</span></span>.inject(<span style="color:#00D">0</span>) {|total, word| total + word.length }  <span style="color:#777"># =&gt; 11</span>
<span style="color:#777">###########################</span>
sum = (<span style="color:#00D">1</span>..<span style="color:#00D">5</span>).inject {|total,x| total + x}  <span style="color:#777"># =&gt; 15</span>
prod = (<span style="color:#00D">1</span>..<span style="color:#00D">5</span>).inject {|total,x| total * x} <span style="color:#777"># =&gt; 120</span>
max = [<span style="color:#00D">1</span>,<span style="color:#00D">3</span>,<span style="color:#00D">2</span>].inject {|m,x| m&gt;x ? m : x}   <span style="color:#777"># =&gt; 3</span>
[<span style="color:#00D">1</span>].inject {|total,x| total + x}           <span style="color:#777"># =&gt; 1: block never called</span>
<span style="color:#777">###########################</span>
sum = (<span style="color:#00D">1</span>..<span style="color:#00D">5</span>).reduce(<span style="color:#A60">:+</span>)                    <span style="color:#777"># =&gt; 15</span>
prod = (<span style="color:#00D">1</span>..<span style="color:#00D">5</span>).reduce(<span style="color:#A60">:*</span>)                   <span style="color:#777"># =&gt; 120</span>
letters = (<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">a</span><span style="color:#710">'</span></span>..<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">e</span><span style="color:#710">'</span></span>).reduce(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">-</span><span style="color:#710">&quot;</span></span>, <span style="color:#A60">:concat</span>)  <span style="color:#777"># =&gt; &quot;-abcde&quot;</span>
</pre></div>
</div>
</div>

<h4 id="creating-arrays">9.5.2.1 Creating arrays</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]             <span style="color:#777"># Basic array literal</span>
[]                  <span style="color:#777"># An empty array</span>
[]                  <span style="color:#777"># Arrays are mutable: this empty array is different</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">%w[</span><span style="color:#D20">a b c</span><span style="color:#710">]</span></span>           <span style="color:#777"># =&gt; ['a', 'b', 'c']: array of words</span>
<span style="color:#036;font-weight:bold">Array</span>[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]        <span style="color:#777"># =&gt; [1,2,3]: just like an array literal</span>

<span style="color:#777"># Creating arrays with the new() method</span>
empty = <span style="color:#036;font-weight:bold">Array</span>.new             <span style="color:#777"># []: returns a new empty array</span>
nils = <span style="color:#036;font-weight:bold">Array</span>.new(<span style="color:#00D">3</span>)           <span style="color:#777"># [nil, nil, nil]: three nil elements</span>
copy = <span style="color:#036;font-weight:bold">Array</span>.new(nils)        <span style="color:#777"># Make a new copy of an existing array</span>
zeros = <span style="color:#036;font-weight:bold">Array</span>.new(<span style="color:#00D">4</span>, <span style="color:#00D">0</span>)       <span style="color:#777"># [0, 0, 0, 0]: four 0 elements</span>
count = <span style="color:#036;font-weight:bold">Array</span>.new(<span style="color:#00D">3</span>){|i| i+<span style="color:#00D">1</span>} <span style="color:#777"># [1,2,3]: three elements computed by block</span>

<span style="color:#777"># Be careful with repeated objects</span>
a=<span style="color:#036;font-weight:bold">Array</span>.new(<span style="color:#00D">3</span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">a</span><span style="color:#710">'</span></span>)  <span style="color:#777"># =&gt; ['a','a','a']: three references to the same string</span>
a[<span style="color:#00D">0</span>].upcase!        <span style="color:#777"># Capitalize the first element of the array</span>
a                   <span style="color:#777"># =&gt; ['A','A','A']: they are all the same string!</span>
a=<span style="color:#036;font-weight:bold">Array</span>.new(<span style="color:#00D">3</span>){<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">b</span><span style="color:#710">'</span></span>} <span style="color:#777"># =&gt; ['b','b','b']: three distinct string objects</span>
a[<span style="color:#00D">0</span>].upcase!;       <span style="color:#777"># Capitalize the first one</span>
a                   <span style="color:#777"># =&gt; ['B','b','b']: the others are still lowercase</span>
</pre></div>
</div>
</div>

<h4 id="array-size-and-elements">9.5.2.2 Array size and elements</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Array length</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>].length     <span style="color:#777"># =&gt; 3</span>
[].size            <span style="color:#777"># =&gt; 0: synonym for length</span>
[].empty?          <span style="color:#777"># =&gt; true</span>
[<span style="color:#069">nil</span>].empty?       <span style="color:#777"># =&gt; false</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#069">nil</span>].nitems   <span style="color:#777"># =&gt; 2: number of non-nil elements          </span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>].nitems {|x| x&gt;<span style="color:#00D">2</span>} <span style="color:#777"># =&gt; 1: # of elts matching block (Ruby 1.9)</span>

<span style="color:#777"># Indexing single elements</span>
a = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">%w[</span><span style="color:#D20">a b c d</span><span style="color:#710">]</span></span>    <span style="color:#777"># =&gt; ['a', 'b', 'c', 'd']</span>
a[<span style="color:#00D">0</span>]               <span style="color:#777"># =&gt; 'a': first element</span>
a[<span style="color:#00D">-1</span>]              <span style="color:#777"># =&gt; 'd': last element</span>
a[a.size-<span style="color:#00D">1</span>]        <span style="color:#777"># =&gt; 'd': last element</span>
a[-a.size-<span style="color:#00D">1</span>]       <span style="color:#777"># =&gt; 'a': first element</span>
a[<span style="color:#00D">5</span>]               <span style="color:#777"># =&gt; nil: no such element</span>
a[<span style="color:#00D">-5</span>]              <span style="color:#777"># =&gt; nil: no such element</span>
a.at(<span style="color:#00D">2</span>)            <span style="color:#777"># =&gt; 'c': just like [] for single integer argument</span>
a.fetch(<span style="color:#00D">1</span>)         <span style="color:#777"># =&gt; 'b': also like [] and at</span>
a.fetch(<span style="color:#00D">-1</span>)        <span style="color:#777"># =&gt; 'd': works with negative args</span>
a.fetch(<span style="color:#00D">5</span>)         <span style="color:#777"># =&gt; IndexError!: does not allow out-of-bounds</span>
a.fetch(<span style="color:#00D">-5</span>)        <span style="color:#777"># =&gt; IndexError!: does not allow out-of-bounds</span>
a.fetch(<span style="color:#00D">5</span>, <span style="color:#00D">0</span>)      <span style="color:#777"># =&gt; 0: return 2nd arg when out-of-bounds</span>
a.fetch(<span style="color:#00D">5</span>){|x|x*x} <span style="color:#777"># =&gt; 25: compute value when out-of-bounds</span>
a.first            <span style="color:#777"># =&gt; 'a': the first element</span>
a.last             <span style="color:#777"># =&gt; 'd': the last element</span>
a.choice           <span style="color:#777"># Ruby 1.9: return one element at random</span>

<span style="color:#777"># Indexing subarrays</span>
a[<span style="color:#00D">0</span>,<span style="color:#00D">2</span>]             <span style="color:#777"># =&gt; ['a','b']: two elements, starting at 0</span>
a[<span style="color:#00D">0</span>..<span style="color:#00D">2</span>]            <span style="color:#777"># =&gt; ['a','b','c']: elements with index in range</span>
a[<span style="color:#00D">0</span>...<span style="color:#00D">2</span>]           <span style="color:#777"># =&gt; ['a','b']: three dots instead of two</span>
a[<span style="color:#00D">1</span>,<span style="color:#00D">1</span>]             <span style="color:#777"># =&gt; ['b']: single element, as an array</span>
a[<span style="color:#00D">-2</span>,<span style="color:#00D">2</span>]            <span style="color:#777"># =&gt; ['c','d']: last two elements</span>
a[<span style="color:#00D">4</span>,<span style="color:#00D">2</span>]             <span style="color:#777"># =&gt; []: empty array right at the end </span>
a[<span style="color:#00D">5</span>,<span style="color:#00D">1</span>]             <span style="color:#777"># =&gt; nil: nothing beyond that</span>
a.slice(<span style="color:#00D">0</span>..<span style="color:#00D">1</span>)      <span style="color:#777"># =&gt; ['a','b']: slice is synonym for []</span>
a.first(<span style="color:#00D">3</span>)         <span style="color:#777"># =&gt; ['a','b','c']: first three elements</span>
a.last(<span style="color:#00D">1</span>)          <span style="color:#777"># =&gt; ['d']: last element as an array</span>

<span style="color:#777"># Extracting arbitrary values</span>
a.values_at(<span style="color:#00D">0</span>,<span style="color:#00D">2</span>)         <span style="color:#777"># =&gt; ['a','c']</span>
a.values_at(<span style="color:#00D">4</span>, <span style="color:#00D">3</span>, <span style="color:#00D">2</span>, <span style="color:#00D">1</span>)  <span style="color:#777"># =&gt; [nil, 'd','c','b']</span>
a.values_at(<span style="color:#00D">0</span>, <span style="color:#00D">2</span>..<span style="color:#00D">3</span>, <span style="color:#00D">-1</span>) <span style="color:#777"># =&gt; ['a','c','d','d']</span>
a.values_at(<span style="color:#00D">0</span>..<span style="color:#00D">2</span>,<span style="color:#00D">1</span>..<span style="color:#00D">3</span>)   <span style="color:#777"># =&gt; ['a','b','c','b','c','d']</span>
</pre></div>
</div>
</div>

<h4 id="altering-array-elements">9.5.2.3 Altering array elements</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>a = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]        <span style="color:#777"># Start with this array</span>
<span style="color:#777"># Changing the value of elements</span>
a[<span style="color:#00D">0</span>] = <span style="color:#00D">0</span>           <span style="color:#777"># Alter an existing element: a is [0,2,3]</span>
a[<span style="color:#00D">-1</span>] = <span style="color:#00D">4</span>          <span style="color:#777"># Alter the last element: a is [0,2,4]</span>
a[<span style="color:#00D">1</span>] = <span style="color:#069">nil</span>         <span style="color:#777"># Set the 2nd element to nil: a is [0,nil,4]</span>

<span style="color:#777"># Appending to an array</span>
a = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]        <span style="color:#777"># Start over with this array</span>
a[<span style="color:#00D">3</span>] = <span style="color:#00D">4</span>           <span style="color:#777"># Add a fourth element to it: a is [1,2,3,4]</span>
a[<span style="color:#00D">5</span>] = <span style="color:#00D">6</span>           <span style="color:#777"># We can skip elements: a is [1,2,3,4,nil,6]</span>
a &lt;&lt; <span style="color:#00D">7</span>             <span style="color:#777"># =&gt; [1,2,3,4,nil,6,7]</span>
a &lt;&lt; <span style="color:#00D">8</span> &lt;&lt; <span style="color:#00D">9</span>        <span style="color:#777"># =&gt; [1,2,3,4,nil,6,7,8,9] operator is chainable</span>
a = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]        <span style="color:#777"># Start over with short array</span>
a + a              <span style="color:#777"># =&gt; [1,2,3,1,2,3]: + concatenates into new array</span>
a.concat([<span style="color:#00D">4</span>,<span style="color:#00D">5</span>])    <span style="color:#777"># =&gt; [1,2,3,4,5]: alter a in place: note no !</span>

<span style="color:#777"># Inserting elements with insert</span>
a = [<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">a</span><span style="color:#710">'</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">b</span><span style="color:#710">'</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">c</span><span style="color:#710">'</span></span>]
a.insert(<span style="color:#00D">1</span>, <span style="color:#00D">1</span>, <span style="color:#00D">2</span>)  <span style="color:#777"># a now holds ['a',1,2,'b','c']. Like a[1,0] = [1,2]</span>

<span style="color:#777"># Removing (and returning) individual elements by index</span>
a = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>,<span style="color:#00D">4</span>,<span style="color:#00D">5</span>,<span style="color:#00D">6</span>]
a.delete_at(<span style="color:#00D">4</span>)     <span style="color:#777"># =&gt; 5: a is now [1,2,3,4,6]</span>
a.delete_at(<span style="color:#00D">-1</span>)    <span style="color:#777"># =&gt; 6: a is now [1,2,3,4]</span>
a.delete_at(<span style="color:#00D">4</span>)     <span style="color:#777"># =&gt; nil: a is unchanged</span>

<span style="color:#777"># Removing elements by value</span>
a.delete(<span style="color:#00D">4</span>)        <span style="color:#777"># =&gt; 4: a is [1,2,3]</span>
a[<span style="color:#00D">1</span>] = <span style="color:#00D">1</span>           <span style="color:#777"># a is now [1,1,3]</span>
a.delete(<span style="color:#00D">1</span>)        <span style="color:#777"># =&gt; 1: a is now [3]: both 1s removed</span>
a = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]
a.delete_if {|x| x%<span style="color:#00D">2</span>==<span style="color:#00D">1</span>} <span style="color:#777"># Remove odd values: a is now [2]</span>
a.reject! {|x| x%<span style="color:#00D">2</span>==<span style="color:#00D">0</span>}   <span style="color:#777"># Like delete_if: a is now []</span>
 
<span style="color:#777"># Removing elements and subarrays with slice!</span>
a = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>,<span style="color:#00D">4</span>,<span style="color:#00D">5</span>,<span style="color:#00D">6</span>,<span style="color:#00D">7</span>,<span style="color:#00D">8</span>]
a.slice!(<span style="color:#00D">0</span>)        <span style="color:#777"># =&gt; 1: remove element 0: a is [2,3,4,5,6,7,8]</span>
a.slice!(<span style="color:#00D">-1</span>,<span style="color:#00D">1</span>)     <span style="color:#777"># =&gt; [8]: remove subarray at end: a is [2,3,4,5,6,7]</span>
a.slice!(<span style="color:#00D">2</span>..<span style="color:#00D">3</span>)     <span style="color:#777"># =&gt; [4,5]: works with ranges: a is [2,3,6,7]</span>
a.slice!(<span style="color:#00D">4</span>,<span style="color:#00D">2</span>)      <span style="color:#777"># =&gt; []: empty array just past end: a unchanged</span>
a.slice!(<span style="color:#00D">5</span>,<span style="color:#00D">2</span>)      <span style="color:#777"># =&gt; nil: a now holds [2,3,6,7,nil]!</span>

<span style="color:#777"># Replacing subarrays with []=</span>
<span style="color:#777"># To delete, assign an empty array</span>
<span style="color:#777"># To insert, assign to a zero-width slice</span>
a = (<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">a</span><span style="color:#710">'</span></span>..<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">e</span><span style="color:#710">'</span></span>).to_a    <span style="color:#777"># =&gt; ['a','b','c','d','e']</span>
a[<span style="color:#00D">0</span>,<span style="color:#00D">2</span>] = [<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">A</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">B</span><span style="color:#710">'</span></span>]     <span style="color:#777"># a now holds ['A', 'B', 'c', 'd', 'e']</span>
a[<span style="color:#00D">2</span>...<span style="color:#00D">5</span>]=[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">C</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">D</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">E</span><span style="color:#710">'</span></span>] <span style="color:#777"># a now holds ['A', 'B', 'C', 'D', 'E']</span>
a[<span style="color:#00D">0</span>,<span style="color:#00D">0</span>] = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]       <span style="color:#777"># Insert elements at the beginning of a</span>
a[<span style="color:#00D">0</span>..<span style="color:#00D">2</span>] = []           <span style="color:#777"># Delete those elements</span>
a[<span style="color:#00D">-1</span>,<span style="color:#00D">1</span>] = [<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Z</span><span style="color:#710">'</span></span>]        <span style="color:#777"># Replace last element with another</span>
a[<span style="color:#00D">-1</span>,<span style="color:#00D">1</span>] = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Z</span><span style="color:#710">'</span></span>          <span style="color:#777"># For single elements, the array is optional</span>
a[<span style="color:#00D">1</span>,<span style="color:#00D">4</span>] = <span style="color:#069">nil</span>           <span style="color:#777"># Ruby 1.9: a now holds ['A',nil]</span>
                       <span style="color:#777"># Ruby 1.8: a now holds ['A']: nil works like []</span>

<span style="color:#777"># Other methods</span>
a = [<span style="color:#00D">4</span>,<span style="color:#00D">5</span>]
a.replace([<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>])     <span style="color:#777"># a now holds [1,2,3]: a copy of its argument</span>
a.fill(<span style="color:#00D">0</span>)              <span style="color:#777"># a now holds [0,0,0]</span>
a.fill(<span style="color:#069">nil</span>,<span style="color:#00D">1</span>,<span style="color:#00D">3</span>)        <span style="color:#777"># a now holds [0,nil,nil,nil]</span>
a.fill(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">a</span><span style="color:#710">'</span></span>,<span style="color:#00D">2</span>..<span style="color:#00D">4</span>)       <span style="color:#777"># a now holds [0,nil,'a','a','a']</span>
a[<span style="color:#00D">3</span>].upcase!           <span style="color:#777"># a now holds [0,nil,'A','A','A']</span>
a.fill(<span style="color:#00D">2</span>..<span style="color:#00D">4</span>) { <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">b</span><span style="color:#710">'</span></span> }   <span style="color:#777"># a now holds [0,nil,'b','b','b']</span>
a[<span style="color:#00D">3</span>].upcase!           <span style="color:#777"># a now holds [0,nil,'b','B','b']</span>
a.compact              <span style="color:#777"># =&gt; [0,'b','B','b']: copy with nils removed</span>
a.compact!             <span style="color:#777"># Remove nils in place: a now holds [0,'b','B','b']</span>
a.clear                <span style="color:#777"># a now holds []</span>
</pre></div>
</div>
</div>

<h4 id="iterating-searching-and-sorting-arrays">9.5.2.4 Iterating, searching, and sorting arrays</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>a = [<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">a</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">b</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">c</span><span style="color:#710">'</span></span>]
a.each {| elt| print elt }         <span style="color:#777"># The basic each iterator prints &quot;abc&quot;</span>
a.reverse_each {|e| print e}       <span style="color:#777"># Array-specific: prints &quot;cba&quot; </span>
a.cycle {|e| print e }             <span style="color:#777"># Ruby 1.9: prints &quot;abcabcabc...&quot; forever</span>
a.each_index {|i| print i}         <span style="color:#777"># Array-specific: prints &quot;012&quot;</span>
a.each_with_index{|e,i| print e,i} <span style="color:#777"># Enumerable: prints &quot;a0b1c2&quot;</span>
a.map {|x| x.upcase}               <span style="color:#777"># Enumerable: returns ['A','B','C']</span>
a.map! {|x| x.upcase}              <span style="color:#777"># Array-specific: alters a in place</span>
a.collect! {|x| x.downcase!}       <span style="color:#777"># collect! is synonym for map!</span>

<span style="color:#777"># Searching methods</span>
a = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">%w[</span><span style="color:#D20">h e l l o</span><span style="color:#710">]</span></span>
a.include?(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">e</span><span style="color:#710">'</span></span>)                    <span style="color:#777"># =&gt; true</span>
a.include?(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">w</span><span style="color:#710">'</span></span>)                    <span style="color:#777"># =&gt; false</span>
a.index(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">l</span><span style="color:#710">'</span></span>)                       <span style="color:#777"># =&gt; 2: index of first match</span>
a.index(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">L</span><span style="color:#710">'</span></span>)                       <span style="color:#777"># =&gt; nil: no match found</span>
a.rindex(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">l</span><span style="color:#710">'</span></span>)                      <span style="color:#777"># =&gt; 3: search backwards</span>
a.index {|c| c =~ <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">[aeiou]</span><span style="color:#404">/</span></span>}       <span style="color:#777"># =&gt; 1: index of first vowel. Ruby 1.9.</span>
a.rindex {|c| c =~ <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">[aeiou]</span><span style="color:#404">/</span></span>}      <span style="color:#777"># =&gt; 4: index of last vowel. Ruby 1.9.</span>

<span style="color:#777"># Sorting</span>
a.sort     <span style="color:#777"># =&gt; %w[e h l l o]: copy a and sort the copy</span>
a.sort!    <span style="color:#777"># Sort in place: a now holds ['e','h','l','l','o']</span>
a = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>,<span style="color:#00D">4</span>,<span style="color:#00D">5</span>]               <span style="color:#777"># A new array to sort into evens and odds</span>
a.sort! {|a,b| a%<span style="color:#00D">2</span> &lt;=&gt; b%<span style="color:#00D">2</span>}   <span style="color:#777"># Compare elements modulo 2</span>

<span style="color:#777"># Shuffling arrays: the opposite of sorting; Ruby 1.9 only</span>
a = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]     <span style="color:#777"># Start ordered</span>
puts a.shuffle  <span style="color:#777"># Shuffle randomly. E.g.: [3,1,2]. Also shuffle!</span>
</pre></div>
</div>
</div>

<h4 id="array-comparison">9.5.2.5 Array comparison</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>] &lt;=&gt; [<span style="color:#00D">4</span>,<span style="color:#00D">5</span>]      <span style="color:#777"># =&gt; -1 because 1 &lt; 4</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>] &lt;=&gt; [<span style="color:#00D">0</span>,<span style="color:#00D">0</span>,<span style="color:#00D">0</span>]    <span style="color:#777"># =&gt; +1 because 1 &gt; 0</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>] &lt;=&gt; [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]    <span style="color:#777"># =&gt; -1 because first array is shorter</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>] &lt;=&gt; [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>]      <span style="color:#777"># =&gt; 0: they are equal</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>] &lt;=&gt; []         <span style="color:#777"># =&gt; +1 [] always less than a nonempty array</span>
</pre></div>
</div>
</div>

<h4 id="arrays-as-stacks-and-queues">9.5.2.6 Arrays as stacks and queues</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>a = []
a.push(<span style="color:#00D">1</span>)     <span style="color:#777"># =&gt; [1]: a is now [1]</span>
a.push(<span style="color:#00D">2</span>,<span style="color:#00D">3</span>)   <span style="color:#777"># =&gt; [1,2,3]: a is now [1,2,3]</span>
a.pop         <span style="color:#777"># =&gt; 3: a is now [1,2]</span>
a.pop         <span style="color:#777"># =&gt; 2: a is now [1]</span>
a.pop         <span style="color:#777"># =&gt; 1: a is now []</span>
a.pop         <span style="color:#777"># =&gt; nil: a is still []</span>
<span style="color:#777">###########################</span>
a = []
a.push(<span style="color:#00D">1</span>)     <span style="color:#777"># =&gt; [1]: a is [1]</span>
a.push(<span style="color:#00D">2</span>)     <span style="color:#777"># =&gt; [1,2]: a is [1,2]</span>
a.shift       <span style="color:#777"># =&gt; 1: a is [2]</span>
a.push(<span style="color:#00D">3</span>)     <span style="color:#777"># =&gt; [2,3]: a is [2,3]</span>
a.shift       <span style="color:#777"># =&gt; 2: a is [3]</span>
a.shift       <span style="color:#777"># =&gt; 3: a is []</span>
a.shift       <span style="color:#777"># =&gt; nil: a is []</span>
</pre></div>
</div>
</div>

<h4 id="arrays-as-sets">9.5.2.7 Arrays as sets</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>[<span style="color:#00D">1</span>,<span style="color:#00D">3</span>,<span style="color:#00D">5</span>] &amp; [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]           <span style="color:#777"># =&gt; [1,3]: set intersection</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">1</span>,<span style="color:#00D">3</span>,<span style="color:#00D">5</span>] &amp; [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]         <span style="color:#777"># =&gt; [1,3]: duplicates removed</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">3</span>,<span style="color:#00D">5</span>] | [<span style="color:#00D">2</span>,<span style="color:#00D">4</span>,<span style="color:#00D">6</span>]           <span style="color:#777"># =&gt; [1,3,5,2,4,6]: set union</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">3</span>,<span style="color:#00D">5</span>,<span style="color:#00D">5</span>] | [<span style="color:#00D">2</span>,<span style="color:#00D">4</span>,<span style="color:#00D">6</span>,<span style="color:#00D">6</span>]       <span style="color:#777"># =&gt; [1,3,5,2,4,6]: duplicates removed</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>] - [<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]             <span style="color:#777"># =&gt; [1]: set difference</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>,<span style="color:#00D">3</span>] - [<span style="color:#00D">2</span>, <span style="color:#00D">3</span>]      <span style="color:#777"># =&gt; [1,1]: not all duplicates removed</span>

small = <span style="color:#00D">0</span>..<span style="color:#00D">10</span>.to_a          <span style="color:#777"># A set of small numbers</span>
even = <span style="color:#00D">0</span>..<span style="color:#00D">50</span>.map {|x| x*<span style="color:#00D">2</span>}  <span style="color:#777"># A set of even numbers</span>
smalleven = small &amp; even    <span style="color:#777"># Set intersection</span>
smalleven.include?(<span style="color:#00D">8</span>)       <span style="color:#777"># =&gt; true: test for set membership</span>

[<span style="color:#00D">1</span>, <span style="color:#00D">1</span>, <span style="color:#069">nil</span>, <span style="color:#069">nil</span>].uniq       <span style="color:#777"># =&gt; [1, nil]: remove dups. Also uniq!</span>
<span style="color:#777">###########################</span>
a = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]

<span style="color:#777"># Iterate all possible 2-element subarrays (order matters)</span>
a.permutation(<span style="color:#00D">2</span>) {|x| print x }  <span style="color:#777"># Prints &quot;[1,2][1,3][2,1][2,3][3,1][3,2]&quot;</span>

<span style="color:#777"># Iterate all possible 2-element subsets (order does not matter)</span>
a.combination(<span style="color:#00D">2</span>) {|x| print x }  <span style="color:#777"># Prints &quot;[1, 2][1, 3][2, 3]&quot;</span>

<span style="color:#777"># Return the Cartesian product of the two sets</span>
a.product([<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">a</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">b</span><span style="color:#710">'</span></span>])       <span style="color:#777"># =&gt; [[1,&quot;a&quot;],[1,&quot;b&quot;],[2,&quot;a&quot;],[2,&quot;b&quot;],[3,&quot;a&quot;],[3,&quot;b&quot;]]</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>].product([<span style="color:#00D">3</span>,<span style="color:#00D">4</span>],[<span style="color:#00D">5</span>,<span style="color:#00D">6</span>]) <span style="color:#777"># =&gt; [[1,3,5],[1,3,6],[1,4,5],[1,4,6], etc... ] </span>
</pre></div>
</div>
</div>

<h4 id="associative-array-methods">9.5.2.8 Associative array methods</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>[[key1, value1], [key2, value2], [key3, value3], ...]
<span style="color:#777">###########################</span>
h = { <span style="color:#A60">:a</span> =&gt; <span style="color:#00D">1</span>, <span style="color:#A60">:b</span> =&gt; <span style="color:#00D">2</span>}   <span style="color:#777"># Start with a hash</span>
a = h.to_a                <span style="color:#777"># =&gt; [[:b,2], [:a,1]]: associative array</span>
a.assoc(<span style="color:#A60">:a</span>)               <span style="color:#777"># =&gt; [:a,1]: subarray for key :a</span>
a.assoc(<span style="color:#A60">:b</span>).last          <span style="color:#777"># =&gt; 2: value for key :b</span>
a.rassoc(<span style="color:#00D">1</span>)               <span style="color:#777"># =&gt; [:a,1]: subarray for value 1</span>
a.rassoc(<span style="color:#00D">2</span>).first         <span style="color:#777"># =&gt; :b: key for value 2</span>
a.assoc(<span style="color:#A60">:c</span>)               <span style="color:#777"># =&gt; nil</span>
a.transpose               <span style="color:#777"># =&gt; [[:a, :b], [1, 2]]: swap rows and cols</span>
</pre></div>
</div>
</div>

<h4 id="miscellaneous-array-methods">9.5.2.9 Miscellaneous array methods</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Conversion to strings</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>].join              <span style="color:#777"># =&gt; &quot;123&quot;: convert elements to string and join</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>].join(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">, </span><span style="color:#710">&quot;</span></span>)        <span style="color:#777"># =&gt; &quot;1, 2, 3&quot;: optional delimiter</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>].to_s              <span style="color:#777"># =&gt; &quot;[1, 2, 3]&quot; in Ruby 1.9</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>].to_s              <span style="color:#777"># =&gt; &quot;123&quot; in Ruby 1.8</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>].inspect           <span style="color:#777"># =&gt; &quot;[1, 2, 3]&quot;: better for debugging in 1.8</span>

<span style="color:#777"># Binary conversion with pack. See also String.unpack.</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>,<span style="color:#00D">4</span>].pack(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">CCCC</span><span style="color:#710">&quot;</span></span>)    <span style="color:#777"># =&gt; &quot;\001\002\003\004&quot;</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>].pack(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">s2</span><span style="color:#710">'</span></span>)          <span style="color:#777"># =&gt; &quot;\001\000\002\000&quot;</span>
[<span style="color:#00D">1234</span>].pack(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">i</span><span style="color:#710">&quot;</span></span>)          <span style="color:#777"># =&gt; &quot;\322\004\000\000&quot;</span>

<span style="color:#777"># Other methods</span>
[<span style="color:#00D">0</span>,<span style="color:#00D">1</span>]*<span style="color:#00D">3</span>                   <span style="color:#777"># =&gt; [0,1,0,1,0,1]: * operator repeats</span>
[<span style="color:#00D">1</span>, [<span style="color:#00D">2</span>, [<span style="color:#00D">3</span>]]].flatten     <span style="color:#777"># =&gt; [1,2,3]: recursively flatten; also flatten!</span>
[<span style="color:#00D">1</span>, [<span style="color:#00D">2</span>, [<span style="color:#00D">3</span>]]].flatten(<span style="color:#00D">1</span>)  <span style="color:#777"># =&gt; [1,2,[3]]: specify # of levels; Ruby 1.9</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>].reverse           <span style="color:#777"># =&gt; [3,2,1]: also reverse!</span>
a=[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>].zip([<span style="color:#A60">:a</span>,<span style="color:#A60">:b</span>,<span style="color:#A60">:c</span>]) <span style="color:#777"># =&gt; [[1,:a],[2,:b],[3,:c]]: Enumerable method</span>
a.transpose               <span style="color:#777"># =&gt; [[1,2,3],[:a,:b,:c]]: swap rows/cols</span>
</pre></div>
</div>
</div>

<h4 id="creating-hashes">9.5.3.1 Creating hashes</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>{ <span style="color:#A60">:one</span> =&gt; <span style="color:#00D">1</span>, <span style="color:#A60">:two</span> =&gt; <span style="color:#00D">2</span> }  <span style="color:#777"># Basic hash literal syntax</span>
{ <span style="color:#A60">:one</span>, <span style="color:#00D">1</span>, <span style="color:#A60">:two</span>, <span style="color:#00D">2</span> }      <span style="color:#777"># Same, with deprecated Ruby 1.8 syntax</span>
{ <span style="color:#606">one</span>: <span style="color:#00D">1</span>, <span style="color:#606">two</span>: <span style="color:#00D">2</span> }        <span style="color:#777"># Same, Ruby 1.9 syntax. Keys are symbols.</span>
{}                        <span style="color:#777"># A new, empty, Hash object</span>
<span style="color:#036;font-weight:bold">Hash</span>.new                  <span style="color:#777"># =&gt; {}: creates empty hash</span>
<span style="color:#036;font-weight:bold">Hash</span>[<span style="color:#A60">:one</span>, <span style="color:#00D">1</span>, <span style="color:#A60">:two</span>, <span style="color:#00D">2</span>]    <span style="color:#777"># =&gt; {one:1, two:2}</span>
<span style="color:#777">###########################</span>
puts <span style="color:#A60">:a</span>=&gt;<span style="color:#00D">1</span>, <span style="color:#A60">:b</span>=&gt;<span style="color:#00D">2</span>   <span style="color:#777"># Curly braces omitted in invocation</span>
puts <span style="color:#606">a</span>:<span style="color:#00D">1</span>, <span style="color:#606">b</span>:<span style="color:#00D">2</span>       <span style="color:#777"># Ruby 1.9 syntax works too</span>
</pre></div>
</div>
</div>

<h4 id="indexing-hashes-and-testing-membership">9.5.3.2 Indexing hashes and testing membership</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>h = { <span style="color:#A60">:one</span> =&gt; <span style="color:#00D">1</span>, <span style="color:#A60">:two</span> =&gt; <span style="color:#00D">2</span> }
h[<span style="color:#A60">:one</span>]       <span style="color:#777"># =&gt; 1: find value associated with a key</span>
h[<span style="color:#A60">:three</span>]     <span style="color:#777"># =&gt; nil: the key does not exist in the hash</span>
h.assoc <span style="color:#A60">:one</span>  <span style="color:#777"># =&gt; [:one, 1]: find key/value pair. Ruby 1.9.</span>

h.index <span style="color:#00D">1</span>     <span style="color:#777"># =&gt; :one: search for key associated with a value</span>
h.index <span style="color:#00D">4</span>     <span style="color:#777"># =&gt; nil: no mapping to this value exists</span>
h.rassoc <span style="color:#00D">2</span>    <span style="color:#777"># =&gt; [:two, 2]: key/value pair matching value. Ruby 1.9.</span>
<span style="color:#777">###########################</span>
h = { <span style="color:#A60">:a</span> =&gt; <span style="color:#00D">1</span>, <span style="color:#A60">:b</span> =&gt; <span style="color:#00D">2</span> }
<span style="color:#777"># Checking for the presence of keys in a hash: fast</span>
h.key?(<span style="color:#A60">:a</span>)       <span style="color:#777"># true: :a is a key in h</span>
h.has_key?(<span style="color:#A60">:b</span>)   <span style="color:#777"># true: has_key? is a synonym for key?</span>
h.include?(<span style="color:#A60">:c</span>)   <span style="color:#777"># false: include? is another synonym</span>
h.member?(<span style="color:#A60">:d</span>)    <span style="color:#777"># false: member? is yet another synonym</span>

<span style="color:#777"># Checking for the presence of values: slow</span>
h.value?(<span style="color:#00D">1</span>)      <span style="color:#777"># true: 1 is a value in h</span>
h.has_value?(<span style="color:#00D">3</span>)  <span style="color:#777"># false: has_value? is a synonym for value?</span>
<span style="color:#777">###########################</span>
h = { <span style="color:#A60">:a</span> =&gt; <span style="color:#00D">1</span>, <span style="color:#A60">:b</span> =&gt; <span style="color:#00D">2</span> }
h.fetch(<span style="color:#A60">:a</span>)      <span style="color:#777"># =&gt; 1: works like [] for existing keys</span>
h.fetch(<span style="color:#A60">:c</span>)      <span style="color:#777"># Raises IndexError for nonexistent key</span>
h.fetch(<span style="color:#A60">:c</span>, <span style="color:#00D">33</span>)  <span style="color:#777"># =&gt; 33: uses specified value if key is not found</span>
h.fetch(<span style="color:#A60">:c</span>) {|k| k.to_s } <span style="color:#777"># =&gt; &quot;c&quot;: calls block if key not found</span>
<span style="color:#777">###########################</span>
h = { <span style="color:#A60">:a</span> =&gt; <span style="color:#00D">1</span>, <span style="color:#A60">:b</span> =&gt; <span style="color:#00D">2</span>, <span style="color:#A60">:c</span> =&gt; <span style="color:#00D">3</span> }
h.values_at(<span style="color:#A60">:c</span>)         <span style="color:#777"># =&gt; [3]: values returned in an array</span>
h.values_at(<span style="color:#A60">:a</span>, <span style="color:#A60">:b</span>)     <span style="color:#777"># =&gt; [1, 2]: pass any # of args</span>
h.values_at(<span style="color:#A60">:d</span>, <span style="color:#A60">:d</span>, <span style="color:#A60">:a</span>) <span style="color:#777"># =&gt; [nil, nil, 1]</span>
<span style="color:#777">###########################</span>
h = { <span style="color:#A60">:a</span> =&gt; <span style="color:#00D">1</span>, <span style="color:#A60">:b</span> =&gt; <span style="color:#00D">2</span>, <span style="color:#A60">:c</span> =&gt; <span style="color:#00D">3</span> }
h.select {|k,v| v % <span style="color:#00D">2</span> == <span style="color:#00D">0</span> } <span style="color:#777"># =&gt; [:b,2] Ruby 1.8</span>
h.select {|k,v| v % <span style="color:#00D">2</span> == <span style="color:#00D">0</span> } <span style="color:#777"># =&gt; {:b=&gt;2} Ruby 1.9</span>
</pre></div>
</div>
</div>

<h4 id="storing-keys-and-values-in-a-hash">9.5.3.3 Storing keys and values in a hash</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>h = {}        <span style="color:#777"># Start with an empty hash</span>
h[<span style="color:#A60">:a</span>] = <span style="color:#00D">1</span>     <span style="color:#777"># Map :a=&gt;1.  h is now {:a=&gt;1}</span>
h.store(<span style="color:#A60">:b</span>,<span style="color:#00D">2</span>) <span style="color:#777"># More verbose: h is now {:a=&gt;1, :b=&gt;2}</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Replace all of the pairs in h with those from another hash</span>
h.replace({<span style="color:#00D">1</span>=&gt;<span style="color:#A60">:a</span>, <span style="color:#00D">2</span>=&gt;;b}  <span style="color:#777"># h is now equal to the argument hash</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Merge hashes h and j into new hash k.  </span>
<span style="color:#777"># If h and j share keys, use values from j</span>
k = h.merge(j)
{<span style="color:#A60">:a</span>=&gt;<span style="color:#00D">1</span>,<span style="color:#A60">:b</span>=&gt;<span style="color:#00D">2</span>}.merge(<span style="color:#A60">:a</span>=&gt;<span style="color:#00D">3</span>,<span style="color:#A60">:c</span>=&gt;<span style="color:#00D">3</span>)  <span style="color:#777"># =&gt; {:a=&gt;3,:b=&gt;2,:c=&gt;3}</span>
h.merge!(j)   <span style="color:#777"># Modifies h in place.</span>

<span style="color:#777"># If there is a block, use it to decide which value to use</span>
h.merge!(j) {|key,h,j| h }      <span style="color:#777"># Use value from h</span>
h.merge(j) {|key,h,j| (h+j)/<span style="color:#00D">2</span> } <span style="color:#777"># Use average of two values</span>

<span style="color:#777"># update is a synonym for merge!</span>
h = {<span style="color:#606">a</span>:<span style="color:#00D">1</span>,<span style="color:#606">b</span>:<span style="color:#00D">2</span>}     <span style="color:#777"># Using Ruby 1.9 syntax and omitting braces</span>
h.update(<span style="color:#606">b</span>:<span style="color:#00D">4</span>,<span style="color:#606">c</span>:<span style="color:#00D">9</span>) {|key,old,new| old }  <span style="color:#777"># h is now {a:1, b:2, c:9}</span>
h.update(<span style="color:#606">b</span>:<span style="color:#00D">4</span>,<span style="color:#606">c</span>:<span style="color:#00D">9</span>) <span style="color:#777"># h is now {a:1, b:4, c:9}</span>
</pre></div>
</div>
</div>

<h4 id="removing-hash-entries">9.5.3.4 Removing hash entries</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>h = {<span style="color:#A60">:a</span>=&gt;<span style="color:#00D">1</span>, <span style="color:#A60">:b</span>=&gt;<span style="color:#00D">2</span>}
h[<span style="color:#A60">:a</span>] = <span style="color:#069">nil</span>      <span style="color:#777"># h now holds {:a=&gt; nil, :b=&gt;2 }</span>
h.include? <span style="color:#A60">:a</span>    <span style="color:#777"># =&gt; true</span>
h.delete <span style="color:#A60">:b</span>      <span style="color:#777"># =&gt; 2: returns deleted value: h now holds {:a=&gt;nil}</span>
h.include? <span style="color:#A60">:b</span>    <span style="color:#777"># =&gt; false</span>
h.delete <span style="color:#A60">:b</span>      <span style="color:#777"># =&gt; nil: key not found</span>
<span style="color:#777"># Invoke block if key not found</span>
h.delete(<span style="color:#A60">:b</span>) {|k| raise <span style="color:#036;font-weight:bold">IndexError</span>, k.to_s } <span style="color:#777"># IndexError!</span>
<span style="color:#777">###########################</span>
h = {<span style="color:#A60">:a</span>=&gt;<span style="color:#00D">1</span>, <span style="color:#A60">:b</span>=&gt;<span style="color:#00D">2</span>, <span style="color:#A60">:c</span>=&gt;<span style="color:#00D">3</span>, <span style="color:#A60">:d</span>=&gt;<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">four</span><span style="color:#710">&quot;</span></span>}
h.reject! {|k,v| v.is_a? <span style="color:#036;font-weight:bold">String</span> }  <span style="color:#777"># =&gt; {:a=&gt;1, :b=&gt;2, :c=&gt;3 }</span>
h.delete_if {|k,v| k.to_s &lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">b</span><span style="color:#710">'</span></span> }  <span style="color:#777"># =&gt; {:b=&gt;2, :c=&gt;3 }</span>
h.reject! {|k,v| k.to_s &lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">b</span><span style="color:#710">'</span></span> }    <span style="color:#777"># =&gt; nil: no change</span>
h.delete_if {|k,v| k.to_s &lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">b</span><span style="color:#710">'</span></span> }  <span style="color:#777"># =&gt; {:b=&gt;2, :c=&gt;3 }: unchanged hash</span>
h.reject {|k,v| <span style="color:#069">true</span> }             <span style="color:#777"># =&gt; {}: h is unchanged</span>
<span style="color:#777">###########################</span>
h.clear    <span style="color:#777"># h is now {}</span>
</pre></div>
</div>
</div>

<h4 id="arrays-from-hashes">9.5.3.5 Arrays from hashes</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>h = { <span style="color:#A60">:a</span>=&gt;<span style="color:#00D">1</span>, <span style="color:#A60">:b</span>=&gt;<span style="color:#00D">2</span>, <span style="color:#A60">:c</span>=&gt;<span style="color:#00D">3</span> }
<span style="color:#777"># Size of hash: number of key/value pairs</span>
h.length     <span style="color:#777"># =&gt; 3</span>
h.size       <span style="color:#777"># =&gt; 3: size is a synonym for length</span>
h.empty?     <span style="color:#777"># =&gt; false</span>
{}.empty?    <span style="color:#777"># =&gt; true</span>

h.keys       <span style="color:#777"># =&gt; [:b, :c, :a]: array of keys</span>
h.values     <span style="color:#777"># =&gt; [2,3,1]: array of values</span>
h.to_a       <span style="color:#777"># =&gt; [[:b,2],[:c,3],[:a,1]]: array of pairs</span>
h.flatten    <span style="color:#777"># =&gt; [:b, 2, :c, 3, :a, 1]: flattened array. Ruby 1.9</span>
h.sort       <span style="color:#777"># =&gt; [[:a,1],[:b,2],[:c,3]]: sorted array of pairs</span>
h.sort {|a,b| a[<span style="color:#00D">1</span>]&lt;=&gt;b[<span style="color:#00D">1</span>] } <span style="color:#777"># Sort pairs by value instead of key</span>
</pre></div>
</div>
</div>

<h4 id="hash-iterators">9.5.3.6 Hash iterators</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>h = { <span style="color:#A60">:a</span>=&gt;<span style="color:#00D">1</span>, <span style="color:#A60">:b</span>=&gt;<span style="color:#00D">2</span>, <span style="color:#A60">:c</span>=&gt;<span style="color:#00D">3</span> }

<span style="color:#777"># The each() iterator iterates [key,value] pairs</span>
h.each {|pair| print pair }    <span style="color:#777"># Prints &quot;[:a, 1][:b, 2][:c, 3]&quot;</span>

<span style="color:#777"># It also works with two block arguments</span>
h.each <span style="color:#080;font-weight:bold">do</span> |key, value|                
  print <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>key<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20">:</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>value<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20"> </span><span style="color:#710">&quot;</span></span>     <span style="color:#777"># Prints &quot;a:1 b:2 c:3&quot; </span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#777"># Iterate over keys or values or both</span>
h.each_key {|k| print k }      <span style="color:#777"># Prints &quot;abc&quot;</span>
h.each_value {|v| print v }    <span style="color:#777"># Prints &quot;123&quot;</span>
h.each_pair {|k,v| print k,v } <span style="color:#777"># Prints &quot;a1b2c3&quot;. Like each</span>
<span style="color:#777">###########################</span>
h = { <span style="color:#A60">:a</span>=&gt; <span style="color:#00D">1</span>, <span style="color:#A60">:b</span>=&gt;<span style="color:#00D">2</span> }
print h.shift[<span style="color:#00D">1</span>] <span style="color:#080;font-weight:bold">while</span> <span style="color:#080;font-weight:bold">not</span> h.empty?   <span style="color:#777"># Prints &quot;12&quot;</span>
</pre></div>
</div>
</div>

<h4 id="default-values">9.5.3.7 Default values</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>empty = {}
empty[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">one</span><span style="color:#710">&quot;</span></span>]   <span style="color:#777"># nil</span>
<span style="color:#777">###########################</span>
empty = <span style="color:#036;font-weight:bold">Hash</span>.new(<span style="color:#00D">-1</span>)   <span style="color:#777"># Specify a default value when creating hash</span>
empty[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">one</span><span style="color:#710">&quot;</span></span>]           <span style="color:#777"># =&gt; -1</span>
empty.default = <span style="color:#00D">-2</span>     <span style="color:#777"># Change the default value to something else</span>
empty[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">two</span><span style="color:#710">&quot;</span></span>]           <span style="color:#777"># =&gt; -2</span>
empty.default          <span style="color:#777"># =&gt; -2: return the default value</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># If the key is not defined, return the successor of the key.</span>
plus1 = <span style="color:#036;font-weight:bold">Hash</span>.new {|hash, key| key.succ }
plus1[<span style="color:#00D">1</span>]      <span style="color:#777"># 2</span>
plus1[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">one</span><span style="color:#710">&quot;</span></span>]  <span style="color:#777"># &quot;onf&quot;: see String.succ</span>
plus1.default_proc  <span style="color:#777"># Returns the Proc that computes defaults</span>
plus1.default(<span style="color:#00D">10</span>)   <span style="color:#777"># =&gt; 11: default returned for key 10</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># This lazily initialized hash maps integers to their factorials</span>
fact = <span style="color:#036;font-weight:bold">Hash</span>.new {|h,k| h[k] = <span style="color:#080;font-weight:bold">if</span> k &gt; <span style="color:#00D">1</span>: k*h[k-<span style="color:#00D">1</span>] <span style="color:#080;font-weight:bold">else</span> <span style="color:#00D">1</span> <span style="color:#080;font-weight:bold">end</span> }
fact      <span style="color:#777"># {}: it starts off empty</span>
fact[<span style="color:#00D">4</span>]   <span style="color:#777"># 24: 4! is 24</span>
fact      <span style="color:#777"># {1=&gt;1, 2=&gt;2, 3=&gt;6, 4=&gt;24}: the hash now has entries</span>
<span style="color:#777">###########################</span>
fact.fetch(<span style="color:#00D">5</span>)   <span style="color:#777"># IndexError: key not found</span>
</pre></div>
</div>
</div>

<h4 id="hashcodes-key-equality-and-mutable-keys">9.5.3.8 Hashcodes, key equality, and mutable keys</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>key = {<span style="color:#A60">:a</span>=&gt;<span style="color:#00D">1</span>}      <span style="color:#777"># This hash will be a key in another hash!</span>
h = { key =&gt; <span style="color:#00D">2</span> }   <span style="color:#777"># This hash has a mutable key</span>
h[key]             <span style="color:#777"># =&gt; 2: get value associated with key</span>
key.clear          <span style="color:#777"># Mutate the key</span>
h[key]             <span style="color:#777"># =&gt; nil: no value found for mutated key</span>
h.rehash           <span style="color:#777"># Fix up the hash after mutation</span>
h[key]             <span style="color:#777"># =&gt; 2: now the value is found again</span>
</pre></div>
</div>
</div>

<h4 id="miscellaneous-hash-methods">9.5.3.9 Miscellaneous hash methods</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>h = {<span style="color:#A60">:a</span>=&gt;<span style="color:#00D">1</span>, <span style="color:#A60">:b</span>=&gt;<span style="color:#00D">2</span>}
h.invert        <span style="color:#777"># =&gt; {1=&gt;:a, 2=&gt;:b}: swap keys and values</span>
<span style="color:#777">###########################</span>
{<span style="color:#A60">:a</span>=&gt;<span style="color:#00D">1</span>, <span style="color:#A60">:b</span>=&gt;<span style="color:#00D">2</span>}.to_s    <span style="color:#777"># =&gt; &quot;a1b2&quot; in Ruby 1.8; &quot;{:a=&gt;1, :b=&gt;2}&quot; in 1.9</span>
{<span style="color:#A60">:a</span>=&gt;<span style="color:#00D">1</span>, <span style="color:#A60">:b</span>=&gt;<span style="color:#00D">2</span>}.inspect <span style="color:#777"># =&gt; &quot;{:a=&gt;1, :b=&gt;2}&quot; for both versions</span>
</pre></div>
</div>
</div>

<h4 id="sets">9.5.4 Sets</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">set</span><span style="color:#710">'</span></span>
</pre></div>
</div>
</div>

<h4 id="creating-sets">9.5.4.1 Creating sets</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>(<span style="color:#00D">1</span>..<span style="color:#00D">5</span>).to_set              <span style="color:#777"># =&gt; #&lt;Set: {5, 1, 2, 3, 4}&gt;</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>].to_set             <span style="color:#777"># =&gt; #&lt;Set: {1, 2, 3}&gt;</span>
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">Set</span>.new(<span style="color:#00D">1</span>..<span style="color:#00D">5</span>)              <span style="color:#777"># =&gt; #&lt;Set: {5, 1, 2, 3, 4}&gt;</span>
<span style="color:#036;font-weight:bold">Set</span>.new([<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>])           <span style="color:#777"># =&gt; #&lt;Set: {1, 2, 3}&gt;</span>
<span style="color:#036;font-weight:bold">Set</span>.new([<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>]) {|x| x+<span style="color:#00D">1</span>} <span style="color:#777"># =&gt; #&lt;Set: {2, 3, 4}&gt;</span>
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">Set</span>[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">cow</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">pig</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hen</span><span style="color:#710">&quot;</span></span>]   <span style="color:#777"># =&gt; #&lt;Set: {&quot;cow&quot;, &quot;pig&quot;, &quot;hen&quot;}&gt;</span>
</pre></div>
</div>
</div>

<h4 id="testing-comparing-and-combining-sets">9.5.4.2 Testing, comparing, and combining Sets</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>s = <span style="color:#036;font-weight:bold">Set</span>.new(<span style="color:#00D">1</span>..<span style="color:#00D">3</span>)   <span style="color:#777"># =&gt; #&lt;Set: {1, 2, 3}&gt;  </span>
s.include? <span style="color:#00D">1</span>        <span style="color:#777"># =&gt; true</span>
s.member? <span style="color:#00D">0</span>         <span style="color:#777"># =&gt; false: member? is a synonym</span>
<span style="color:#777">###########################</span>
s = <span style="color:#036;font-weight:bold">Set</span>[<span style="color:#00D">2</span>, <span style="color:#00D">3</span>, <span style="color:#00D">5</span>]
t = <span style="color:#036;font-weight:bold">Set</span>[<span style="color:#00D">2</span>, <span style="color:#00D">3</span>, <span style="color:#00D">5</span>, <span style="color:#00D">7</span>]
s.subset? t            <span style="color:#777"># =&gt; true</span>
t.subset? s            <span style="color:#777"># =&gt; false</span>
s.proper_subset? t     <span style="color:#777"># =&gt; true</span>
t.superset? s          <span style="color:#777"># =&gt; true</span>
t.proper_superset? s   <span style="color:#777"># =&gt; true</span>
s.subset? s            <span style="color:#777"># =&gt; true</span>
s.proper_subset? s     <span style="color:#777"># =&gt; false</span>
<span style="color:#777">###########################</span>
s = <span style="color:#036;font-weight:bold">Set</span>[<span style="color:#00D">2</span>, <span style="color:#00D">3</span>, <span style="color:#00D">5</span>]
s.length               <span style="color:#777"># =&gt; 3</span>
s.size                 <span style="color:#777"># =&gt; 3: a synonym for length</span>
s.empty?               <span style="color:#777"># =&gt; false</span>
<span style="color:#036;font-weight:bold">Set</span>.new.empty?         <span style="color:#777"># =&gt; true</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Here are two simple sets</span>
primes = <span style="color:#036;font-weight:bold">Set</span>[<span style="color:#00D">2</span>, <span style="color:#00D">3</span>, <span style="color:#00D">5</span>, <span style="color:#00D">7</span>]
odds = <span style="color:#036;font-weight:bold">Set</span>[<span style="color:#00D">1</span>, <span style="color:#00D">3</span>, <span style="color:#00D">5</span>, <span style="color:#00D">7</span>, <span style="color:#00D">9</span>]

<span style="color:#777"># The intersection is the set of values that appear in both</span>
primes &amp; odds             <span style="color:#777"># =&gt; #&lt;Set: {5, 7, 3}&gt;</span>
primes.intersection(odds) <span style="color:#777"># this is an explicitly named alias</span>

<span style="color:#777"># The union is the set of values that appear in either</span>
primes | odds             <span style="color:#777"># =&gt; #&lt;Set: {5, 1, 7, 2, 3, 9}&gt;</span>
primes.union(odds)        <span style="color:#777"># an explicitly named alias</span>

<span style="color:#777"># a-b: is the elements of a except for those also in b</span>
primes-odds               <span style="color:#777"># =&gt; #&lt;Set: {2}&gt;</span>
odds-primes               <span style="color:#777"># =&gt; #&lt;Set: {1, 9}&gt;</span>
primes.difference(odds)   <span style="color:#777"># A named method alias</span>

<span style="color:#777"># a^b is the set of values that appear in one set but not both: (a|b)-(a&amp;b)</span>
primes ^ odds             <span style="color:#777"># =&gt; #&lt;Set: {1, 2, 9}&gt;</span>
</pre></div>
</div>
</div>

<h4 id="adding-and-deleting-set-elements">9.5.4.3 Adding and deleting set elements</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>s = <span style="color:#036;font-weight:bold">Set</span>[]              <span style="color:#777"># start with an empty set</span>
s &lt;&lt; <span style="color:#00D">1</span>                 <span style="color:#777"># =&gt; #&lt;Set: {1}&gt;</span>
s.add <span style="color:#00D">2</span>                <span style="color:#777"># =&gt; #&lt;Set: {1, 2}&gt;: add is a synonym for &lt;&lt;</span>
s &lt;&lt; <span style="color:#00D">3</span> &lt;&lt; <span style="color:#00D">4</span> &lt;&lt; <span style="color:#00D">5</span>       <span style="color:#777"># =&gt; #&lt;Set: {5, 1, 2, 3, 4}&gt;: can be chained</span>
s.add <span style="color:#00D">3</span>                <span style="color:#777"># =&gt; #&lt;Set: {5, 1, 2, 3, 4}&gt;: value unchanged</span>
s.add? <span style="color:#00D">6</span>               <span style="color:#777"># =&gt; #&lt;Set: {5, 6, 1, 2, 3, 4}&gt;</span>
s.add? <span style="color:#00D">3</span>               <span style="color:#777"># =&gt; nil: the set was not changed </span>
<span style="color:#777">###########################</span>
s = (<span style="color:#00D">1</span>..<span style="color:#00D">3</span>).to_set   <span style="color:#777"># =&gt; #&lt;Set: {1, 2, 3}&gt;</span>
s.merge(<span style="color:#00D">2</span>..<span style="color:#00D">5</span>)       <span style="color:#777"># =&gt; #&lt;Set: {5, 1, 2, 3, 4}&gt;</span>
<span style="color:#777">###########################</span>
s = (<span style="color:#00D">1</span>..<span style="color:#00D">3</span>).to_set   <span style="color:#777"># =&gt; #&lt;Set: {1, 2, 3}&gt;</span>
s.delete <span style="color:#00D">1</span>          <span style="color:#777"># =&gt; #&lt;Set: {2, 3}&gt;</span>
s.delete <span style="color:#00D">1</span>          <span style="color:#777"># =&gt; #&lt;Set: {2, 3}&gt;: unchanged</span>
s.delete? <span style="color:#00D">1</span>         <span style="color:#777"># =&gt; nil: returns nil when no change</span>
s.delete? <span style="color:#00D">2</span>         <span style="color:#777"># =&gt; #&lt;Set: {3}&gt;: otherwise returns set</span>
<span style="color:#777">###########################</span>
s = (<span style="color:#00D">1</span>..<span style="color:#00D">3</span>).to_set   <span style="color:#777"># =&gt; #&lt;Set: {1, 2, 3}&gt;</span>
s.subtract(<span style="color:#00D">2</span>..<span style="color:#00D">10</span>)   <span style="color:#777"># =&gt; #&lt;Set: {1}&gt;</span>
<span style="color:#777">###########################</span>
primes = <span style="color:#036;font-weight:bold">Set</span>[<span style="color:#00D">2</span>, <span style="color:#00D">3</span>, <span style="color:#00D">5</span>, <span style="color:#00D">7</span>]       <span style="color:#777"># set of prime numbers</span>
primes.delete_if {|x| x%<span style="color:#00D">2</span>==<span style="color:#00D">1</span>}  <span style="color:#777"># =&gt; #&lt;Set: {2}&gt;: remove odds</span>
primes.delete_if {|x| x%<span style="color:#00D">2</span>==<span style="color:#00D">1</span>}  <span style="color:#777"># =&gt; #&lt;Set: {2}&gt;: unchanged</span>
primes.reject! {|x| x%<span style="color:#00D">2</span>==<span style="color:#00D">1</span>}    <span style="color:#777"># =&gt; nil: unchanged</span>

<span style="color:#777"># Do an in-place intersection like this:</span>
s = (<span style="color:#00D">1</span>..<span style="color:#00D">5</span>).to_set
t = (<span style="color:#00D">4</span>..<span style="color:#00D">8</span>).to_set
s.reject! {|x| <span style="color:#080;font-weight:bold">not</span> t.include? x}  <span style="color:#777"># =&gt; #&lt;Set: {5, 4}&gt;</span>
<span style="color:#777">###########################</span>
s = <span style="color:#036;font-weight:bold">Set</span>.new(<span style="color:#00D">1</span>..<span style="color:#00D">3</span>) <span style="color:#777"># Initial set</span>
s.replace(<span style="color:#00D">3</span>..<span style="color:#00D">4</span>)   <span style="color:#777"># Replace all elements.  Argument is any enumerable</span>
s.clear           <span style="color:#777"># =&gt; #&lt;Set: {}&gt;</span>
s.empty?          <span style="color:#777"># =&gt; true</span>
</pre></div>
</div>
</div>

<h4 id="set-iterators">9.5.4.4 Set iterators</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>s = <span style="color:#036;font-weight:bold">Set</span>[<span style="color:#00D">1</span>, <span style="color:#00D">2</span>, <span style="color:#00D">3</span>, <span style="color:#00D">4</span>, <span style="color:#00D">5</span>] <span style="color:#777"># =&gt; #&lt;Set: {5, 1, 2, 3, 4}&gt;</span>
s.each {|x| print x }  <span style="color:#777"># prints &quot;51234&quot;: arbitrary order before Ruby 1.9</span>
s.map! {|x| x*x }      <span style="color:#777"># =&gt; #&lt;Set: {16, 1, 25, 9, 4}&gt;</span>
s.collect! {|x| x/<span style="color:#00D">2</span> }  <span style="color:#777"># =&gt; #&lt;Set: {0, 12, 2, 8, 4}&gt;</span>
</pre></div>
</div>
</div>

<h4 id="miscellaneous-set-methods">9.5.4.5 Miscellaneous set methods</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>s = (<span style="color:#00D">1</span>..<span style="color:#00D">3</span>).to_set
s.to_a          <span style="color:#777"># =&gt; [1, 2, 3]</span>
s.to_s          <span style="color:#777"># =&gt; &quot;#&lt;Set:0xb7e8f938&gt;&quot;: not useful</span>
s.inspect       <span style="color:#777"># =&gt; &quot;#&lt;Set: {1, 2, 3}&gt;&quot;: useful       </span>
s == <span style="color:#036;font-weight:bold">Set</span>[<span style="color:#00D">3</span>,<span style="color:#00D">2</span>,<span style="color:#00D">1</span>] <span style="color:#777"># =&gt; true: uses eql? to compare set elements</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Classify set elements as even or odd</span>
s = (<span style="color:#00D">0</span>..<span style="color:#00D">3</span>).to_set     <span style="color:#777"># =&gt; #&lt;Set: {0, 1, 2, 3}&gt;</span>
s.classify {|x| x%<span style="color:#00D">2</span>}  <span style="color:#777"># =&gt; {0=&gt;#&lt;Set: {0, 2}&gt;, 1=&gt;#&lt;Set: {1, 3}&gt;}</span>
<span style="color:#777">###########################</span>
s.divide {|x| x%<span style="color:#00D">2</span>}  <span style="color:#777"># =&gt; #&lt;Set: {#&lt;Set: {0, 2}&gt;, #&lt;Set: {1, 3}&gt;}&gt;</span>
<span style="color:#777">###########################</span>
s = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">%w[</span><span style="color:#D20">ant ape cow hen hog</span><span style="color:#710">]</span></span>.to_set <span style="color:#777"># A set of words</span>
s.divide {|x,y| x[<span style="color:#00D">0</span>] == y[<span style="color:#00D">0</span>]}      <span style="color:#777"># Divide into subsets by first letter</span>
<span style="color:#777"># =&gt; #&lt;Set:{#&lt;Set:{&quot;hog&quot;, &quot;hen&quot;}&gt;, #&lt;Set:{&quot;cow&quot;}&gt;, #&lt;Set:{&quot;ape&quot;, &quot;ant&quot;}&gt;}&gt;</span>
<span style="color:#777">###########################</span>
s = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">%w[</span><span style="color:#D20">ant ape cow hen hog</span><span style="color:#710">]</span></span>.to_set <span style="color:#777"># A set of words</span>
t = s.divide {|x,y| x[<span style="color:#00D">0</span>] == y[<span style="color:#00D">0</span>]}  <span style="color:#777"># Divide it into subsets</span>
t.flatten!                         <span style="color:#777"># Flatten the subsets</span>
t == s                             <span style="color:#777"># =&gt; true</span>
</pre></div>
</div>
</div>

<h4 id="file-and-directory-names">9.6.1 File and Directory Names</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>full = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">/home/matz/bin/ruby.exe</span><span style="color:#710">'</span></span>
file=<span style="color:#036;font-weight:bold">File</span>.basename(full)     <span style="color:#777"># =&gt; 'ruby.exe': just the local filename</span>
<span style="color:#036;font-weight:bold">File</span>.basename(full, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">.exe</span><span style="color:#710">'</span></span>)  <span style="color:#777"># =&gt; 'ruby': with extension stripped</span>
dir=<span style="color:#036;font-weight:bold">File</span>.dirname(full)       <span style="color:#777"># =&gt; '/home/matz/bin': no / at end</span>
<span style="color:#036;font-weight:bold">File</span>.dirname(file)           <span style="color:#777"># =&gt; '.': current directory</span>
<span style="color:#036;font-weight:bold">File</span>.split(full)             <span style="color:#777"># =&gt; ['/home/matz/bin', 'ruby.exe']</span>
<span style="color:#036;font-weight:bold">File</span>.extname(full)           <span style="color:#777"># =&gt; '.exe'</span>
<span style="color:#036;font-weight:bold">File</span>.extname(file)           <span style="color:#777"># =&gt; '.exe'</span>
<span style="color:#036;font-weight:bold">File</span>.extname(dir)            <span style="color:#777"># =&gt; ''</span>
<span style="color:#036;font-weight:bold">File</span>.join(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">home</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">matz</span><span style="color:#710">'</span></span>)     <span style="color:#777"># =&gt; 'home/matz': relative</span>
<span style="color:#036;font-weight:bold">File</span>.join(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">home</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">matz</span><span style="color:#710">'</span></span>)  <span style="color:#777"># =&gt; '/home/matz': absolute</span>
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">Dir</span>.chdir(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin</span><span style="color:#710">&quot;</span></span>)      <span style="color:#777"># Current working directory is &quot;/usr/bin&quot;</span>
<span style="color:#036;font-weight:bold">File</span>.expand_path(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby</span><span style="color:#710">&quot;</span></span>)       <span style="color:#777"># =&gt; &quot;/usr/bin/ruby&quot;</span>
<span style="color:#036;font-weight:bold">File</span>.expand_path(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">~/ruby</span><span style="color:#710">&quot;</span></span>)     <span style="color:#777"># =&gt; &quot;/home/david/ruby&quot;</span>
<span style="color:#036;font-weight:bold">File</span>.expand_path(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">~matz/ruby</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># =&gt; &quot;/home/matz/ruby&quot;</span>
<span style="color:#036;font-weight:bold">File</span>.expand_path(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/local/bin</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># =&gt; &quot;/usr/local/bin/ruby&quot;</span>
<span style="color:#036;font-weight:bold">File</span>.expand_path(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">../local/bin</span><span style="color:#710">&quot;</span></span>)   <span style="color:#777"># =&gt; &quot;/usr/local/bin/ruby&quot;</span>
<span style="color:#036;font-weight:bold">File</span>.expand_path(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">~/bin</span><span style="color:#710">&quot;</span></span>)          <span style="color:#777"># =&gt; &quot;/home/david/bin/ruby&quot;</span>
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">File</span>.identical?(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby</span><span style="color:#710">&quot;</span></span>)          <span style="color:#777"># =&gt; true if the file exists</span>
<span style="color:#036;font-weight:bold">File</span>.identical?(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin/ruby</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># =&gt; true if CWD is /usr/bin</span>
<span style="color:#036;font-weight:bold">File</span>.identical?(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">../bin/ruby</span><span style="color:#710">&quot;</span></span>)   <span style="color:#777"># =&gt; true if CWD is /usr/bin</span>
<span style="color:#036;font-weight:bold">File</span>.identical?(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby1.9</span><span style="color:#710">&quot;</span></span>)       <span style="color:#777"># =&gt; true if there is a link</span>
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">File</span>.fnmatch(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">*.rb</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello.rb</span><span style="color:#710">&quot;</span></span>)     <span style="color:#777"># =&gt; true</span>
<span style="color:#036;font-weight:bold">File</span>.fnmatch(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">*.[ch]</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby.c</span><span style="color:#710">&quot;</span></span>)     <span style="color:#777"># =&gt; true</span>
<span style="color:#036;font-weight:bold">File</span>.fnmatch(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">*.[ch]</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ruby.h</span><span style="color:#710">&quot;</span></span>)     <span style="color:#777"># =&gt; true</span>
<span style="color:#036;font-weight:bold">File</span>.fnmatch(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">?.txt</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ab.txt</span><span style="color:#710">&quot;</span></span>)      <span style="color:#777"># =&gt; false</span>
flags = <span style="color:#036;font-weight:bold">File</span>::<span style="color:#036;font-weight:bold">FNM_PATHNAME</span> | <span style="color:#036;font-weight:bold">File</span>::<span style="color:#036;font-weight:bold">FNM_DOTMATCH</span>
<span style="color:#036;font-weight:bold">File</span>.fnmatch(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lib/*.rb</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lib/a.rb</span><span style="color:#710">&quot;</span></span>, flags)      <span style="color:#777"># =&gt; true</span>
<span style="color:#036;font-weight:bold">File</span>.fnmatch(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lib/*.rb</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lib/a/b.rb</span><span style="color:#710">&quot;</span></span>, flags)    <span style="color:#777"># =&gt; false</span>
<span style="color:#036;font-weight:bold">File</span>.fnmatch(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lib/**/*.rb</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lib/a.rb</span><span style="color:#710">&quot;</span></span>, flags)   <span style="color:#777"># =&gt; true</span>
<span style="color:#036;font-weight:bold">File</span>.fnmatch(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lib/**/*.rb</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lib/a/b.rb</span><span style="color:#710">&quot;</span></span>, flags) <span style="color:#777"># =&gt; true</span>
</pre></div>
</div>
</div>

<h4 id="listing-directories">9.6.2 Listing Directories</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Get the names of all files in the config/ directory </span>
filenames = <span style="color:#036;font-weight:bold">Dir</span>.entries(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">config</span><span style="color:#710">&quot;</span></span>)        <span style="color:#777"># Get names as an array</span>
<span style="color:#036;font-weight:bold">Dir</span>.foreach(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">config</span><span style="color:#710">&quot;</span></span>) {|filename| ... }  <span style="color:#777"># Iterate names</span>
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">Dir</span>[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">*.data</span><span style="color:#710">'</span></span>]       <span style="color:#777"># Files with the &quot;data&quot; extension</span>
<span style="color:#036;font-weight:bold">Dir</span>[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">ruby.*</span><span style="color:#710">'</span></span>]       <span style="color:#777"># Any filename beginning with &quot;ruby.&quot;</span>
<span style="color:#036;font-weight:bold">Dir</span>[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">?</span><span style="color:#710">'</span></span>]            <span style="color:#777"># Any single-character filename</span>
<span style="color:#036;font-weight:bold">Dir</span>[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">*.[ch]</span><span style="color:#710">'</span></span>]       <span style="color:#777"># Any file that ends with .c or .h</span>
<span style="color:#036;font-weight:bold">Dir</span>[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">*.{java,rb}</span><span style="color:#710">'</span></span>]  <span style="color:#777"># Any file that ends with .java or .rb</span>
<span style="color:#036;font-weight:bold">Dir</span>[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">*/*.rb</span><span style="color:#710">'</span></span>]       <span style="color:#777"># Any Ruby program in any direct sub-directory</span>
<span style="color:#036;font-weight:bold">Dir</span>[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">**/*.rb</span><span style="color:#710">'</span></span>]      <span style="color:#777"># Any Ruby program in any descendant directory</span>
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">Dir</span>.glob(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">*.rb</span><span style="color:#710">'</span></span>) {|f| ... }      <span style="color:#777"># Iterate all Ruby files</span>
<span style="color:#036;font-weight:bold">Dir</span>.glob(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">*</span><span style="color:#710">'</span></span>)                    <span style="color:#777"># Does not include names beginning with '.'</span>
<span style="color:#036;font-weight:bold">Dir</span>.glob(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">*</span><span style="color:#710">'</span></span>,<span style="color:#036;font-weight:bold">File</span>::<span style="color:#036;font-weight:bold">FNM_DOTMATCH</span>) <span style="color:#777"># Include . files, just like Dir.entries</span>
<span style="color:#777">###########################</span>
puts <span style="color:#036;font-weight:bold">Dir</span>.getwd          <span style="color:#777"># Print current working directory</span>
<span style="color:#036;font-weight:bold">Dir</span>.chdir(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">..</span><span style="color:#710">&quot;</span></span>)         <span style="color:#777"># Change CWD to the parent directory</span>
<span style="color:#036;font-weight:bold">Dir</span>.chdir(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">../sibling</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># Change again to a sibling directory</span>
<span style="color:#036;font-weight:bold">Dir</span>.chdir(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/home</span><span style="color:#710">&quot;</span></span>)      <span style="color:#777"># Change to an absolute directory</span>
<span style="color:#036;font-weight:bold">Dir</span>.chdir               <span style="color:#777"># Change to user's home directory</span>
home = <span style="color:#036;font-weight:bold">Dir</span>.pwd          <span style="color:#777"># pwd is an alias for getwd</span>
</pre></div>
</div>
</div>

<h4 id="testing-files">9.6.3 Testing Files</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>f = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin/ruby</span><span style="color:#710">&quot;</span></span>      <span style="color:#777"># A filename for the examples below</span>

<span style="color:#777"># File existence and types.</span>
<span style="color:#036;font-weight:bold">File</span>.exist?(f)           <span style="color:#777"># Does the named file exist? Also: File.exists?</span>
<span style="color:#036;font-weight:bold">File</span>.file?(f)            <span style="color:#777"># Is it an existing file?</span>
<span style="color:#036;font-weight:bold">File</span>.directory?(f)       <span style="color:#777"># Or is it an existing directory?</span>
<span style="color:#036;font-weight:bold">File</span>.symlink?(f)         <span style="color:#777"># Either way, is it a symbolic link?</span>

<span style="color:#777"># File size methods. Use File.truncate to set file size.</span>
<span style="color:#036;font-weight:bold">File</span>.size(f)             <span style="color:#777"># File size in bytes.</span>
<span style="color:#036;font-weight:bold">File</span>.size?(f)            <span style="color:#777"># Size in bytes or nil if empty file.</span>
<span style="color:#036;font-weight:bold">File</span>.zero?(f)            <span style="color:#777"># True if file is empty.</span>

<span style="color:#777"># File permissions. Use File.chmod to set permissions (system dependent).</span>
<span style="color:#036;font-weight:bold">File</span>.readable?(f)        <span style="color:#777"># Can we read the file?</span>
<span style="color:#036;font-weight:bold">File</span>.writable?(f)        <span style="color:#777"># Can we write the file? No &quot;e&quot; in &quot;writable&quot;</span>
<span style="color:#036;font-weight:bold">File</span>.executable?(f)      <span style="color:#777"># Can we execute the file?</span>
<span style="color:#036;font-weight:bold">File</span>.world_readable?(f)  <span style="color:#777"># Can everybody read it? Ruby 1.9.</span>
<span style="color:#036;font-weight:bold">File</span>.world_writable?(f)  <span style="color:#777"># Can everybody write it? Ruby 1.9.</span>

<span style="color:#777"># File times/dates. Use File.utime to set the times.</span>
<span style="color:#036;font-weight:bold">File</span>.mtime(f)            <span style="color:#777"># =&gt; Last modification time as a Time object</span>
<span style="color:#036;font-weight:bold">File</span>.atime(f)            <span style="color:#777"># =&gt; Last access time as a Time object</span>
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">File</span>.ftype(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin/ruby</span><span style="color:#710">&quot;</span></span>)    <span style="color:#777"># =&gt; &quot;link&quot;</span>
<span style="color:#036;font-weight:bold">File</span>.ftype(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin/ruby1.9</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># =&gt; &quot;file&quot;</span>
<span style="color:#036;font-weight:bold">File</span>.ftype(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/lib/ruby</span><span style="color:#710">&quot;</span></span>)    <span style="color:#777"># =&gt; &quot;directory&quot;</span>
<span style="color:#036;font-weight:bold">File</span>.ftype(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin/ruby3.0</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># SystemCallError: No such file or directory</span>
<span style="color:#777">###########################</span>
s = <span style="color:#036;font-weight:bold">File</span>.stat(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin/ruby</span><span style="color:#710">&quot;</span></span>)
s.file?             <span style="color:#777"># =&gt; true</span>
s.directory?        <span style="color:#777"># =&gt; false</span>
s.ftype             <span style="color:#777"># =&gt; &quot;file&quot;</span>
s.readable?         <span style="color:#777"># =&gt; true</span>
s.writable?         <span style="color:#777"># =&gt; false</span>
s.executable?       <span style="color:#777"># =&gt; true</span>
s.size              <span style="color:#777"># =&gt; 5492</span>
s.atime             <span style="color:#777"># =&gt; Mon Jul 23 13:20:37 -0700 2007</span>
<span style="color:#777">###########################</span>
<span style="color:#777"># Testing single files</span>
test <span style="color:#00D">?e</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin/ruby</span><span style="color:#710">&quot;</span></span>   <span style="color:#777"># File.exist?(&quot;/usr/bin/ruby&quot;)</span>
test <span style="color:#00D">?f</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin/ruby</span><span style="color:#710">&quot;</span></span>   <span style="color:#777"># File.file?(&quot;/usr/bin/ruby&quot;)</span>
test <span style="color:#00D">?d</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin/ruby</span><span style="color:#710">&quot;</span></span>   <span style="color:#777"># File.directory?(&quot;/usr/bin/ruby&quot;)</span>
test <span style="color:#00D">?r</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin/ruby</span><span style="color:#710">&quot;</span></span>   <span style="color:#777"># File.readable?(&quot;/usr/bin/ruby&quot;)</span>
test <span style="color:#00D">?w</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin/ruby</span><span style="color:#710">&quot;</span></span>   <span style="color:#777"># File.writeable?(&quot;/usr/bin/ruby&quot;)</span>
test <span style="color:#00D">?M</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin/ruby</span><span style="color:#710">&quot;</span></span>   <span style="color:#777"># File.mtime(&quot;/usr/bin/ruby&quot;)</span>
test <span style="color:#00D">?s</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/bin/ruby</span><span style="color:#710">&quot;</span></span>   <span style="color:#777"># File.size?(&quot;/usr/bin/ruby&quot;)</span>

<span style="color:#777"># Comparing two files f and g</span>
test <span style="color:#00D">?-</span>, f, g              <span style="color:#777"># File.identical(f,g)</span>
test <span style="color:#00D">?&lt;</span>, f, g              <span style="color:#777"># File(f).mtime &lt; File(g).mtime</span>
test <span style="color:#00D">?&gt;</span>, f, g              <span style="color:#777"># File(f).mtime &gt; File(g).mtime</span>
test <span style="color:#00D">?=</span>, f, g              <span style="color:#777"># File(f).mtime == File(g).mtime</span>
</pre></div>
</div>
</div>

<h4 id="creating-deleting-and-renaming-files-and-directories">9.6.4 Creating, Deleting, and Renaming Files and Directories</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Create (or overwrite) a file named &quot;test&quot;</span>
<span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">test</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">w</span><span style="color:#710">&quot;</span></span>) {}
<span style="color:#777"># Create (but do not clobber) a file named &quot;test&quot;</span>
<span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">test</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">a</span><span style="color:#710">&quot;</span></span>) {}
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">File</span>.rename(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">test</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">test.old</span><span style="color:#710">&quot;</span></span>)     <span style="color:#777"># Current name, then new name</span>
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">File</span>.symlink(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">test.old</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">oldtest</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># Link target, link name</span>
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">File</span>.link(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">test.old</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">test2</span><span style="color:#710">&quot;</span></span>)   <span style="color:#777"># Link target, link name</span>
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">File</span>.delete(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">test2</span><span style="color:#710">&quot;</span></span>)   <span style="color:#777"># May also be called with multiple args</span>
<span style="color:#036;font-weight:bold">File</span>.unlink(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">oldtest</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># to delete multiple named files</span>
<span style="color:#777">###########################</span>
f = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">log.messages</span><span style="color:#710">&quot;</span></span>          <span style="color:#777"># Filename</span>
atime = mtime = <span style="color:#036;font-weight:bold">Time</span>.now    <span style="color:#777"># New access and modify times</span>
<span style="color:#036;font-weight:bold">File</span>.truncate(f, <span style="color:#00D">0</span>)         <span style="color:#777"># Erase all existing content</span>
<span style="color:#036;font-weight:bold">File</span>.utime(atime, mtime, f) <span style="color:#777"># Change times</span>
<span style="color:#036;font-weight:bold">File</span>.chmod(<span style="color:#00D">0600</span>, f)         <span style="color:#777"># Unix permissions -rw-------; note octal arg</span>
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">Dir</span>.mkdir(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">temp</span><span style="color:#710">&quot;</span></span>)                 <span style="color:#777"># Create a directory</span>
<span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">temp/f</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">w</span><span style="color:#710">&quot;</span></span>) {}       <span style="color:#777"># Create a file in it</span>
<span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">temp/g</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">w</span><span style="color:#710">&quot;</span></span>) {}       <span style="color:#777"># Create another one</span>
<span style="color:#036;font-weight:bold">File</span>.delete(*<span style="color:#036;font-weight:bold">Dir</span>[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">temp/*</span><span style="color:#710">&quot;</span></span>])       <span style="color:#777"># Delete all files in the directory</span>
<span style="color:#036;font-weight:bold">Dir</span>.rmdir(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">temp</span><span style="color:#710">&quot;</span></span>)                 <span style="color:#777"># Delete the directory</span>
</pre></div>
</div>
</div>

<h4 id="opening-files">9.7.1.1 Opening files</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>f = <span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">data.txt</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">r</span><span style="color:#710">&quot;</span></span>)   <span style="color:#777"># Open file data.txt for reading</span>
out = <span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">out.txt</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">w</span><span style="color:#710">&quot;</span></span>)  <span style="color:#777"># Open file out.txt for writing</span>
<span style="color:#777">###########################</span>
<span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">log.txt</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">a</span><span style="color:#710">&quot;</span></span>) <span style="color:#080;font-weight:bold">do</span> |log|      <span style="color:#777"># Open for appending</span>
  log.puts(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">INFO: Logging a message</span><span style="color:#710">&quot;</span></span>)   <span style="color:#777"># Output to the file</span>
<span style="color:#080;font-weight:bold">end</span>                                     <span style="color:#777"># Automatically closed</span>
</pre></div>
</div>
</div>

<h4 id="kernelopen">9.7.1.2 Kernel.open</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># How long has the server been up?</span>
uptime = open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">|uptime</span><span style="color:#710">&quot;</span></span>) {|f| f.gets }
<span style="color:#777">###########################</span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">open-uri</span><span style="color:#710">&quot;</span></span>                         <span style="color:#777"># Required library</span>
f = open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">http://www.davidflanagan.com/</span><span style="color:#710">&quot;</span></span>)  <span style="color:#777"># Webpage as a file</span>
webpage = f.read                           <span style="color:#777"># Read it as one big string</span>
f.close                                    <span style="color:#777"># Don't forget to close!</span>
</pre></div>
</div>
</div>

<h4 id="stringio">9.7.1.3 StringIO</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">stringio</span><span style="color:#710">&quot;</span></span>
input = <span style="color:#036;font-weight:bold">StringIO</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">now is the time</span><span style="color:#710">&quot;</span></span>)  <span style="color:#777"># Read from this string</span>
buffer = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#710">&quot;</span></span>
output = <span style="color:#036;font-weight:bold">StringIO</span>.open(buffer, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">w</span><span style="color:#710">&quot;</span></span>)       <span style="color:#777"># Write into buffer</span>
</pre></div>
</div>
</div>

<h4 id="streams-and-encodings">9.7.2 Streams and Encodings</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>f.set_encoding(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">iso-8859-1</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">utf-8</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># Latin-1, transcoded to UTF-8</span>
f.set_encoding(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">iso-8859-1:utf-8</span><span style="color:#710">&quot;</span></span>)    <span style="color:#777"># Same as above</span>
f.set_encoding(<span style="color:#036;font-weight:bold">Encoding</span>::<span style="color:#036;font-weight:bold">UTF</span>-<span style="color:#00D">8</span>)       <span style="color:#777"># UTF-8 text</span>
<span style="color:#777">###########################</span>
<span style="color:#080;font-weight:bold">in</span> = <span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">data.txt</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">r:utf-8</span><span style="color:#710">&quot;</span></span>);           <span style="color:#777"># Read UTF-8 text</span>
out = <span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">log</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">a:utf-8</span><span style="color:#710">&quot;</span></span>);               <span style="color:#777"># Write UTF-8 text</span>
<span style="color:#080;font-weight:bold">in</span> = <span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">data.txt</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">r:iso8859-1:utf-8</span><span style="color:#710">&quot;</span></span>); <span style="color:#777"># Latin-1 transcoded to UTF-8 ~~~</span>
<span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">data</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">r:binary</span><span style="color:#710">&quot;</span></span>)  <span style="color:#777"># Open a file for reading binary data&lt;/programlisting&gt;</span>

      &lt;para&gt;<span style="color:#036;font-weight:bold">On</span> <span style="color:#036;font-weight:bold">Windows</span>, you should open binary files with mode &lt;literal role=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">keep-together</span><span style="color:#710">&quot;</span></span>&gt;<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rb:binary</span><span style="color:#710">&quot;</span></span>&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">literal&gt; or call &lt;literal role=&quot;keep-together&quot;&gt;binmode&lt;</span><span style="color:#404">/</span></span>literal&gt; &lt;indexterm&gt;
          &lt;primary&gt;binmode method (<span style="color:#036;font-weight:bold">IO</span>)&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">primary&gt;
        &lt;</span><span style="color:#404">/</span><span style="color:#C2C">in</span></span>dexterm&gt;on the stream. This disables the automatic newline
      conversion performed by <span style="color:#036;font-weight:bold">Windows</span>, <span style="color:#080;font-weight:bold">and</span> is only necessary on that
      platform.&lt;/para&gt;

      &lt;para&gt;<span style="color:#036;font-weight:bold">Not</span> every stream-reading method honors the encoding of a stream.
      Some lower-level reading methods take an argument that specifies the
      number of bytes to read. By their nature, these methods <span style="color:#080;font-weight:bold">return</span> unencoded
      strings of bytes rather than strings of text. The methods that <span style="color:#080;font-weight:bold">do</span> <span style="color:#080;font-weight:bold">not</span>
      specify a length to read <span style="color:#080;font-weight:bold">do</span> honor the encoding.&lt;/para&gt;
    &lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">sect2&gt;

    &lt;sect2&gt;
      &lt;title&gt;Reading from a Stream&lt;</span><span style="color:#404">/</span></span>title&gt;

      &lt;para&gt;<span style="color:#036;font-weight:bold">The</span> &lt;literal&gt;<span style="color:#036;font-weight:bold">IO</span>&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">literal&gt; class&lt;indexterm class=&quot;startofrange&quot; id=&quot;ch09-streams&quot;&gt;
          &lt;primary&gt;streams&lt;</span><span style="color:#404">/</span></span>primary&gt;

          &lt;secondary&gt;reading from&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">secondary&gt;
        &lt;</span><span style="color:#404">/</span><span style="color:#C2C">in</span></span>dexterm&gt; defines a number of methods <span style="color:#080;font-weight:bold">for</span> reading from streams.
      They work only <span style="color:#080;font-weight:bold">if</span> the stream is readable, of course. You can read
      &lt;indexterm&gt;
          &lt;primary&gt;<span style="color:#069">STDIN</span> stream&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">primary&gt;
        &lt;</span><span style="color:#404">/</span><span style="color:#C2C">in</span></span>dexterm&gt;&lt;indexterm&gt;
          &lt;primary&gt;<span style="color:#069">ARGF</span> stream&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">primary&gt;
        &lt;</span><span style="color:#404">/</span><span style="color:#C2C">in</span></span>dexterm&gt;&lt;indexterm&gt;
          &lt;primary&gt;<span style="color:#069">DATA</span> stream&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">primary&gt;
        &lt;</span><span style="color:#404">/</span><span style="color:#C2C">in</span></span>dexterm&gt;&lt;indexterm&gt;
          &lt;primary&gt;<span style="color:#069">STDOUT</span> stream&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">primary&gt;
        &lt;</span><span style="color:#404">/</span><span style="color:#C2C">in</span></span>dexterm&gt;&lt;indexterm&gt;
          &lt;primary&gt;<span style="color:#069">STDERR</span> stream&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">primary&gt;
        &lt;</span><span style="color:#404">/</span><span style="color:#C2C">in</span></span>dexterm&gt;from &lt;literal&gt;<span style="color:#069">STDIN</span>&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">literal&gt;, &lt;literal&gt;ARGF&lt;</span><span style="color:#404">/</span></span>literal&gt;,
      <span style="color:#080;font-weight:bold">and</span> &lt;literal&gt;<span style="color:#069">DATA</span>&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">literal&gt;, but not from &lt;literal&gt;STDOUT&lt;</span><span style="color:#404">/</span></span>literal&gt; <span style="color:#080;font-weight:bold">or</span>
      &lt;literal&gt;<span style="color:#069">STDERR</span>&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">literal&gt;. Files and &lt;literal&gt;StringIO&lt;</span><span style="color:#404">/</span></span>literal&gt; objects
      are opened <span style="color:#080;font-weight:bold">for</span> reading by default, <span style="color:#080;font-weight:bold">unless</span> you explicitly open them <span style="color:#080;font-weight:bold">for</span>
      writing only.&lt;/para&gt;

      &lt;sect3 id=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">readinglines</span><span style="color:#710">&quot;</span></span>&gt;
        &lt;title&gt;<span style="color:#036;font-weight:bold">Reading</span> lines&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">title&gt;

        &lt;para&gt;&lt;literal&gt;IO&lt;</span><span style="color:#404">/</span></span>literal&gt; defines a number of ways to read lines
        from a <span style="color:#606">stream</span>:&lt;<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">para&gt;
</span></span></pre></div>
</div>
</div>

<h4 id="reading-lines">9.7.3.1 Reading lines</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>        &lt;programlisting&gt;lines = <span style="color:#069">ARGF</span>.readlines         <span style="color:#777"># Read all input, return an array of lines</span>
line = <span style="color:#069">DATA</span>.readline           <span style="color:#777"># Read one line from stream</span>
print l <span style="color:#080;font-weight:bold">while</span> l = <span style="color:#069">DATA</span>.gets    <span style="color:#777"># Read until gets returns nil, at EOF</span>
<span style="color:#069">DATA</span>.each {|line| print line } <span style="color:#777"># Iterate lines from stream until EOF</span>
<span style="color:#069">DATA</span>.each_line                 <span style="color:#777"># An alias for each</span>
<span style="color:#069">DATA</span>.lines                     <span style="color:#777"># An enumerator for each_line: Ruby 1.9</span>
<span style="color:#777">###########################</span>
print <span style="color:#080;font-weight:bold">while</span> <span style="color:#069">DATA</span>.gets
<span style="color:#777">###########################</span>
<span style="color:#069">DATA</span>.lineno = <span style="color:#00D">0</span>     <span style="color:#777"># Start from line 0, even though data is at end of file</span>
<span style="color:#069">DATA</span>.readline       <span style="color:#777"># Read one line of data</span>
<span style="color:#069">DATA</span>.lineno         <span style="color:#777"># =&gt; 1</span>
<span style="color:#d70">$.</span>                  <span style="color:#777"># =&gt; 1: magic global variable, implicitly set</span>
</pre></div>
</div>
</div>

<h4 id="reading-entire-files">9.7.3.2 Reading entire files</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>data = <span style="color:#036;font-weight:bold">IO</span>.read(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">data</span><span style="color:#710">&quot;</span></span>)         <span style="color:#777"># Read and return the entire file</span>
data = <span style="color:#036;font-weight:bold">IO</span>.read(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">data</span><span style="color:#710">&quot;</span></span>, <span style="color:#00D">4</span>, <span style="color:#00D">2</span>)   <span style="color:#777"># Read 4 bytes starting at byte 2</span>
data = <span style="color:#036;font-weight:bold">IO</span>.read(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">data</span><span style="color:#710">&quot;</span></span>, <span style="color:#069">nil</span>, <span style="color:#00D">6</span>) <span style="color:#777"># Read from byte 6 to end-of-file</span>

<span style="color:#777"># Read lines into an array</span>
words = <span style="color:#036;font-weight:bold">IO</span>.readlines(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/share/dict/words</span><span style="color:#710">&quot;</span></span>)

<span style="color:#777"># Read lines one at a time and initialize a hash</span>
words = {}
<span style="color:#036;font-weight:bold">IO</span>.foreach(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/usr/share/dict/words</span><span style="color:#710">&quot;</span></span>) {|w| words[w] = <span style="color:#069">true</span>}
<span style="color:#777">###########################</span>
<span style="color:#777"># An alternative to text = File.read(&quot;data.txt&quot;)</span>
f = <span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">data.txt</span><span style="color:#710">&quot;</span></span>)  <span style="color:#777"># Open a file</span>
text = f.read              <span style="color:#777"># Read its contents as text</span>
f.close                    <span style="color:#777"># Close the file</span>
</pre></div>
</div>
</div>

<h4 id="reading-bytes-and-characters">9.7.3.3 Reading bytes and characters</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>f = <span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">data</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">r:binary</span><span style="color:#710">&quot;</span></span>) <span style="color:#777"># Open data file for binary reads </span>
c = f.getc                        <span style="color:#777"># Read the first byte as an integer</span>
f.ungetc(c)                       <span style="color:#777"># Push that byte back</span>
c = f.readchar                    <span style="color:#777"># Read it back again</span>
<span style="color:#777">###########################</span>
f.each_byte {|b| ... }      <span style="color:#777"># Iterate through remaining bytes</span>
f.bytes                     <span style="color:#777"># An enumerator for each_byte: Ruby 1.9</span>
<span style="color:#777">###########################</span>
f = <span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">data.bin</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rb:binary</span><span style="color:#710">&quot;</span></span>)  <span style="color:#777"># No newline conversion, no encoding</span>
magic = f.readbytes(<span style="color:#00D">4</span>)       <span style="color:#777"># First four bytes identify filetype</span>
exit <span style="color:#080;font-weight:bold">unless</span> magic == <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">INTS</span><span style="color:#710">&quot;</span></span>  <span style="color:#777"># Magic number spells &quot;INTS&quot; (ASCII)</span>
bytes = f.read               <span style="color:#777"># Read the rest of the file</span>
                             <span style="color:#777"># Encoding is binary, so this is a byte string</span>
data = bytes.unpack(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">i*</span><span style="color:#710">&quot;</span></span>)    <span style="color:#777"># Convert bytes to an array of integers</span>
</pre></div>
</div>
</div>

<h4 id="writing-to-a-stream">9.7.4 Writing to a Stream</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>o = <span style="color:#069">STDOUT</span>
<span style="color:#777"># Single-character output</span>
o.putc(<span style="color:#00D">65</span>)         <span style="color:#777"># Write single byte 65 (capital A)</span>
o.putc(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">B</span><span style="color:#710">&quot;</span></span>)        <span style="color:#777"># Write single byte 66 (capital B)</span>
o.putc(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">CD</span><span style="color:#710">&quot;</span></span>)       <span style="color:#777"># Write just the first byte of the string</span>
<span style="color:#777">###########################</span>
o = <span style="color:#069">STDOUT</span>
<span style="color:#777"># String output</span>
o &lt;&lt; x             <span style="color:#777"># Output x.to_s </span>
o &lt;&lt; x &lt;&lt; y        <span style="color:#777"># May be chained: output x.to_s + y.to_s</span>
o.print            <span style="color:#777"># Output $_ + $\</span>
o.print s          <span style="color:#777"># Output s.to_s + $\</span>
o.print s,t        <span style="color:#777"># Output s.to_s + t.to_s + $\</span>
o.printf fmt,*args <span style="color:#777"># Outputs fmt%[args]</span>
o.puts             <span style="color:#777"># Output newline</span>
o.puts x           <span style="color:#777"># Output x.to_s.chomp plus newline</span>
o.puts x,y         <span style="color:#777"># Output x.to_s.chomp, newline, y.to_s.chomp, newline</span>
o.puts [x,y]       <span style="color:#777"># Same as above</span>
o.write s          <span style="color:#777"># Output s.to_s, returns s.to_s.length</span>
o.syswrite s       <span style="color:#777"># Low-level version of write</span>
</pre></div>
</div>
</div>

<h4 id="random-access-methods">9.7.5 Random Access Methods</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>f = <span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">test.txt</span><span style="color:#710">&quot;</span></span>)
f.pos        <span style="color:#777"># =&gt; 0: return the current position in bytes</span>
f.pos = <span style="color:#00D">10</span>   <span style="color:#777"># skip to position 10</span>
f.tell       <span style="color:#777"># =&gt; 10: a synonym for pos</span>
f.rewind     <span style="color:#777"># go back to position 0, reset lineno to 0, also</span>
f.seek(<span style="color:#00D">10</span>, <span style="color:#036;font-weight:bold">IO</span>::<span style="color:#036;font-weight:bold">SEEK_SET</span>)  <span style="color:#777"># Skip to absolute position 10</span>
f.seek(<span style="color:#00D">10</span>, <span style="color:#036;font-weight:bold">IO</span>::<span style="color:#036;font-weight:bold">SEEK_CUR</span>)  <span style="color:#777"># Skip 10 bytes from current position</span>
f.seek(<span style="color:#00D">-10</span>, <span style="color:#036;font-weight:bold">IO</span>::<span style="color:#036;font-weight:bold">SEEK_END</span>) <span style="color:#777"># Skip to 10 bytes from end</span>
f.seek(<span style="color:#00D">0</span>, <span style="color:#036;font-weight:bold">IO</span>::<span style="color:#036;font-weight:bold">SEEK_END</span>)   <span style="color:#777"># Skip to very end of file</span>
f.eof?                    <span style="color:#777"># =&gt; true: we're at the end</span>
<span style="color:#777">###########################</span>
pos = f.sysseek(<span style="color:#00D">0</span>, <span style="color:#036;font-weight:bold">IO</span>::<span style="color:#036;font-weight:bold">SEEK_CUR</span>)  <span style="color:#777"># Get current position</span>
f.sysseek(<span style="color:#00D">0</span>, <span style="color:#036;font-weight:bold">IO</span>::<span style="color:#036;font-weight:bold">SEEK_SET</span>)        <span style="color:#777"># Rewind stream</span>
f.sysseek(pos, <span style="color:#036;font-weight:bold">IO</span>::<span style="color:#036;font-weight:bold">SEEK_SET</span>)      <span style="color:#777"># Return to original position</span>
</pre></div>
</div>
</div>

<h4 id="closing-flushing-and-testing-streams">9.7.6 Closing, Flushing, and Testing Streams</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">test.txt</span><span style="color:#710">&quot;</span></span>) <span style="color:#080;font-weight:bold">do</span> |f|
  <span style="color:#777"># Use stream f here</span>
  <span style="color:#777"># Value of this block becomes return value of the open method</span>
<span style="color:#080;font-weight:bold">end</span> <span style="color:#777"># f is automatically closed for us here</span>
<span style="color:#777">###########################</span>
<span style="color:#080;font-weight:bold">begin</span>
  f = <span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">test.txt</span><span style="color:#710">&quot;</span></span>)
  <span style="color:#777"># use stream f here</span>
<span style="color:#080;font-weight:bold">ensure</span>
  f.close <span style="color:#080;font-weight:bold">if</span> f
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">###########################</span>
out.print <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">wait&gt;</span><span style="color:#710">'</span></span> <span style="color:#777"># Display a prompt</span>
out.flush         <span style="color:#777"># Manually flush output buffer to OS</span>
sleep(<span style="color:#00D">1</span>)          <span style="color:#777"># Prompt appears before we go to sleep</span>

out.sync = <span style="color:#069">true</span>   <span style="color:#777"># Automatically flush buffer after every write</span>
out.sync = <span style="color:#069">false</span>  <span style="color:#777"># Don't automatically flush</span>
out.sync          <span style="color:#777"># Return current sync mode</span>
out.fsync         <span style="color:#777"># Flush output buffer and ask OS to flush its buffers</span>
                  <span style="color:#777"># Returns nil if unsupported on current platform</span>
<span style="color:#777">###########################</span>
f.eof?       <span style="color:#777"># true if stream is at EOF</span>
f.closed?    <span style="color:#777"># true if stream has been closed</span>
f.tty?       <span style="color:#777"># true if stream is interactive</span>
</pre></div>
</div>
</div>

<h4 id="networking">9.8 Networking</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">socket</span><span style="color:#710">'</span></span>
</pre></div>
</div>
</div>

<h4 id="a-very-simple-client">9.8.1 A Very Simple Client</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">socket</span><span style="color:#710">'</span></span>                <span style="color:#777"># Sockets are in standard library</span>

host, port = <span style="color:#069">ARGV</span>               <span style="color:#777"># Host and port from command line</span>

s = <span style="color:#036;font-weight:bold">TCPSocket</span>.open(host, port)  <span style="color:#777"># Open a socket to host and port</span>
<span style="color:#080;font-weight:bold">while</span> line = s.gets             <span style="color:#777"># Read lines from the socket</span>
  puts line.chop                <span style="color:#777"># And print with platform line terminator</span>
<span style="color:#080;font-weight:bold">end</span>
s.close                         <span style="color:#777"># Close the socket when done</span>
<span style="color:#777">###########################</span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">socket</span><span style="color:#710">'</span></span>                  
host, port = <span style="color:#069">ARGV</span>                 
<span style="color:#036;font-weight:bold">TCPSocket</span>.open(host, port) <span style="color:#080;font-weight:bold">do</span> |s| <span style="color:#777"># Use block form of open</span>
  <span style="color:#080;font-weight:bold">while</span> line = s.gets             
    puts line.chop                
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>                               <span style="color:#777"># Socket automatically closed</span>
</pre></div>
</div>
</div>

<h4 id="a-very-simple-server">9.8.2 A Very Simple Server</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">socket</span><span style="color:#710">'</span></span>               <span style="color:#777"># Get sockets from stdlib</span>

server = <span style="color:#036;font-weight:bold">TCPServer</span>.open(<span style="color:#00D">2000</span>)  <span style="color:#777"># Socket to listen on port 2000</span>
loop {                         <span style="color:#777"># Infinite loop: servers run forever</span>
  client = server.accept       <span style="color:#777"># Wait for a client to connect</span>
  client.puts(<span style="color:#036;font-weight:bold">Time</span>.now.ctime)  <span style="color:#777"># Send the time to the client</span>
  client.close                 <span style="color:#777"># Disconnect from the client</span>
}
<span style="color:#777">###########################</span>
ruby client.rb localhost <span style="color:#00D">2000</span>
</pre></div>
</div>
</div>

<h4 id="datagrams">9.8.3 Datagrams</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">socket</span><span style="color:#710">'</span></span>                     <span style="color:#777"># Standard library</span>

host, port, request = <span style="color:#069">ARGV</span>           <span style="color:#777"># Get args from command line</span>

ds = <span style="color:#036;font-weight:bold">UDPSocket</span>.new                   <span style="color:#777"># Create datagram socket</span>
ds.connect(host, port)               <span style="color:#777"># Connect to the port on the host</span>
ds.send(request, <span style="color:#00D">0</span>)                  <span style="color:#777"># Send the request text</span>
response,address = ds.recvfrom(<span style="color:#00D">1024</span>) <span style="color:#777"># Wait for a response (1kb max)</span>
puts response                        <span style="color:#777"># Print the response</span>
<span style="color:#777">###########################</span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">socket</span><span style="color:#710">'</span></span>                     <span style="color:#777"># Standard library</span>

port = <span style="color:#069">ARGV</span>[<span style="color:#00D">0</span>]                       <span style="color:#777"># The port to listen on</span>

ds = <span style="color:#036;font-weight:bold">UDPSocket</span>.new                   <span style="color:#777"># Create new socket</span>
ds.bind(<span style="color:#069">nil</span>, port)                   <span style="color:#777"># Make it listen on the port</span>
loop <span style="color:#080;font-weight:bold">do</span>                              <span style="color:#777"># Loop forever</span>
  request,address=ds.recvfrom(<span style="color:#00D">1024</span>)  <span style="color:#777"># Wait to receive something</span>
  response = request.upcase          <span style="color:#777"># Convert request text to uppercase</span>
  clientaddr = address[<span style="color:#00D">3</span>]            <span style="color:#777"># What ip address sent the request?</span>
  clientname = address[<span style="color:#00D">2</span>]            <span style="color:#777"># What is the host name?</span>
  clientport = address[<span style="color:#00D">1</span>]            <span style="color:#777"># What port was it sent from</span>
  ds.send(response, <span style="color:#00D">0</span>,               <span style="color:#777"># Send the response back...</span>
          clientaddr, clientport)    <span style="color:#777"># ...where it came from</span>
  <span style="color:#777"># Log the client connection</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Connection from: </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>clientname<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20"> </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>clientaddr<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20"> </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>clientport<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="a-more-complex-client">9.8.4 A More Complex Client</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">socket</span><span style="color:#710">'</span></span>     <span style="color:#777"># Sockets from standard library</span>

host, port = <span style="color:#069">ARGV</span>    <span style="color:#777"># Network host and port on command line</span>

<span style="color:#080;font-weight:bold">begin</span>                <span style="color:#777"># Begin for exception handling</span>
  <span style="color:#777"># Give the user some feedback while connecting.</span>
  <span style="color:#069">STDOUT</span>.print <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Connecting...</span><span style="color:#710">&quot;</span></span>      <span style="color:#777"># Say what we're doing</span>
  <span style="color:#069">STDOUT</span>.flush                      <span style="color:#777"># Make it visible right away</span>
  s = <span style="color:#036;font-weight:bold">TCPSocket</span>.open(host, port)    <span style="color:#777"># Connect</span>
  <span style="color:#069">STDOUT</span>.puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">done</span><span style="color:#710">&quot;</span></span>                <span style="color:#777"># And say we did it</span>

  <span style="color:#777"># Now display information about the connection.</span>
  local, peer = s.addr, s.peeraddr
  <span style="color:#069">STDOUT</span>.print <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Connected to </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>peer[<span style="color:#00D">2</span>]<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20">:</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>peer[<span style="color:#00D">1</span>]<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>
  <span style="color:#069">STDOUT</span>.puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> using local port </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>local[<span style="color:#00D">1</span>]<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>

  <span style="color:#777"># Wait just a bit, to see if the server sends any initial message.</span>
  <span style="color:#080;font-weight:bold">begin</span>
    sleep(<span style="color:#60E">0.5</span>)                      <span style="color:#777"># Wait half a second</span>
    msg = s.read_nonblock(<span style="color:#00D">4096</span>)     <span style="color:#777"># Read whatever is ready</span>
    <span style="color:#069">STDOUT</span>.puts msg.chop            <span style="color:#777"># And display it</span>
  <span style="color:#080;font-weight:bold">rescue</span> <span style="color:#036;font-weight:bold">SystemCallError</span>
    <span style="color:#777"># If nothing was ready to read, just ignore the exception.</span>
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#777"># Now begin a loop of client/server interaction.</span>
  loop <span style="color:#080;font-weight:bold">do</span>
    <span style="color:#069">STDOUT</span>.print <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">&gt; </span><span style="color:#710">'</span></span>   <span style="color:#777"># Display prompt for local input</span>
    <span style="color:#069">STDOUT</span>.flush        <span style="color:#777"># Make sure the prompt is visible</span>
    local = <span style="color:#069">STDIN</span>.gets  <span style="color:#777"># Read line from the console</span>
    <span style="color:#080;font-weight:bold">break</span> <span style="color:#080;font-weight:bold">if</span> !local     <span style="color:#777"># Quit if no input from console</span>

    s.puts(local)       <span style="color:#777"># Send the line to the server</span>
    s.flush             <span style="color:#777"># Force it out</span>

    <span style="color:#777"># Read the server's response and print out.</span>
    <span style="color:#777"># The server may send more than one line, so use readpartial</span>
    <span style="color:#777"># to read whatever it sends (as long as it all arrives in one chunk).</span>
    response = s.readpartial(<span style="color:#00D">4096</span>) <span style="color:#777"># Read server's response</span>
    puts(response.chop)            <span style="color:#777"># Display response to user</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">rescue</span>           <span style="color:#777"># If anything goes wrong</span>
  puts <span style="color:#d70">$!</span>        <span style="color:#777"># Display the exception to the user</span>
<span style="color:#080;font-weight:bold">ensure</span>           <span style="color:#777"># And no matter what happens</span>
  s.close <span style="color:#080;font-weight:bold">if</span> s   <span style="color:#777"># Don't forget to close the socket</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="a-multiplexing-server">9.8.5 A Multiplexing Server</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># This server reads a line of input from a client, reverses</span>
<span style="color:#777"># the line and sends it back. If the client sends the string &quot;quit&quot;</span>
<span style="color:#777"># it disconnects. It uses Kernel.select to handle multiple sessions.</span>

require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">socket</span><span style="color:#710">'</span></span>           

server = <span style="color:#036;font-weight:bold">TCPServer</span>.open(<span style="color:#00D">2000</span>) <span style="color:#777"># Listen on port 2000</span>
sockets = [server]            <span style="color:#777"># An array of sockets we'll monitor</span>
log = <span style="color:#069">STDOUT</span>                  <span style="color:#777"># Send log messages to standard out</span>
<span style="color:#080;font-weight:bold">while</span> <span style="color:#069">true</span>                    <span style="color:#777"># Servers loop forever</span>
  ready = select(sockets)     <span style="color:#777"># Wait for a socket to be ready</span>
  readable = ready[<span style="color:#00D">0</span>]         <span style="color:#777"># These sockets are readable</span>

  readable.each <span style="color:#080;font-weight:bold">do</span> |socket|         <span style="color:#777"># Loop through readable sockets</span>
    <span style="color:#080;font-weight:bold">if</span> socket == server             <span style="color:#777"># If the server socket is ready</span>
      client = server.accept        <span style="color:#777"># Accept a new client</span>
      sockets &lt;&lt; client             <span style="color:#777"># Add it to the set of sockets</span>
      <span style="color:#777"># Tell the client what and where it has connected.</span>
      client.puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Reversal service v0.01 running on </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span><span style="color:#036;font-weight:bold">Socket</span>.gethostname<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>
      <span style="color:#777"># And log the fact that the client connected</span>
      log.puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Accepted connection from </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>client.peeraddr[<span style="color:#00D">2</span>]<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>
    <span style="color:#080;font-weight:bold">else</span>                            <span style="color:#777"># Otherwise, a client is ready</span>
      input = socket.gets           <span style="color:#777"># Read input from the client</span>

      <span style="color:#777"># If no input, the client has disconnected</span>
      <span style="color:#080;font-weight:bold">if</span> !input   
        log.puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Client on </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>socket.peeraddr[<span style="color:#00D">2</span>]<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20"> disconnected.</span><span style="color:#710">&quot;</span></span>
        sockets.delete(socket)      <span style="color:#777"># Stop monitoring this socket</span>
        socket.close                <span style="color:#777"># Close it</span>
        <span style="color:#080;font-weight:bold">next</span>                        <span style="color:#777"># And go on to the next</span>
      <span style="color:#080;font-weight:bold">end</span>

      input.chop!                   <span style="color:#777"># Trim client's input</span>
      <span style="color:#080;font-weight:bold">if</span> (input == <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">quit</span><span style="color:#710">&quot;</span></span>)          <span style="color:#777"># If the client asks to quit</span>
        socket.puts(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Bye!</span><span style="color:#710">&quot;</span></span>);        <span style="color:#777"># Say goodbye</span>
        log.puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Closing connection to </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>socket.peeraddr[<span style="color:#00D">2</span>]<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>
        sockets.delete(socket)      <span style="color:#777"># Stop monitoring the socket</span>
        socket.close                <span style="color:#777"># Terminate the session</span>
      <span style="color:#080;font-weight:bold">else</span>                          <span style="color:#777"># Otherwise, client is not quitting</span>
        socket.puts(input.reverse)  <span style="color:#777"># So reverse input and send it back</span>
      <span style="color:#080;font-weight:bold">end</span>
    <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="fetching-web-pages">9.8.6 Fetching Web Pages</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">socket</span><span style="color:#710">'</span></span>           <span style="color:#777"># We need sockets</span>
 
host = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">www.example.com</span><span style="color:#710">'</span></span>   <span style="color:#777"># The web server</span>
port = <span style="color:#00D">80</span>                  <span style="color:#777"># Default HTTP port</span>
path = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/index.html</span><span style="color:#710">&quot;</span></span>       <span style="color:#777"># The file we want </span>

<span style="color:#777"># This is the HTTP request we send to fetch a file</span>
request = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">GET </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>path<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20"> HTTP/1.0</span><span style="color:#b0b">\r</span><span style="color:#b0b">\n</span><span style="color:#b0b">\r</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>

socket = <span style="color:#036;font-weight:bold">TCPSocket</span>.open(host,port)  <span style="color:#777"># Connect to server</span>
socket.print(request)               <span style="color:#777"># Send request</span>
response = socket.read              <span style="color:#777"># Read complete response</span>
<span style="color:#777"># Split response at first blank line into headers and body</span>
headers,body = response.split(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\r</span><span style="color:#b0b">\n</span><span style="color:#b0b">\r</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, <span style="color:#00D">2</span>) 
print body                          <span style="color:#777"># And display it</span>
<span style="color:#777">###########################</span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">net/http</span><span style="color:#710">'</span></span>         <span style="color:#777"># The library we need</span>
host = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">www.example.com</span><span style="color:#710">'</span></span>   <span style="color:#777"># The web server</span>
path = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">/index.html</span><span style="color:#710">'</span></span>       <span style="color:#777"># The file we want </span>

http = <span style="color:#036;font-weight:bold">Net</span>::<span style="color:#036;font-weight:bold">HTTP</span>.new(host)      <span style="color:#777"># Create a connection</span>
headers, body = http.get(path)  <span style="color:#777"># Request the file</span>
<span style="color:#080;font-weight:bold">if</span> headers.code == <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">200</span><span style="color:#710">&quot;</span></span>        <span style="color:#777"># Check the status code   </span>
                                <span style="color:#777"># NOTE: code is not a number!</span>
  print body                    <span style="color:#777"># Print body if we got it</span>
<span style="color:#080;font-weight:bold">else</span>                            <span style="color:#777"># Otherwise</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>headers.code<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20"> </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>headers.message<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span> <span style="color:#777"># Display error message</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">###########################</span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">open-uri</span><span style="color:#710">'</span></span>
open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">http://www.example.com/index.html</span><span style="color:#710">&quot;</span></span>) {|f|
  puts f.read
}
</pre></div>
</div>
</div>

<h4 id="threads-and-concurrency">9.9 Threads and Concurrency</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Thread #1 is running here</span>
<span style="color:#036;font-weight:bold">Thread</span>.new {
  <span style="color:#777"># Thread #2 runs this code</span>
}
<span style="color:#777"># Thread #1 runs this code</span>
</pre></div>
</div>
</div>

<h4 id="the-main-thread">9.9.1.1 The main thread</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Wait for all threads (other than the current thread and</span>
<span style="color:#777"># main thread) to stop running.</span>
<span style="color:#777"># Assumes that no new threads are started while waiting.</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">join_all</span>
  main = <span style="color:#036;font-weight:bold">Thread</span>.main        <span style="color:#777"># The main thread</span>
  current = <span style="color:#036;font-weight:bold">Thread</span>.current  <span style="color:#777"># The current thread</span>
  all = <span style="color:#036;font-weight:bold">Thread</span>.list         <span style="color:#777"># All threads still running</span>
  <span style="color:#777"># Now call join on each thread</span>
  all.each {|t| t.join <span style="color:#080;font-weight:bold">unless</span> t == current <span style="color:#080;font-weight:bold">or</span> t == main }
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="threads-and-unhandled-exceptions">9.9.1.2 Threads and unhandled exceptions</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#036;font-weight:bold">Thread</span>.abort_on_exception = <span style="color:#069">true</span>
<span style="color:#777">###########################</span>
t = <span style="color:#036;font-weight:bold">Thread</span>.new { ... }
t.abort_on_exception = <span style="color:#069">true</span>
</pre></div>
</div>
</div>

<h4 id="threads-and-variables">9.9.2 Threads and Variables</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>x = <span style="color:#00D">0</span>

t1 = <span style="color:#036;font-weight:bold">Thread</span>.new <span style="color:#080;font-weight:bold">do</span>
  <span style="color:#777"># This thread can query and set the variable x</span>
<span style="color:#080;font-weight:bold">end</span>

t2 = <span style="color:#036;font-weight:bold">Thread</span>.new <span style="color:#080;font-weight:bold">do</span>
  <span style="color:#777"># This thread and also query and set x</span>
  <span style="color:#777"># And it can query and set t1 and t2 as well.   </span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="thread-private-variables">9.9.2.1 Thread-private variables</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>n = <span style="color:#00D">1</span>
<span style="color:#080;font-weight:bold">while</span> n &lt;= <span style="color:#00D">3</span>
  <span style="color:#036;font-weight:bold">Thread</span>.new { puts n }
  n += <span style="color:#00D">1</span>
<span style="color:#080;font-weight:bold">end</span> 
<span style="color:#777">###########################</span>
n = <span style="color:#00D">1</span>
<span style="color:#080;font-weight:bold">while</span> n &lt;= <span style="color:#00D">3</span>
  <span style="color:#777"># Get a private copy of the current value of n in x</span>
  <span style="color:#036;font-weight:bold">Thread</span>.new(n) {|x| puts x }
  n += <span style="color:#00D">1</span>
<span style="color:#080;font-weight:bold">end</span> 
<span style="color:#777">###########################</span>
<span style="color:#00D">1</span>.upto(<span style="color:#00D">3</span>) {|n| <span style="color:#036;font-weight:bold">Thread</span>.new { puts n }}
</pre></div>
</div>
</div>

<h4 id="thread-local-variables">9.9.2.2 Thread-local variables</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#036;font-weight:bold">Thread</span>.current[<span style="color:#A60">:progress</span>] = bytes_received
<span style="color:#777">###########################</span>
total = <span style="color:#00D">0</span>
download_threads.each {|t| total += t[<span style="color:#A60">:progress</span>] }
<span style="color:#777">###########################</span>
total = <span style="color:#00D">0</span>
download_threads.each {|t| total += t[<span style="color:#A60">:progress</span>] <span style="color:#080;font-weight:bold">if</span> t.key?(<span style="color:#A60">:progress</span>)}
</pre></div>
</div>
</div>

<h4 id="listing-threads-and-thread-groups">9.9.5 Listing Threads and Thread Groups</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>group = <span style="color:#036;font-weight:bold">ThreadGroup</span>.new
<span style="color:#00D">3</span>.times {|n| group.add(<span style="color:#036;font-weight:bold">Thread</span>.new { do_task(n) }}
</pre></div>
</div>
</div>

<h4 id="reading-files-concurrently">9.9.6.1 Reading files concurrently</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Read files concurrently. Use with the &quot;open-uri&quot; module to fetch URLs.</span>
<span style="color:#777"># Pass an array of filenames. Returns a hash mapping filenames to content.</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">conread</span>(filenames)
  h = {}                            <span style="color:#777"># Empty hash of results</span>

  <span style="color:#777"># Create one thread for each file</span>
  filenames.each <span style="color:#080;font-weight:bold">do</span> |filename|      <span style="color:#777"># For each named file</span>
    h[filename] = <span style="color:#036;font-weight:bold">Thread</span>.new <span style="color:#080;font-weight:bold">do</span>     <span style="color:#777"># Create a thread, map to filename</span>
      open(filename) {|f| f.read }  <span style="color:#777"># Open and read the file</span>
    <span style="color:#080;font-weight:bold">end</span>                             <span style="color:#777"># Thread value is file contents</span>
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#777"># Iterate through the hash, waiting for each thread to complete.</span>
  <span style="color:#777"># Replace the thread in the hash with its value (the file contents)</span>
  h.each_pair <span style="color:#080;font-weight:bold">do</span> |filename, thread| 
    <span style="color:#080;font-weight:bold">begin</span>
      h[filename] = thread.value    <span style="color:#777"># Map filename to file contents</span>
    <span style="color:#080;font-weight:bold">rescue</span>
      h[filename] = <span style="color:#d70">$!</span>              <span style="color:#777"># Or to the exception raised</span>
    <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="a-multithreaded-server">9.9.6.2 A Multithreaded Server</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">socket</span><span style="color:#710">'</span></span>

<span style="color:#777"># This method expects a socket connected to a client.</span>
<span style="color:#777"># It reads lines from the client, reverses them and sends them back.</span>
<span style="color:#777"># Multiple threads may run this method at the same time.</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">handle_client</span>(c)
  <span style="color:#080;font-weight:bold">while</span> <span style="color:#069">true</span>
    input = c.gets.chop     <span style="color:#777"># Read a line of input from the client</span>
    <span style="color:#080;font-weight:bold">break</span> <span style="color:#080;font-weight:bold">if</span> !input         <span style="color:#777"># Exit if no more input</span>
    <span style="color:#080;font-weight:bold">break</span> <span style="color:#080;font-weight:bold">if</span> input==<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">quit</span><span style="color:#710">&quot;</span></span>  <span style="color:#777"># or if the client asks to.</span>
    c.puts(input.reverse)   <span style="color:#777"># Otherwise, respond to client.</span>
    c.flush                 <span style="color:#777"># Force our output out</span>
  <span style="color:#080;font-weight:bold">end</span>
  c.close                   <span style="color:#777"># Close the client socket</span>
<span style="color:#080;font-weight:bold">end</span>


server = <span style="color:#036;font-weight:bold">TCPServer</span>.open(<span style="color:#00D">2000</span>) <span style="color:#777"># Listen on port 2000</span>

<span style="color:#080;font-weight:bold">while</span> <span style="color:#069">true</span>                    <span style="color:#777"># Servers loop forever</span>
  client = server.accept      <span style="color:#777"># Wait for a client to connect</span>
  <span style="color:#036;font-weight:bold">Thread</span>.start(client) <span style="color:#080;font-weight:bold">do</span> |c| <span style="color:#777"># Start a new thread </span>
    handle_client(c)          <span style="color:#777"># And handle the client on that thread</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="concurrent-iterators">9.9.6.3 Concurrent iterators</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Enumerable</span>           <span style="color:#777"># Open the Enumerable module</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">conmap</span>(&amp;block)        <span style="color:#777"># Define a new method that expects a block</span>
    threads = []            <span style="color:#777"># Start with an empty array of threads</span>
    <span style="color:#069">self</span>.each <span style="color:#080;font-weight:bold">do</span> |item|     <span style="color:#777"># For each enumerable item</span>
      <span style="color:#777"># Invoke the block in a new thread, and remember the thread</span>
      threads &lt;&lt; <span style="color:#036;font-weight:bold">Thread</span>.new { block.call(item) }
    <span style="color:#080;font-weight:bold">end</span>
    <span style="color:#777"># Now map the array of threads to their values </span>
    threads.map {|t| t.value } <span style="color:#777"># And return the array of values</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">###########################</span>
<span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Enumerable</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">concurrently</span>
    map {|item| <span style="color:#036;font-weight:bold">Thread</span>.new { <span style="color:#080;font-weight:bold">yield</span> item }}.each {|t| t.join }
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">###########################</span>
h.each_pair.concurrently {|*pair| process(pair)}
</pre></div>
</div>
</div>

<h4 id="thread-exclusion-and-deadlock">9.9.7 Thread Exclusion and Deadlock</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">thread</span><span style="color:#710">'</span></span>  <span style="color:#777"># For Mutex class in Ruby 1.8</span>

<span style="color:#777"># A BankAccount has a name, a checking amount, and a savings amount.</span>
<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">BankAccount</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">init</span>(name, checking, savings)
    <span style="color:#33B">@name</span>,<span style="color:#33B">@checking</span>,<span style="color:#33B">@savings</span> = name,checking,savings 
    <span style="color:#33B">@lock</span> = <span style="color:#036;font-weight:bold">Mutex</span>.new         <span style="color:#777"># For thread safety</span>
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#777"># Lock account and transfer money from savings to checking</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">transfer_from_savings</span>(x)
    <span style="color:#33B">@lock</span>.synchronize {
      <span style="color:#33B">@savings</span> -= x
      <span style="color:#33B">@checking</span> += x
    }
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#777"># Lock account and report current balances</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">report</span>
    <span style="color:#33B">@lock</span>.synchronize {
      <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#666">#</span><span style="color:#33B">@name</span><span style="color:#b0b">\n</span><span style="color:#D20">Checking: </span><span style="color:#666">#</span><span style="color:#33B">@checking</span><span style="color:#b0b">\n</span><span style="color:#D20">Savings: </span><span style="color:#666">#</span><span style="color:#33B">@savings</span><span style="color:#710">&quot;</span></span>
    }
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="deadlock">9.9.7.1 Deadlock</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Classic deadlock: two threads and two locks</span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">thread</span><span style="color:#710">'</span></span>

m,n = <span style="color:#036;font-weight:bold">Mutex</span>.new, <span style="color:#036;font-weight:bold">Mutex</span>.new

t = <span style="color:#036;font-weight:bold">Thread</span>.new {
  m.lock
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Thread t locked Mutex m</span><span style="color:#710">&quot;</span></span>
  sleep <span style="color:#00D">1</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Thread t waiting to lock Mutex n</span><span style="color:#710">&quot;</span></span>
  n.lock
}

s = <span style="color:#036;font-weight:bold">Thread</span>.new {
  n.lock
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Thread s locked Mutex n</span><span style="color:#710">&quot;</span></span>
  sleep <span style="color:#00D">1</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Thread s waiting to lock Mutex m</span><span style="color:#710">&quot;</span></span>
  m.lock
}

t.join
s.join
</pre></div>
</div>
</div>

<h4 id="queue-and-sizedqueue">9.9.8 Queue and SizedQueue</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>a = [<span style="color:#00D">-2</span>,<span style="color:#00D">-1</span>,<span style="color:#00D">0</span>,<span style="color:#00D">1</span>,<span style="color:#00D">2</span>]
mapper = lambda {|x| x*x }             <span style="color:#777"># Compute squares</span>
injector = lambda {|total,x| total+x } <span style="color:#777"># Compute sum</span>
a.conject(<span style="color:#00D">0</span>, mapper, injector)         <span style="color:#777"># =&gt; 10</span>
<span style="color:#777">###########################</span>
<span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Enumerable</span>
  <span style="color:#777"># Concurrent inject: expects an initial value and two Procs</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">conject</span>(initial, mapper, injector)
    <span style="color:#777"># Use a Queue to pass values from mapping threads to injector thread</span>
    q = <span style="color:#036;font-weight:bold">Queue</span>.new   
    count = <span style="color:#00D">0</span>                 <span style="color:#777"># How many items?</span>
    each <span style="color:#080;font-weight:bold">do</span> |item|            <span style="color:#777"># For each item</span>
      <span style="color:#036;font-weight:bold">Thread</span>.new <span style="color:#080;font-weight:bold">do</span>           <span style="color:#777"># Create a new thread</span>
        q.enq(mapper[item])   <span style="color:#777"># Map and enqueue mapped value</span>
      <span style="color:#080;font-weight:bold">end</span>
      count += <span style="color:#00D">1</span>              <span style="color:#777"># Count items</span>
    <span style="color:#080;font-weight:bold">end</span>

    t = <span style="color:#036;font-weight:bold">Thread</span>.new <span style="color:#080;font-weight:bold">do</span>         <span style="color:#777"># Create injector thread</span>
      x = initial             <span style="color:#777"># Start with specified initial value</span>
      <span style="color:#080;font-weight:bold">while</span>(count &gt; <span style="color:#00D">0</span>)        <span style="color:#777"># Loop once for each item</span>
        x = injector[x,q.deq] <span style="color:#777"># Dequeue value and inject</span>
        count -= <span style="color:#00D">1</span>            <span style="color:#777"># Count down</span>
      <span style="color:#080;font-weight:bold">end</span>
      x                       <span style="color:#777"># Thread value is injected value</span>
    <span style="color:#080;font-weight:bold">end</span>

    t.value   <span style="color:#777"># Wait for injector thread and return its value</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="condition-variables-and-queues">9.9.9 Condition Variables and Queues</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">thread</span><span style="color:#710">'</span></span>

<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Exchanger</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">initialize</span>
    <span style="color:#777"># These variables will hold the two values to be exchanged.</span>
    <span style="color:#33B">@first_value</span> = <span style="color:#33B">@second_value</span> = <span style="color:#069">nil</span>
    <span style="color:#777"># This Mutex protects access to the exchange method.</span>
    <span style="color:#33B">@lock</span> = <span style="color:#036;font-weight:bold">Mutex</span>.new
    <span style="color:#777"># This Mutex allows us to determine whether we're the first or</span>
    <span style="color:#777"># second thread to call exchange.</span>
    <span style="color:#33B">@first</span> = <span style="color:#036;font-weight:bold">Mutex</span>.new
    <span style="color:#777"># This ConditionVariable allows the first thread to wait for</span>
    <span style="color:#777"># the arrival of the second thread.</span>
    <span style="color:#33B">@second</span> = <span style="color:#036;font-weight:bold">ConditionVariable</span>.new
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#777"># Exchange this value for the value passed by the other thread.</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">exchange</span>(value)
    <span style="color:#33B">@lock</span>.synchronize <span style="color:#080;font-weight:bold">do</span>      <span style="color:#777"># Only one thread can call this method at a time</span>
      <span style="color:#080;font-weight:bold">if</span> <span style="color:#33B">@first</span>.try_lock      <span style="color:#777"># We are the first thread</span>
        <span style="color:#33B">@first_value</span> = value  <span style="color:#777"># Store the first thread's argument</span>
        <span style="color:#777"># Now wait until the second thread arrives.</span>
        <span style="color:#777"># This temporarily unlocks the Mutex while we wait, so </span>
        <span style="color:#777"># that the second thread can call this method, too</span>
        <span style="color:#33B">@second</span>.wait(<span style="color:#33B">@lock</span>)   <span style="color:#777"># Wait for second thread </span>
        <span style="color:#33B">@first</span>.unlock         <span style="color:#777"># Get ready for the next exchange</span>
        <span style="color:#33B">@second_value</span>         <span style="color:#777"># Return the second thread's value</span>
      <span style="color:#080;font-weight:bold">else</span>                    <span style="color:#777"># Otherwise, we're the second thread</span>
        <span style="color:#33B">@second_value</span> = value <span style="color:#777"># Store the second value</span>
        <span style="color:#33B">@second</span>.signal        <span style="color:#777"># Tell the first thread we're here</span>
        <span style="color:#33B">@first_value</span>          <span style="color:#777"># Return the first thread's value</span>
      <span style="color:#080;font-weight:bold">end</span>
    <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

  </div>
</body>
</html>

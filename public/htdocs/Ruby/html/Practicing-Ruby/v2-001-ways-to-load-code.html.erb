<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/>
  <title>Practicing Ruby</title>
  <style>
    body {
      font-family: "Helvetica Neue", arial, sans-serif;
      font-size: 14px;
      line-height: 1.6;
      padding-top: 10px;
      padding-bottom: 10px;
      background-color: white;
      padding: 30px;
      color: #333;
      border: 1px solid #aaa;
      max-width: 900px;
      margin: 20px auto;
    }

    body > *:first-child {
      margin-top: 0 !important;
    }

    body > *:last-child {
      margin-bottom: 0 !important;
    }

    a {
      color: #4183C4;
      text-decoration: none;
    }

    a.absent {
      color: #cc0000;
    }

    a.anchor {
      display: block;
      padding-left: 30px;
      margin-left: -30px;
      cursor: pointer;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
    }

    h1, h2, h3, h4, h5, h6 {
      margin: 20px 0 10px;
      padding: 0;
      font-weight: bold;
      -webkit-font-smoothing: antialiased;
      cursor: text;
      position: relative;
    }

    h2:first-child, h1:first-child, h1:first-child + h2, h3:first-child, h4:first-child, h5:first-child, h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor {
      text-decoration: none;
    }

    h1 tt, h1 code {
      font-size: inherit;
    }

    h2 tt, h2 code {
      font-size: inherit;
    }

    h3 tt, h3 code {
      font-size: inherit;
    }

    h4 tt, h4 code {
      font-size: inherit;
    }

    h5 tt, h5 code {
      font-size: inherit;
    }

    h6 tt, h6 code {
      font-size: inherit;
    }

    h1 {
      font-size: 28px;
      color: black;
    }

    h2 {
      font-size: 24px;
      border-bottom: 1px solid #cccccc;
      color: black;
    }

    h3 {
      font-size: 18px;
    }

    h4 {
      font-size: 16px;
    }

    h5 {
      font-size: 14px;
    }

    h6 {
      color: #777777;
      font-size: 14px;
    }

    p, blockquote, ul, ol, dl, li, table, pre {
      margin: 3px 0;
    }

    hr {
      background: transparent url("http://tinyurl.com/bq5kskr") repeat-x 0 0;
      border: 0 none;
      color: #cccccc;
      height: 4px;
      padding: 0;
    }

    body > h2:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child + h2 {
      margin-top: 0;
      padding-top: 0;
    }

    body > h3:first-child, body > h4:first-child, body > h5:first-child, body > h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
      margin-top: 0;
      padding-top: 0;
    }

    h1 p, h2 p, h3 p, h4 p, h5 p, h6 p {
      margin-top: 0;
    }

    li p.first {
      display: inline-block;
    }

    ul, ol {
      padding-left: 30px;
    }

    ul :first-child, ol :first-child {
      margin-top: 0;
    }

    ul :last-child, ol :last-child {
      margin-bottom: 0;
    }

    dl {
      padding: 0;
    }

    dl dt {
      font-size: 14px;
      font-weight: bold;
      font-style: italic;
      padding: 0;
      margin: 15px 0 5px;
    }

    dl dt:first-child {
      padding: 0;
    }

    dl dt > :first-child {
      margin-top: 0;
    }

    dl dt > :last-child {
      margin-bottom: 0;
    }

    dl dd {
      margin: 0 0 15px;
      padding: 0 15px;
    }

    dl dd > :first-child {
      margin-top: 0;
    }

    dl dd > :last-child {
      margin-bottom: 0;
    }

    blockquote {
      border-left: 4px solid #dddddd;
      padding: 0 15px;
      color: #777777;
    }

    blockquote > :first-child {
      margin-top: 0;
    }

    blockquote > :last-child {
      margin-bottom: 0;
    }

    table {
      padding: 0;
    }
    table tr {
      border-top: 1px solid #cccccc;
      background-color: white;
      margin: 0;
      padding: 0;
    }

    table tr:nth-child(2n) {
      background-color: #f8f8f8;
    }

    table tr th {
      font-weight: bold;
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr td {
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr th :first-child, table tr td :first-child {
      margin-top: 0;
    }

    table tr th :last-child, table tr td :last-child {
      margin-bottom: 0;
    }

    img {
      max-width: 100%;
    }

    span.frame {
      display: block;
      overflow: hidden;
    }

    span.frame > span {
      border: 1px solid #dddddd;
      display: block;
      float: left;
      overflow: hidden;
      margin: 13px 0 0;
      padding: 7px;
      width: auto;
    }

    span.frame span img {
      display: block;
      float: left;
    }

    span.frame span span {
      clear: both;
      color: #333333;
      display: block;
      padding: 5px 0 0;
    }

    span.align-center {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-center > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: center;
    }

    span.align-center span img {
      margin: 0 auto;
      text-align: center;
    }

    span.align-right {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-right > span {
      display: block;
      overflow: hidden;
      margin: 13px 0 0;
      text-align: right;
    }

    span.align-right span img {
      margin: 0;
      text-align: right;
    }

    span.float-left {
      display: block;
      margin-right: 13px;
      overflow: hidden;
      float: left;
    }

    span.float-left span {
      margin: 13px 0 0;
    }

    span.float-right {
      display: block;
      margin-left: 13px;
      overflow: hidden;
      float: right;
    }

    span.float-right > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: right;
    }

    code, tt {
      font-family: "Lucida Console", "Courier New", courier;
      font-size: 12px;
      margin: 0 2px;
      padding: 3px 5px;
      white-space: nowrap;
      border: 1px solid #eaeaea;
      background-color: #f8f8f8;
      border-radius: 3px;
    }

    pre code {
      margin: 0;
      padding: 0;
      white-space: pre;
      border: none;
      background: transparent;
    }

    .highlight pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre code, pre tt {
      background-color: transparent;
      border: none;
    }

    span.line-numbers {
      margin-right: 10px;
    }

    img.logo {
      display: block;
      margin: 10px auto;
    }

    h1.logo {
      text-align: center;
      font-size: 40px;
    }
  </style>
</head>
<body>
  <div id="containter">
    <h1 class="logo">Practicing Ruby</h1>
    <img class="logo" src="../../assets/images/header.png" />
    <p>There are many ways to load Ruby code, and that has lead to confusion over the years. In this article, I will give you the backstory behind several conventions seen in the wild and share some stories about how I use those conventions in my own code.</p>

<p>The topic of code loading breaks up naturally into two subtopics: loading code
within your own project and loading code from third-party libraries. People tend
to struggle more with loading code properly within their own projects than they
do with loading code from third-party libraries, so that’s what I’ll focus on
exclusively in this issue.</p>

<p>For now, I will focus on the basic mechanics of <code>load()</code>, <code>auto_load()</code>,
<code>require()</code>, and <code>require_relative()</code>. I’ll discuss how they work so you can
then think about how they can be used within your own projects.</p>

<h3 id="kernelload">Kernel#load</h3>

<p>Suppose we have a file called <em>calendar.rb</em> that contains the code shown here:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Calendar</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">initialize</span>(month, year)
    <span style="color:#33B">@month</span> = month
    <span style="color:#33B">@year</span>  = year
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#777"># A simple wrapper around the *nix cal command.</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_s</span>
    <span style="color:#036;font-weight:bold">IO</span>.popen([<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">cal</span><span style="color:#710">&quot;</span></span>, <span style="color:#33B">@month</span>.to_s, <span style="color:#33B">@year</span>.to_s]) { |io| io.read }
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>

puts <span style="color:#036;font-weight:bold">Calendar</span>.new(<span style="color:#00D">8</span>, <span style="color:#00D">2011</span>)
</pre></div>
</div>
</div>

<p>Given an absolute path to this file, the contents will be loaded and then
executed immediately:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt;&gt; load &quot;/Users/seacreature/devel/practicing-ruby-2/calendar.rb&quot;
    August 2011
Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6
 7  8  9 10 11 12 13
14 15 16 17 18 19 20
21 22 23 24 25 26 27
28 29 30 31
</pre></div>
</div>
</div>

<p>I can also just specify a path relative to my current working directory and get the same results. That means that if <em>calendar.rb</em> is in the same directory from which I invoked my irb session, I’m able to call <code>load()</code> in the manner shown here:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt;&gt; load &quot;./calendar.rb&quot;
    August 2011
Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6
 7  8  9 10 11 12 13
14 15 16 17 18 19 20
21 22 23 24 25 26 27
28 29 30 31
</pre></div>
</div>
</div>

<p>An interesting thing about <code>load()</code> is that it does not do any checks to see
whether it has already loaded a file and will happily reload and reexecute a
file each time you tell it to. So, in practice, the implementation of <code>load()</code>
is functionally similar to the code shown here:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">fake_load</span>(file)
  eval <span style="color:#036;font-weight:bold">File</span>.read(file)
  <span style="color:#069">true</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>The main benefit of indiscriminately reloading and reexecuting code is that you
can make changes to your files and then <code>load()</code> them again within a single
session without having to restart the program that’s loading the code. So, for
example, if we changed <em>calendar.rb</em> to output August 2012 instead of August
2011, we could just load it again without restarting irb. But we’d also be
greeted with some warnings in the process:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt;&gt; load &quot;./calendar.rb&quot;
/Users/seacreature/devel/practicing-ruby-2/calendar.rb:2: 
warning: method redefined; discarding old initialize
/Users/seacreature/devel/practicing-ruby-2/calendar.rb:2: 
warning: previous definition of initialize was here
/Users/seacreature/devel/practicing-ruby-2/calendar.rb:8: 
warning: method redefined; discarding old to_s
/Users/seacreature/devel/practicing-ruby-2/calendar.rb:8:
warning: previous definition of to_s was here
August 2012
Su Mo Tu We Th Fr Sa
      1  2  3  4
5  6  7  8  9 10 11
12 13 14 15 16 17 18
19 20 21 22 23 24 25
26 27 28 29 30 31
</pre></div>
</div>
</div>

<p>If you remember that Ruby classes and modules are permanently open to
modification, these warnings should make a lot of sense. The first time we
called <code>load()</code>, it defined the <code>initialize()</code> and <code>to_s()</code> methods for the
<code>Calendar</code> class. The second time we called <code>load()</code>, that class and its methods
already existed, so it redefined them. This is not necessarily a sign of a bug,
but Ruby warns you of the possibility that it might be.</p>

<p>Ultimately, these warnings are Ruby telling you that there is probably a better
way for you to do what you’re trying to do. One interesting way to get around
the problem is to use <code>Kernel#load()</code>’s wrap functionality.  Rather than telling
you directly how it works, I’m going to show you by example and see if you can
guess what’s going on.</p>

<p>Suppose we kill our irb session and fire up a new one; we’re now back to a blank
slate. We then run the following code and see the familiar calendar output:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt;&gt; load &quot;./calendar.rb&quot;, true
    August 2012
Su Mo Tu We Th Fr Sa
          1  2  3  4
 5  6  7  8  9 10 11
12 13 14 15 16 17 18
19 20 21 22 23 24 25
26 27 28 29 30 31
</pre></div>
</div>
</div>

<p>Then we decide that we want to look a little deeper into the future so that we
know what to plan for in AD 2101. We reload the code using the same command as
before:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt;&gt; load &quot;./calendar.rb&quot;, true
    August 2101
Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6
 7  8  9 10 11 12 13
14 15 16 17 18 19 20
21 22 23 24 25 26 27
28 29 30 31
</pre></div>
</div>
</div>

<p>This time, we don’t see any warnings, so obviously something has changed. Here’s
a clue:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt;&gt; Calendar
NameError: uninitialized constant Object::Calendar
  from (irb):2
  from /.../.rvm/rubies/ruby-1.9.2-p180/bin/irb:16:in `&lt;main&gt;'
</pre></div>
</div>
</div>

<p>Surely the <code>Calendar</code> class must have been defined <em>somewhere</em>, because the
program worked as expected. So what is going on here? Take a look at the
following code; it should give you a clearer picture of what is happening:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">fake_load</span>(file)
  <span style="color:#036;font-weight:bold">Module</span>.new.module_eval(<span style="color:#036;font-weight:bold">File</span>.read(file))
  <span style="color:#069">true</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>In this implementation, our approximation of <code>load()</code> is evaluating the loaded
code in the context of an anonymous module, which essentially wraps everything
its own namespace. This step prevents any of the constants defined in the loaded
code from being defined within the global namespace, including any class or
module definitions.</p>

<p>The existence of this option is a hint that although <code>load()</code> is suitable for
code loading, it is geared more to implementing customized runners for Ruby code
than to simply loading the classes and modules in your projects. So if you’ve
been using <code>load()</code> on a daily basis, you might be using the wrong tool for the
job at least some of the time. It should be clear by the end of this article why
that is the case.</p>

<p>Now that we have looked at the most simple code loading behavior Ruby has to
offer, we will jump straight into the deep end and explore one of its most
complex options: loading code on demand via <code>Kernel#autoload</code>.</p>

<h3 id="kernelautoload">Kernel#autoload</h3>

<p>Regardless of whether you’ve used it explicitly in your own projects, the
concept of automatically loading code on demand should be familiar to anyone
familiar with Rails. In Rails, none of the classes or modules you define are
loaded until the first time they are referenced in your running program. There
are two main benefits to this design: faster startup time and delayed loading of
optional dependencies.</p>

<p>Rails uses its own customized code to accomplish this result, but the basic idea
is similar to what can be done with Ruby’s <code>autoload()</code> method. To illustrate
how <code>autoload()</code> works, let’s revisit our <code>Calendar</code> class that we began
building while discussing <code>load()</code>. This time, we have a file called
<em>calendar.rb</em> that contains only the definition of the <code>Calendar</code> class, not the
code that actually calls methods on it:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Calendar</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">initialize</span>(month, year)
    <span style="color:#33B">@month</span> = month
    <span style="color:#33B">@year</span>  = year
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#777"># A simple wrapper around the *nix cal command.</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_s</span>
    <span style="color:#036;font-weight:bold">IO</span>.popen([<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">cal</span><span style="color:#710">&quot;</span></span>, <span style="color:#33B">@month</span>.to_s, <span style="color:#33B">@year</span>.to_s]) { |io| io.read }
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>The following irb session demonstrates the behavior of <code>autoload()</code>. </p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt;&gt; autoload(:Calendar, &quot;./calendar.rb&quot;) #1
=&gt; nil
&gt;&gt; defined?(Calendar)                   #2
=&gt; nil
&gt;&gt; puts Calendar.new(8,2011)            #3
    August 2011
Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6
 7  8  9 10 11 12 13
14 15 16 17 18 19 20
21 22 23 24 25 26 27
28 29 30 31

=&gt; nil
&gt;&gt; defined?(Calendar)                   #4
=&gt; &quot;constant&quot;
</pre></div>
</div>
</div>

<p>In our first step, we set up the <code>autoload()</code> hook, instructing Ruby to load the
file <em>calendar.rb</em> at the time that the first constant lookup happens for the
Calendar constant. In the second step, we check to ensure that <code>autoload()</code> does
not actually load the file for you automatically by verifying that Calendar has
not yet been defined. Then, in our third step, we build and output our Calendar.
Last, we see that the constant is now defined.</p>

<p>This exposes us to some cool Ruby voodoo while also raising a lot of questions.
It may help to approximate how <code>autoload()</code> might be implemented in order to
wrap your head around the idea. Although the following code is evil and should
never be used for anything but educational purposes, it simulates the load on
demand behavior nicely.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#d70">$load_hooks</span> = <span style="color:#036;font-weight:bold">Hash</span>.new

<span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Kernel</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">fake_autoload</span>(constant_name, file_name)
    <span style="color:#d70">$load_hooks</span>[constant_name] = file_name
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#080;font-weight:bold">def</span> <span style="color:#036;font-weight:bold">Object</span>.<span style="color:#06B;font-weight:bold">const_missing</span>(constant)
  load <span style="color:#d70">$load_hooks</span>[constant]
  const_get(constant)
<span style="color:#080;font-weight:bold">end</span>

fake_autoload <span style="color:#A60">:Calendar</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">./calendar.rb</span><span style="color:#710">&quot;</span></span>
p <span style="color:#080;font-weight:bold">defined?</span>(<span style="color:#036;font-weight:bold">Calendar</span>)
puts <span style="color:#036;font-weight:bold">Calendar</span>.new(<span style="color:#00D">8</span>,<span style="color:#00D">2011</span>)
p <span style="color:#080;font-weight:bold">defined?</span>(<span style="color:#036;font-weight:bold">Calendar</span>)
</pre></div>
</div>
</div>

<p>After reading the previous example code and playing with it a bit, remember the
dependency on <code>const_missing()</code> and forget pretty much everything else about the
implementation. The real <code>autoload()</code> handles a lot more cases than this trivial
example gives it credit for.</p>

<p>With the <code>const_missing()</code> dependency in mind, try to guess what will happen
when the following code is run:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Calendar</span>; <span style="color:#080;font-weight:bold">end</span>

autoload <span style="color:#A60">:Calendar</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">./calendar.rb</span><span style="color:#710">&quot;</span></span>
p <span style="color:#080;font-weight:bold">defined?</span>(<span style="color:#036;font-weight:bold">Calendar</span>)
puts <span style="color:#036;font-weight:bold">Calendar</span>.new(<span style="color:#00D">8</span>,<span style="color:#00D">2011</span>)
p <span style="color:#080;font-weight:bold">defined?</span>(<span style="color:#036;font-weight:bold">Calendar</span>)
</pre></div>
</div>
</div>

<p>If you guessed that it didn’t output a nicely formatted calendar, you guessed
correctly. Below you can see that when I run this script, all the code in
<em>calendar.rb</em> never gets loaded, so the default <code>Object#initialize</code> and
<code>Object#to_s</code> are being called instead:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&quot;constant&quot;
&lt;Calendar:0x0000010086d6b0&gt;
&quot;constant&quot;
</pre></div>
</div>
</div>

<p>Because <code>autoload()</code> does not check to see whether a constant is already defined
when it registers its hook, you do not get an indication that the <em>calendar.rb</em>
file was never loaded until you actually try to use functionality defined in
that file. Thus <code>autoload()</code> is safe to use only when there is a single, uniform
place where a constant is meant to be defined; it cannot be used to
incrementally build up class or module definitions from several different source
files.</p>

<p>This sort of rigidity is frustrating, because unlike load(), which does not care
how or where you define your code, <code>autoload()</code> is much more opinionated. What
you’ve seen here is a single example of the constraints it puts on you, but it
is easy to imagine other scenarios in which <code>autoload()</code> can feel like a brittle
way to load code. I’ll leave it up to you to try to figure out some of those
issues, but feel free to ask me for some hints if you get stumped.</p>

<p>In the context of Rails—particularly when working in development mode, in which
the whole environment gets reloaded on every request—some form of automatic
loading makes sense. However, outside of that environment, the drawbacks of
<code>autoload()</code> tend to outweigh the benefits, so most Ruby projects tend to avoid
it entirely by making heavy use of <code>require()</code>.</p>

<h3 id="kernelrequire">Kernel#require()</h3>

<p>If you’ve written any code at all outside of Rails, odds are you’ve used
<code>require()</code> before. It is actually quite similar to <code>load()</code> but has a few
additional features that come in handy. To illustrate how <code>require()</code> works,
let’s revisit our original <em>calendar.rb</em> file, the one that had a bit of code to
be executed in the end of it.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Calendar</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">initialize</span>(month, year)
    <span style="color:#33B">@month</span> = month
    <span style="color:#33B">@year</span>  = year
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#777"># A simple wrapper around the *nix cal command.</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_s</span>
    <span style="color:#036;font-weight:bold">IO</span>.popen([<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">cal</span><span style="color:#710">&quot;</span></span>, <span style="color:#33B">@month</span>.to_s, <span style="color:#33B">@year</span>.to_s]) { |io| io.read }
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>

puts <span style="color:#036;font-weight:bold">Calendar</span>.new(<span style="color:#00D">8</span>, <span style="color:#00D">2011</span>)
</pre></div>
</div>
</div>

<p>If we attempt to load this code twice via <code>require()</code>, we immediately see an
important way in which it differs from <code>load()</code>.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt;&gt; require &quot;./calendar.rb&quot; #1
    August 2011
Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6
 7  8  9 10 11 12 13
14 15 16 17 18 19 20
21 22 23 24 25 26 27
28 29 30 31

=&gt; true
&gt;&gt; require &quot;./calendar.rb&quot; #2
=&gt; false
</pre></div>
</div>
</div>

<p>When I ran <code>require()</code> the first time, the familiar calendar output greeted me,
and then the function returned a true value. The second time I ran it, nothing
happened and the function returned false. This is a feature, and not a bug. The
following code is a crude approximation of what is going on under the hood in
<code>require()</code>:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#d70">$LOADED_BY_FAKE_REQUIRE</span> = <span style="color:#036;font-weight:bold">Array</span>.new

<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">fake_require</span>(file)
  full_path = <span style="color:#036;font-weight:bold">File</span>.expand_path(file)
  <span style="color:#080;font-weight:bold">return</span> <span style="color:#069">false</span> <span style="color:#080;font-weight:bold">if</span> <span style="color:#d70">$LOADED_BY_FAKE_REQUIRE</span>.include?(full_path)

  load full_path
  <span style="color:#d70">$LOADED_BY_FAKE_REQUIRE</span> &lt;&lt; full_path

  <span style="color:#080;font-weight:bold">return</span> <span style="color:#069">true</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>This behavior ensures that each file loaded by <code>require()</code> is loaded exactly
once, even if the <code>require()</code> calls appear in many places. Therefore, updates to
those files will take effect after they have been loaded once. Although this
behavior makes <code>require()</code> less suitable than <code>load()</code> for quick exploratory
code loading, it does prevent programs from needlessly reloading the same code
again and again, similar to how <code>autoload()</code> works once a constant has been
loaded.</p>

<p>Another interesting property of <code>require()</code> is that you can omit the file
extension when loading your code. Thus <code>require("./calendar")</code> will work just as
well as <code>require("./calendar.rb")</code>. Though this may seem like a small feature,
the reason it exists is that Ruby can load more than just Ruby files.
When you omit an extension on a file loaded with <code>require()</code>, it will attempt to
load the file with the “.rb” extension first, but will then cycle through the
file extensions used by C extensions as well, such as “.so”, “.o”, and “.dll”.
Despite being an obscure property, it’s one that we often take for
granted when we load certain standard libraries or third-party gems. This
behavior is another detail that separates <code>require()</code> from <code>load()</code>, as the
latter can work only with explicit file extensions.</p>

<p>The main benefit of using <code>require()</code> is that it provides the explicit,
predictable loading behavior of <code>load()</code> with the caching functionality of
<code>autoload()</code>. It also feels natural for those who use RubyGems, as the standard
way of loading libraries distributed as gems is via the patched version of
<code>Kernel#require()</code> that RubyGems provides.</p>

<p>Using <code>require()</code> will take you far, but it suffers from a pretty irritating
problem—shared by <code>load()</code> and <code>autoload()</code>—with the way it looks up files. The
<code>require_relative()</code> is meant to solve that problem, so we’ll take a look at it
now.</p>

<h3 id="kernelrequirerelative">Kernel#require_relative()</h3>

<p>Each time I referenced files using a relative path in the previous examples, I
wrote the path to explicitly reference the current working directory. If you’re
used to using Ruby 1.8, this may come as a surprise to you. If you’ve been using
Ruby 1.9.2, it may or may not appear to be the natural thing to do. However, now
is the time when I confess that it’s almost always the wrong way to go about
things.</p>

<p>Ruby 1.9.2 removes the current working directory from your path by default for
security reasons. So, in our previous example, if we attempted to write
<code>require("calendar")</code> instead of <code>require("./calendar")</code>, it would fail on Ruby
1.9.2 even if we invoked irb in the same folder as the <em>calendar.rb</em> file.
Explicitly referencing the current working directory works on both Ruby 1.8.7
and Ruby 1.9.2, which is why this convention was born. Unfortunately, it is an
antipattern, because it forces us to assume that our code will be run from a
particular place on the file system.</p>

<p>Imagine a more typically directory structure, such as this:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>lib/
  calendar.rb
  calendar/
    month.rb
    year.rb
bin/
  calendar.rb
</pre></div>
</div>
</div>

<p>We could have a <em>bin/ruby_calendar.rb</em> file that looks like this code:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lib/calendar</span><span style="color:#710">&quot;</span></span>

<span style="color:#080;font-weight:bold">case</span> <span style="color:#069">ARGV</span>.size
<span style="color:#080;font-weight:bold">when</span> <span style="color:#00D">2</span>
  puts <span style="color:#036;font-weight:bold">Calendar</span>::<span style="color:#036;font-weight:bold">Month</span>.new(<span style="color:#069">ARGV</span>[<span style="color:#00D">0</span>], <span style="color:#069">ARGV</span>[<span style="color:#00D">1</span>])
<span style="color:#080;font-weight:bold">when</span> <span style="color:#00D">1</span>
  puts <span style="color:#036;font-weight:bold">Calendar</span>::<span style="color:#036;font-weight:bold">Year</span>.new(<span style="color:#069">ARGV</span>[<span style="color:#00D">0</span>])
<span style="color:#080;font-weight:bold">else</span>
  raise <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Invalid arguments</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>Similarly, our <em>lib/calendar.rb file</em> might include <code>require()</code> calls such as
these:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lib/calendar/year</span><span style="color:#710">&quot;</span></span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lib/calendar/month</span><span style="color:#710">&quot;</span></span>
</pre></div>
</div>
</div>

<p>Now if we run <em>bin/ruby_calendar.rb</em> from the project root, things will work as
expected.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ ruby bin/ruby_calendar.rb 2011
# ...
</pre></div>
</div>
</div>

<p>But if we ran this file from any other directory, it’d fail to work as expected
because the relative paths would be evaluated relative to wherever you executed
the files from, not relative to where the files live on the file system. That
is, if you execute <em>ruby_calendar.rb</em> in the <em>bin/</em> folder, it would look for a file
called <em>bin/lib/calendar.rb</em>.</p>

<p>One way to solve this problem is to use the same mechanism that the Ruby
standard library and RubyGems uses: modify the loadpath.</p>

<p>In <em>bin/ruby_calendar.rb</em>, we rewrite our code to match this:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#d70">$LOAD_PATH</span>.unshift(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span><span style="color:#036;font-weight:bold">File</span>.dirname(<span style="color:#069">__FILE__</span>)<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20">/../lib</span><span style="color:#710">&quot;</span></span>)
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">calendar</span><span style="color:#710">&quot;</span></span>

<span style="color:#080;font-weight:bold">case</span> <span style="color:#069">ARGV</span>.size
<span style="color:#080;font-weight:bold">when</span> <span style="color:#00D">2</span>
  puts <span style="color:#036;font-weight:bold">Calendar</span>::<span style="color:#036;font-weight:bold">Month</span>.new(<span style="color:#069">ARGV</span>[<span style="color:#00D">0</span>], <span style="color:#069">ARGV</span>[<span style="color:#00D">1</span>])
<span style="color:#080;font-weight:bold">when</span> <span style="color:#00D">1</span>
  puts <span style="color:#036;font-weight:bold">Calendar</span>::<span style="color:#036;font-weight:bold">Year</span>.new(<span style="color:#069">ARGV</span>[<span style="color:#00D">0</span>])
<span style="color:#080;font-weight:bold">else</span>
  raise <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Invalid arguments</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>Because we’ve added the <em>lib/</em> folder to the lookup path for all <code>require()</code>
calls in our application, we can modify <em>lib/calendar.rb</em> to match the
following:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">calendar/year</span><span style="color:#710">&quot;</span></span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">calendar/month</span><span style="color:#710">&quot;</span></span>
</pre></div>
</div>
</div>

<p>This approach makes it possible to run the <em>ruby_calendar.rb</em> program from any
location within the file system, as long as we tell ruby where to find it. That
means you can run it directly from within the <em>bin/</em> folder, or even with an
absolute path.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre># NOTE: this is common in cron jobs.
$ ruby /Users/seacreature/devel/ruby_calendar/bin/ruby_calendar.rb
</pre></div>
</div>
</div>

<p>This approach works, and was quite common in Ruby for some time. Then, people
began to get itchy about it, because it is definitely overkill. It effectively
adds an entire folder to the <code>$LOAD_PATH</code>, giving Ruby one more place it has to
look on every require and possibly leading to unexpected naming conflicts
between libraries.</p>

<p>The solution to that problem is to not mess with the <code>$LOAD_PATH</code> in your code.
Therefore, you expect either that the <code>$LOAD_PATH</code> variable will be properly set
by the <code>-I</code> flag when you invoke ruby or irb, or that you have to write code
that dynamically determines the proper relative paths to require based on your
current working directory. The latter approach requires less effort from the end
user but makes your code ugly. Below you’ll see what people resorted to on Ruby
1.8 before a better solution came along:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># bin/ruby_calendar.rb</span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span><span style="color:#036;font-weight:bold">File</span>.dirname(<span style="color:#069">__FILE__</span>)<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20">/../lib/calendar</span><span style="color:#710">&quot;</span></span>

<span style="color:#080;font-weight:bold">case</span> <span style="color:#069">ARGV</span>.size
<span style="color:#080;font-weight:bold">when</span> <span style="color:#00D">2</span>
  puts <span style="color:#036;font-weight:bold">Calendar</span>::<span style="color:#036;font-weight:bold">Month</span>.new(<span style="color:#069">ARGV</span>[<span style="color:#00D">0</span>], <span style="color:#069">ARGV</span>[<span style="color:#00D">1</span>])
<span style="color:#080;font-weight:bold">when</span> <span style="color:#00D">1</span>
  puts <span style="color:#036;font-weight:bold">Calendar</span>::<span style="color:#036;font-weight:bold">Year</span>.new(<span style="color:#069">ARGV</span>[<span style="color:#00D">0</span>])
<span style="color:#080;font-weight:bold">else</span>
  raise <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Invalid arguments</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#777"># lib/calendar.rb</span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span><span style="color:#036;font-weight:bold">File</span>.dirname(<span style="color:#069">__FILE__</span>)<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20">/calendar/year</span><span style="color:#710">&quot;</span></span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span><span style="color:#036;font-weight:bold">File</span>.dirname(<span style="color:#069">__FILE__</span>)<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20">/calendar/month</span><span style="color:#710">&quot;</span></span>
</pre></div>
</div>
</div>

<p>Using this approach, you do not add anything to the <code>$LOAD_PATH</code> but instead
dynamically build up relative paths by referencing the <code>__FILE__</code> variable and
getting a path to the directory it’s in. This code will evaluate to different
values depending on where you run it from, but in the end, the right path will
be produced and things will just work.</p>

<p>Predictably, people took efforts to hide this sort of ugliness behind helper
functions, and one such function was eventually adopted into Ruby 1.9. That
helper is predictably called <code>require_relative()</code>. Using <code>require_relative()</code>,
we can simplify our calls significantly while preserving the “don’t touch the
<code>$LOAD_PATH</code> variable” ethos:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># bin/ruby_calendar.rb</span>
require_relative <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">../lib/calendar</span><span style="color:#710">&quot;</span></span>

<span style="color:#080;font-weight:bold">case</span> <span style="color:#069">ARGV</span>.size
<span style="color:#080;font-weight:bold">when</span> <span style="color:#00D">2</span>
  puts <span style="color:#036;font-weight:bold">Calendar</span>::<span style="color:#036;font-weight:bold">Month</span>.new(<span style="color:#069">ARGV</span>[<span style="color:#00D">0</span>], <span style="color:#069">ARGV</span>[<span style="color:#00D">1</span>])
<span style="color:#080;font-weight:bold">when</span> <span style="color:#00D">1</span>
  puts <span style="color:#036;font-weight:bold">Calendar</span>::<span style="color:#036;font-weight:bold">Year</span>.new(<span style="color:#069">ARGV</span>[<span style="color:#00D">0</span>])
<span style="color:#080;font-weight:bold">else</span>
  raise <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Invalid arguments</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#777"># lib/calendar.rb</span>
require_relative <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">calendar/year</span><span style="color:#710">&quot;</span></span>
require_relative <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">calendar/month</span><span style="color:#710">&quot;</span></span>
</pre></div>
</div>
</div>

<p>This code looks and feels like it would work in the way that we’d like to think
<code>require()</code> would work. The files we reference are relative to the file in which
the actual calls are made, rather than the folder in which the script was
executed in. For this reason, it is a much better approach than pretty much
anything I’ve shown so far.</p>

<p>Of course, it is not a perfect solution. In some cases, it does not work as
expected, such as in Rackup files. Additionally, because it’s a Ruby 1.9
feature, it’s not built into Ruby 1.8.7. The former issue cannot be worked
around, but the latter can be. I’ll go into a bit more detail about both of
these issues in the recommendations section, which is coming up right now.</p>

<h3 id="conventions-and-recommendations">Conventions and Recommendations</h3>

<p>If you remember one thing from this article, it should be that whenever it’s
possible to use <code>require_relative()</code> and there isn’t an obviously better
solution, it’s probably the right tool to reach for. It has the fewest 
dark corners and pretty much just works.</p>

<p>That said, take my advice with a grain of salt. I no longer actively
maintain any Ruby 1.8 applications, nor do I have to deal with code that must
run on both Ruby 1.8 and 1.9. If I were in those shoes again, I’d weigh
out four different possible ways of approaching things:</p>

<p>1) Explicitly use <code>require()</code> with the <code>File.dirname(__FILE__)</code> hack</p>

<p>2) Write my own <code>require_relative()</code> implementation leaning on the previous
   hack that gets defined only if <code>require_relative()</code> isn’t already
   implemented</p>

<p>3) Add a dependency for Ruby 1.8 only on the <code>require_relative</code> gem</p>

<p>4) Assume that <code>$LOAD_PATH</code> is set for me via the <code>-I</code> flag on execution,
   or some other means, and then write ordinary require calls 
   relative to the <em>lib/</em> folder in my project.</p>

<p>I can’t give an especially good picture of when I’d pick one of those options
over the other, because it’s been about a year since I’ve last had to think
about it. But any of those four options seem like at least reasonable ideas. I
would <em>not</em> employ the common but painfully ugly
<code>require("./file_in_the_working_dir.rb")</code> hack in any code that I expected to
use for anything more than a spike or demonstration.</p>

<p>Whether using <code>require_relative()</code> explicitly, or one of the workarounds listed
above, I like to use some form of relative require whenever I can. Occasionally,
I do use <code>load()</code>, particularly in spikes where I want to  reload files into an
irb session without restarting irb.  But I don’t think that <code>load()</code> ends up in
production code of mine unless there is a very good reason to use it. A possible
good reason would be if I were building some sort of script runner, such as what
you could find in Rails when it reloads your development environment or in
autotest. In the autotest case in particular in which your test files are
reloaded each time you make an edit to any of your files in your project, it
seems that using <code>load()</code> with its obscure second parameter is a good idea. But
these are not tools I’d expect to be building on a daily basis, so <code>load()</code>
remains somewhat of an obscure tool for me.</p>

<p>I never use <code>autoload()</code>. I’ve just not run into the issues that some folks in
Rails experience regarding slow startup times of applications in any way that
has mattered to me. I feel like the various gotchas that come along with using
<code>autoload()</code> and the strict conventions it enforces are not good things to
impose on general-purpose uses of Ruby. I don’t know whether I think that it
makes sense in to context of Rails, but that’s a very different question than
whether it should be used in ordinary Ruby applications and libraries. It makes
at least some sense in Rails, but in most Ruby applications, it does not. The
only time I might think about looking into <code>autoload()</code> is if I had some sort of
optional dependency that I wanted to be loaded only on demand. I have never
actually run into that issue, and I’ve found that the following hack provides a
way to do optional dependencies that seems to work just fine:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">begin</span>
  require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">some_external_dependency</span><span style="color:#710">&quot;</span></span>
  require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">my_lib/some_feature_that_depends_on_dependency</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">rescue</span> <span style="color:#036;font-weight:bold">LoadError</span>
  warn <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Could not load some_external_dependency.</span><span style="color:#710">&quot;</span></span>+
       <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> Some features are disabled</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>But really, optional dependencies are things I very rarely need to think about.
There are valid use cases for them, but unless something is very difficult to
install or your project is specifically meant to wrap various mutually exclusive
dependencies, I typically will just load up all my dependencies regardless of
whether the user ends up using them. This policy has not caused me problems,
but your mileage will vary depending on the type of work you are doing.</p>

<p>On a somewhat tangential note, I try to avoid things like dynamic require calls
in which I walk over a file list generated from something like <code>Dir.glob()</code> or
the like. I also avoid using <code>Bundler.require()</code>, even when I use bundler. The
reason I avoid these things is because I like to be able control the exact order
in which my files and my dependencies are being loaded. It’s possible to not
have to worry about this sort of thing, but doing so requires a highly
disciplined way of organizing your code so that files can be loaded
independently. </p>

<h3 id="questions--feedback">Questions / Feedback</h3>

<p>I hope this background story about the various ways to load code along with the
few bits of advice I’ve offered in the end here have been useful to you. I am
happy to answer whatever questions you have; just leave a comment below.</p>

  </div>
</body>
</html>

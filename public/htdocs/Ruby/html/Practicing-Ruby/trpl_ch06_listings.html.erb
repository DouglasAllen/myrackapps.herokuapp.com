<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/>
  
  <style>
    body {
      font-family: "Helvetica Neue", arial, sans-serif;
      font-size: 14px;
      line-height: 1.6;
      padding-top: 10px;
      padding-bottom: 10px;
      background-color: white;
      padding: 30px;
      color: #333;
      border: 1px solid #aaa;
      max-width: 900px;
      margin: 20px auto;
    }

    body > *:first-child {
      margin-top: 0 !important;
    }

    body > *:last-child {
      margin-bottom: 0 !important;
    }

    a {
      color: #4183C4;
      text-decoration: none;
    }

    a.absent {
      color: #cc0000;
    }

    a.anchor {
      display: block;
      padding-left: 30px;
      margin-left: -30px;
      cursor: pointer;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
    }

    h1, h2, h3, h4, h5, h6 {
      margin: 20px 0 10px;
      padding: 0;
      font-weight: bold;
      -webkit-font-smoothing: antialiased;
      cursor: text;
      position: relative;
    }

    h2:first-child, h1:first-child, h1:first-child + h2, h3:first-child, h4:first-child, h5:first-child, h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor {
      text-decoration: none;
    }

    h1 tt, h1 code {
      font-size: inherit;
    }

    h2 tt, h2 code {
      font-size: inherit;
    }

    h3 tt, h3 code {
      font-size: inherit;
    }

    h4 tt, h4 code {
      font-size: inherit;
    }

    h5 tt, h5 code {
      font-size: inherit;
    }

    h6 tt, h6 code {
      font-size: inherit;
    }

    h1 {
      font-size: 28px;
      color: black;
    }

    h2 {
      font-size: 24px;
      border-bottom: 1px solid #cccccc;
      color: black;
    }

    h3 {
      font-size: 18px;
    }

    h4 {
      font-size: 16px;
    }

    h5 {
      font-size: 14px;
    }

    h6 {
      color: #777777;
      font-size: 14px;
    }

    p, blockquote, ul, ol, dl, li, table, pre {
      margin: 3px 0;
    }

    hr {
      background: transparent url("http://tinyurl.com/bq5kskr") repeat-x 0 0;
      border: 0 none;
      color: #cccccc;
      height: 4px;
      padding: 0;
    }

    body > h2:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child + h2 {
      margin-top: 0;
      padding-top: 0;
    }

    body > h3:first-child, body > h4:first-child, body > h5:first-child, body > h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
      margin-top: 0;
      padding-top: 0;
    }

    h1 p, h2 p, h3 p, h4 p, h5 p, h6 p {
      margin-top: 0;
    }

    li p.first {
      display: inline-block;
    }

    ul, ol {
      padding-left: 30px;
    }

    ul :first-child, ol :first-child {
      margin-top: 0;
    }

    ul :last-child, ol :last-child {
      margin-bottom: 0;
    }

    dl {
      padding: 0;
    }

    dl dt {
      font-size: 14px;
      font-weight: bold;
      font-style: italic;
      padding: 0;
      margin: 15px 0 5px;
    }

    dl dt:first-child {
      padding: 0;
    }

    dl dt > :first-child {
      margin-top: 0;
    }

    dl dt > :last-child {
      margin-bottom: 0;
    }

    dl dd {
      margin: 0 0 15px;
      padding: 0 15px;
    }

    dl dd > :first-child {
      margin-top: 0;
    }

    dl dd > :last-child {
      margin-bottom: 0;
    }

    blockquote {
      border-left: 4px solid #dddddd;
      padding: 0 15px;
      color: #777777;
    }

    blockquote > :first-child {
      margin-top: 0;
    }

    blockquote > :last-child {
      margin-bottom: 0;
    }

    table {
      padding: 0;
    }
    table tr {
      border-top: 1px solid #cccccc;
      background-color: white;
      margin: 0;
      padding: 0;
    }

    table tr:nth-child(2n) {
      background-color: #f8f8f8;
    }

    table tr th {
      font-weight: bold;
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr td {
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr th :first-child, table tr td :first-child {
      margin-top: 0;
    }

    table tr th :last-child, table tr td :last-child {
      margin-bottom: 0;
    }

    img {
      max-width: 100%;
    }

    span.frame {
      display: block;
      overflow: hidden;
    }

    span.frame > span {
      border: 1px solid #dddddd;
      display: block;
      float: left;
      overflow: hidden;
      margin: 13px 0 0;
      padding: 7px;
      width: auto;
    }

    span.frame span img {
      display: block;
      float: left;
    }

    span.frame span span {
      clear: both;
      color: #333333;
      display: block;
      padding: 5px 0 0;
    }

    span.align-center {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-center > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: center;
    }

    span.align-center span img {
      margin: 0 auto;
      text-align: center;
    }

    span.align-right {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-right > span {
      display: block;
      overflow: hidden;
      margin: 13px 0 0;
      text-align: right;
    }

    span.align-right span img {
      margin: 0;
      text-align: right;
    }

    span.float-left {
      display: block;
      margin-right: 13px;
      overflow: hidden;
      float: left;
    }

    span.float-left span {
      margin: 13px 0 0;
    }

    span.float-right {
      display: block;
      margin-left: 13px;
      overflow: hidden;
      float: right;
    }

    span.float-right > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: right;
    }

    code, tt {
      font-family: "Lucida Console", "Courier New", courier;
      font-size: 12px;
      margin: 0 2px;
      padding: 3px 5px;
      white-space: nowrap;
      border: 1px solid #eaeaea;
      background-color: #f8f8f8;
      border-radius: 3px;
    }

    pre code {
      margin: 0;
      padding: 0;
      white-space: pre;
      border: none;
      background: transparent;
    }

    .highlight pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre code, pre tt {
      background-color: transparent;
      border: none;
    }

    span.line-numbers {
      margin-right: 10px;
    }

    img.logo {
      display: block;
      margin: 10px auto;
    }

    h1.logo {
      text-align: center;
      font-size: 40px;
    }
  </style>
</head>
<body>
  <div id="containter">
    
    <h1 id="the-ruby-programming-language">The Ruby Programming Language</h1>

<h2 id="chapter-6">CHAPTER 6</h2>

<h3 id="methods-procs-lambdas-and-closures">Methods, Procs, Lambdas, and Closures</h3>

<h4 id="defining-simple-methods">6.1 Defining Simple Methods</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Define a method named 'factorial' with a single parameter 'n'</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">factorial</span>(n)
  <span style="color:#080;font-weight:bold">if</span> n &lt; <span style="color:#00D">1</span>                <span style="color:#777"># Test the argument value for validity</span>
    raise <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">argument must be &gt; 0</span><span style="color:#710">&quot;</span></span>
  <span style="color:#080;font-weight:bold">elsif</span> n == <span style="color:#00D">1</span>            <span style="color:#777"># If the argument is 1</span>
    <span style="color:#00D">1</span>                     <span style="color:#777"># then the value of the method invocation is 1</span>
  <span style="color:#080;font-weight:bold">else</span>                    <span style="color:#777"># Otherwise, the factorial of n is n times</span>
    n * factorial(n-<span style="color:#00D">1</span>)    <span style="color:#777"># the factorial of n-1</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="method-return-value">6.1.1 Method Return Value</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">factorial</span>(n)
  raise <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">bad argument</span><span style="color:#710">&quot;</span></span> <span style="color:#080;font-weight:bold">if</span> n &lt; <span style="color:#00D">1</span>
  <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">1</span> <span style="color:#080;font-weight:bold">if</span> n == <span style="color:#00D">1</span>
  n * factorial(n-<span style="color:#00D">1</span>)
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
<span style="color:#777"># Convert the Cartesian point (x,y) to polar (magnitude, angle) coordinates</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">polar</span>(x,y)
  <span style="color:#080;font-weight:bold">return</span> <span style="color:#036;font-weight:bold">Math</span>.hypot(y,x), <span style="color:#036;font-weight:bold">Math</span>.atan2(y,x)
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
<span style="color:#777"># Convert polar coordinates to Cartesian coordinates</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">cartesian</span>(magnitude, angle)
  [magnitude*<span style="color:#036;font-weight:bold">Math</span>.cos(angle), magnitude*<span style="color:#036;font-weight:bold">Math</span>.sin(angle)]
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
distance, theta = polar(x,y)
x,y = cartesian(distance,theta)
</pre></div>
</div>
</div>

<h4 id="invoking-a-method-on-an-object">6.1.3 Invoking a Method on an Object</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>first = text.index(pattern)
</pre></div>
</div>
</div>

<h4 id="defining-singleton-methods">6.1.4 Defining Singleton Methods</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>o = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">message</span><span style="color:#710">&quot;</span></span>    <span style="color:#777"># A string is an object</span>
<span style="color:#080;font-weight:bold">def</span> o.<span style="color:#06B;font-weight:bold">printme</span>    <span style="color:#777"># Define a singleton method for this object</span>
  puts <span style="color:#069">self</span>
<span style="color:#080;font-weight:bold">end</span>
o.printme        <span style="color:#777"># Invoke the singleton </span>
</pre></div>
</div>
</div>

<h4 id="undefining-methods">6.1.5 Undefining Methods</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">sum</span>(x,y); x+y; <span style="color:#080;font-weight:bold">end</span>      <span style="color:#777"># Define a method</span>
puts sum(<span style="color:#00D">1</span>,<span style="color:#00D">2</span>)               <span style="color:#777"># Use it</span>
<span style="color:#080;font-weight:bold">undef</span> <span style="color:#06B;font-weight:bold">sum</span>                   <span style="color:#777"># And undefine it</span>
</pre></div>
</div>
</div>

<h4 id="operator-methods">6.2.1 Operator Methods</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">+</span>(other)               <span style="color:#777"># Define binary plus operator: x+y is x.+(y)</span>
  <span style="color:#069">self</span>.concatenate(other)
<span style="color:#080;font-weight:bold">end</span>       
</pre></div>
</div>
</div>

<h4 id="method-aliases">6.2.2 Method Aliases</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">alias</span> <span style="color:#06B;font-weight:bold">aka</span> <span style="color:#06B;font-weight:bold">also_known_as</span>   <span style="color:#777"># alias new_name existing_name</span>
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">hello</span>                       <span style="color:#777"># A nice simple method</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Hello World</span><span style="color:#710">&quot;</span></span>            <span style="color:#777"># Suppose we want to augment it...</span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#080;font-weight:bold">alias</span> <span style="color:#06B;font-weight:bold">original_hello</span> <span style="color:#06B;font-weight:bold">hello</span>      <span style="color:#777"># Give the method a backup name</span>

<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">hello</span>                       <span style="color:#777"># Now we define a new method with the old name</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Your attention please</span><span style="color:#710">&quot;</span></span>  <span style="color:#777"># That does some stuff</span>
  original_hello                <span style="color:#777"># Then calls the original method</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">This has been a test</span><span style="color:#710">&quot;</span></span>   <span style="color:#777"># Then does some more stuff</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="optional-parentheses">6.3.1 Optional Parentheses</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Hello World</span><span style="color:#710">&quot;</span></span>
puts(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Hello World</span><span style="color:#710">&quot;</span></span>)
<span style="color:#777">################################</span>
greeting = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Hello</span><span style="color:#710">&quot;</span></span>
size = greeting.length
<span style="color:#777">################################</span>
size = greeting.length()
<span style="color:#777">################################</span>
x = <span style="color:#00D">3</span>              <span style="color:#777"># x is a number</span>
x.between? <span style="color:#00D">1</span>,<span style="color:#00D">5</span>     <span style="color:#777"># same as x.between?(1,5)</span>
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">sum</span> x, y
  x+y
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="required-parentheses">6.3.2 Required Parentheses</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>puts sum <span style="color:#00D">2</span>, <span style="color:#00D">2</span>
<span style="color:#777">################################</span>
puts sum(<span style="color:#00D">2</span>,<span style="color:#00D">2</span>)
<span style="color:#777">################################</span>
puts(sum <span style="color:#00D">2</span>,<span style="color:#00D">2</span>)   <span style="color:#777"># Does this mean puts(sum(2,2)) or puts(sum(2), 2)?</span>
<span style="color:#777">################################</span>
puts factorial x   <span style="color:#777"># This can only mean puts(factorial(x))</span>
<span style="color:#777">################################</span>
puts <span style="color:#00D">4</span>, sum <span style="color:#00D">2</span>,<span style="color:#00D">2</span>   <span style="color:#777"># Error: does the second comma go with the 1st or 2nd method?</span>
[sum <span style="color:#00D">2</span>,<span style="color:#00D">2</span>]         <span style="color:#777"># Error: two array elements or one?</span>
<span style="color:#777">################################</span>
square(<span style="color:#00D">2</span>+<span style="color:#00D">2</span>)*<span style="color:#00D">2</span>    <span style="color:#777"># square(4)*2 = 16*2 = 32</span>
square (<span style="color:#00D">2</span>+<span style="color:#00D">2</span>)*<span style="color:#00D">2</span>   <span style="color:#777"># square(4*2) = square(8) = 64</span>
<span style="color:#777">################################</span>
square((<span style="color:#00D">2</span>+<span style="color:#00D">2</span>)*<span style="color:#00D">2</span>)
<span style="color:#777">################################</span>
puts(sum <span style="color:#00D">2</span>,<span style="color:#00D">2</span>)   <span style="color:#777"># Does this mean puts(sum(2,2)) or puts(sum(2), 2)?</span>
<span style="color:#777">################################</span>
puts (sum <span style="color:#00D">2</span>,<span style="color:#00D">2</span>)   
</pre></div>
</div>
</div>

<h4 id="parameter-defaults">6.4.1 Parameter Defaults</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">prefix</span>(s, len=<span style="color:#00D">1</span>)
  s[<span style="color:#00D">0</span>,len]
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
prefix(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Ruby</span><span style="color:#710">&quot;</span></span>, <span style="color:#00D">3</span>)    <span style="color:#777"># =&gt; &quot;Rub&quot;</span>
prefix(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Ruby</span><span style="color:#710">&quot;</span></span>)       <span style="color:#777"># =&gt; &quot;R&quot;</span>
<span style="color:#777">################################</span>
<span style="color:#777"># Return the last character of s or the substring from index to the end</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">suffix</span>(s, index=s.size-<span style="color:#00D">1</span>)
  s[index, s.size-index]
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
<span style="color:#777"># Append the value x to the array a, return a.</span>
<span style="color:#777"># If no array is specified, start with an empty one.</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">append</span>(x, a=[])
  a &lt;&lt; x
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="variable-length-argument-lists-and-arrays">6.4.2 Variable-Length Argument Lists and Arrays</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Return the largest of the one or more arguments passed</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">max</span>(first, *rest)
  <span style="color:#777"># Assume that the required first argument is the largest</span>
  max = first
  <span style="color:#777"># Now loop through each of the optional arguments looking for bigger ones</span>
  rest.each {|x| max = x <span style="color:#080;font-weight:bold">if</span> x &gt; max }
  <span style="color:#777"># Return the largest one we found</span>
  max
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
max(<span style="color:#00D">1</span>)       <span style="color:#777"># first=1, rest=[]   </span>
max(<span style="color:#00D">1</span>,<span style="color:#00D">2</span>)     <span style="color:#777"># first=1, rest=[2]  </span>
max(<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>)   <span style="color:#777"># first=1, rest=[2,3]</span>
--------------------------

<span style="color:#777">#### 6.4.2.1 Passing arrays to methods</span>

~~~ruby
data = [<span style="color:#00D">3</span>, <span style="color:#00D">2</span>, <span style="color:#00D">1</span>]
m = max(*data)   <span style="color:#777"># first = 3, rest=[2,1] =&gt; 3</span>
<span style="color:#777">################################</span>
m = max(data)   <span style="color:#777"># first = [3,2,1], rest=[] =&gt; [3,2,1]</span>
<span style="color:#777">################################</span>
<span style="color:#777"># Convert the point (x,y) to Polar coordinates, then back to Cartesian</span>
x,y = cartesian(*polar(x, y))
<span style="color:#777">################################</span>
max(*<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello world</span><span style="color:#710">&quot;</span></span>.each_char)  <span style="color:#777"># =&gt; 'w'</span>
</pre></div>
</div>
</div>

<h4 id="hashes-for-named-arguments">6.4.4 Hashes for Named Arguments</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># This method returns an array a of n numbers. For any index i, 0 &lt;= i &lt; n,</span>
<span style="color:#777"># the value of element a[i] is m*i+c. Arguments n, m, and c are passed</span>
<span style="color:#777"># as keys in a hash, so that it is not necessary to remember their order.</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">sequence</span>(args)
  <span style="color:#777"># Extract the arguments from the hash.</span>
  <span style="color:#777"># Note the use of the || operator to specify defaults used</span>
  <span style="color:#777"># if the hash does not define a key that we are interested in.</span>
  n = args[<span style="color:#A60">:n</span>] || <span style="color:#00D">0</span>
  m = args[<span style="color:#A60">:m</span>] || <span style="color:#00D">1</span>
  c = args[<span style="color:#A60">:c</span>] || <span style="color:#00D">0</span>

  a = []                      <span style="color:#777"># Start with an empty array</span>
  n.times {|i| a &lt;&lt; m*i+c }   <span style="color:#777"># Calculate the value of each array element</span>
  a                           <span style="color:#777"># Return the array</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
sequence({<span style="color:#A60">:n</span>=&gt;<span style="color:#00D">3</span>, <span style="color:#A60">:m</span>=&gt;<span style="color:#00D">5</span>})      <span style="color:#777"># =&gt; [0, 5, 10]</span>
<span style="color:#777">################################</span>
sequence(<span style="color:#A60">:m</span>=&gt;<span style="color:#00D">3</span>, <span style="color:#A60">:n</span>=&gt;<span style="color:#00D">5</span>)        <span style="color:#777"># =&gt; [0, 3, 6, 9, 12]</span>
<span style="color:#777">################################</span>
<span style="color:#777"># Ruby 1.9 hash syntax</span>
sequence <span style="color:#606">c</span>:<span style="color:#00D">1</span>, <span style="color:#606">m</span>:<span style="color:#00D">3</span>, <span style="color:#606">n</span>:<span style="color:#00D">5</span>        <span style="color:#777"># =&gt; [1, 4, 7, 10, 13]</span>
<span style="color:#777">################################</span>
sequence {<span style="color:#A60">:m</span>=&gt;<span style="color:#00D">3</span>, <span style="color:#A60">:n</span>=&gt;<span style="color:#00D">5</span>}       <span style="color:#777"># Syntax error!</span>
</pre></div>
</div>
</div>

<h4 id="block-arguments">6.4.5 Block Arguments</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Generate a sequence of n numbers m*i + c and pass them to the block</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">sequence2</span>(n, m, c) 
  i = <span style="color:#00D">0</span>
  <span style="color:#080;font-weight:bold">while</span>(i &lt; n)         <span style="color:#777"># loop n times</span>
    <span style="color:#080;font-weight:bold">yield</span> i*m + c      <span style="color:#777"># pass next element of the sequence to the block</span>
    i += <span style="color:#00D">1</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#777"># Here is how you might use this version of the method</span>
sequence2(<span style="color:#00D">5</span>, <span style="color:#00D">2</span>, <span style="color:#00D">2</span>) {|x| puts x }  <span style="color:#777"># Print numbers 2, 4, 6, 8, 10</span>
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">sequence3</span>(n, m, c, &amp;b) <span style="color:#777"># Explicit argument to get block as a Proc</span>
  i = <span style="color:#00D">0</span>
  <span style="color:#080;font-weight:bold">while</span>(i &lt; n)
    b.call(i*m + c)        <span style="color:#777"># Invoke the Proc with its call method</span>
    i += <span style="color:#00D">1</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#777"># Note that the block is still passed outside of the parentheses</span>
sequence3(<span style="color:#00D">5</span>, <span style="color:#00D">2</span>, <span style="color:#00D">2</span>) {|x| puts x }
<span style="color:#777">################################</span>
<span style="color:#777"># This version expects an explicitly-created Proc object, not a block</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">sequence4</span>(n, m, c, b)  <span style="color:#777"># No ampersand used for argument b</span>
  i = <span style="color:#00D">0</span>
  <span style="color:#080;font-weight:bold">while</span>(i &lt; n)
    b.call(i*m + c)        <span style="color:#777"># Proc is called explicitly</span>
    i += <span style="color:#00D">1</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>

p = <span style="color:#036;font-weight:bold">Proc</span>.new {|x| puts x }  <span style="color:#777"># Explicitly create a Proc object </span>
sequence4(<span style="color:#00D">5</span>, <span style="color:#00D">2</span>, <span style="color:#00D">2</span>, p)       <span style="color:#777"># And pass it as an ordinary argument</span>
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">sequence5</span>(args, &amp;b) <span style="color:#777"># Pass arguments as a hash and follow with a block</span>
  n, m, c = args[<span style="color:#A60">:n</span>], args[<span style="color:#A60">:m</span>], args[<span style="color:#A60">:c</span>]
  i = <span style="color:#00D">0</span>
  <span style="color:#080;font-weight:bold">while</span>(i &lt; n)
    b.call(i*m + c)
    i += <span style="color:#00D">1</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#777"># Expects one or more arguments, followed by a block</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">max</span>(first, *rest, &amp;block) 
  max = first
  rest.each {|x| max = x <span style="color:#080;font-weight:bold">if</span> x &gt; max }
  block.call(max)
  max
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="using--in-method-invocation">6.4.5.1 Using &amp; in method invocation</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>a, b = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>], [<span style="color:#00D">4</span>,<span style="color:#00D">5</span>]                     <span style="color:#777"># Start with some data.</span>
sum = a.inject(<span style="color:#00D">0</span>) {|total,x| total+x }    <span style="color:#777"># =&gt; 6. Sum elements of a.</span>
sum = b.inject(sum) {|total,x| total+x }  <span style="color:#777"># =&gt; 15. Add the elements of b in.</span>
<span style="color:#777">################################</span>
a, b = [<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>], [<span style="color:#00D">4</span>,<span style="color:#00D">5</span>]                     <span style="color:#777"># Start with some data.</span>
summation = <span style="color:#036;font-weight:bold">Proc</span>.new {|total,x| total+x } <span style="color:#777"># A Proc object for summations.</span>
sum = a.inject(<span style="color:#00D">0</span>, &amp;summation)             <span style="color:#777"># =&gt; 6</span>
sum = b.inject(sum, &amp;summation)           <span style="color:#777"># =&gt; 15</span>
<span style="color:#777">################################</span>
words = [<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">and</span><span style="color:#710">'</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">but</span><span style="color:#710">'</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">car</span><span style="color:#710">'</span></span>]     <span style="color:#777"># An array of words</span>
uppercase = words.map &amp;<span style="color:#A60">:upcase</span>    <span style="color:#777"># Convert to uppercase with String.upcase</span>
upper = words.map {|w| w.upcase } <span style="color:#777"># This is the equivalent code with a block</span>
</pre></div>
</div>
</div>

<h4 id="creating-procs">6.5.1 Creating Procs</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># This method creates a proc from a block</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">makeproc</span>(&amp;p)  <span style="color:#777"># Convert associated block to a Proc and store in p</span>
  p               <span style="color:#777"># Return the Proc object</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
adder = makeproc {|x,y| x+y }
<span style="color:#777">################################</span>
sum = adder.call(<span style="color:#00D">2</span>,<span style="color:#00D">2</span>)  <span style="color:#777"># =&gt; 4</span>
</pre></div>
</div>
</div>

<h4 id="procnew">6.5.1.1 Proc.new</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>p = <span style="color:#036;font-weight:bold">Proc</span>.new {|x,y| x+y }
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">invoke</span>(&amp;b)     <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">invoke</span>
  b.call             <span style="color:#036;font-weight:bold">Proc</span>.new.call
<span style="color:#080;font-weight:bold">end</span>                <span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h4 id="kernellambda">6.5.1.2 Kernel.lambda</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>is_positive = lambda {|x| x &gt; <span style="color:#00D">0</span> }
</pre></div>
</div>
</div>

<h4 id="lambda-literals">6.5.1.4 Lambda Literals</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>succ = lambda {|x| x+<span style="color:#00D">1</span>}
<span style="color:#777">################################</span>
succ = -&gt;(x){ x+<span style="color:#00D">1</span> }
<span style="color:#777">################################</span>
succ.call(<span style="color:#00D">2</span>)    <span style="color:#777"># =&gt; 3</span>
<span style="color:#777">################################</span>
<span style="color:#777"># This lambda takes 2 args and declares 3 local vars</span>
f = -&gt;(x,y; i,j,k) { ... }
<span style="color:#777">################################</span>
zoom = -&gt;(x,y,factor=<span style="color:#00D">2</span>) { [x*factor, y*factor] }
<span style="color:#777">################################</span>
succ = -&gt;x { x+<span style="color:#00D">1</span> }
f = -&gt; x,y; i,j,k { ... }
zoom = -&gt;x,y,factor=<span style="color:#00D">2</span> { [x*factor, y*factor] }
<span style="color:#777">################################</span>
-&gt;{}
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">compose</span>(f,g)            <span style="color:#777"># Compose 2 lambdas </span>
  -&gt;(x) { f.call(g.call(x)) }
<span style="color:#080;font-weight:bold">end</span>
succOfSquare = compose(-&gt;x{x+<span style="color:#00D">1</span>}, -&gt;x{x*x})
succOfSquare.call(<span style="color:#00D">4</span>)        <span style="color:#777"># =&gt; 17: Computes (4*4)+1</span>
<span style="color:#777">################################</span>
data.sort {|a,b| b-a }   <span style="color:#777"># The block version</span>
data.sort &amp;-&gt;(a,b){ b-a } <span style="color:#777"># The lambda literal version</span>
</pre></div>
</div>
</div>

<h4 id="invoking-procs-and-lambdas">6.5.2 Invoking Procs and Lambdas</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>f = <span style="color:#036;font-weight:bold">Proc</span>.new {|x,y| <span style="color:#60E">1.0</span>/(<span style="color:#60E">1.0</span>/x + <span style="color:#60E">1.0</span>/y) }
z = f.call(x,y)
<span style="color:#777">################################</span>
z = f[x,y]
<span style="color:#777">################################</span>
z = f.(x,y)
</pre></div>
</div>
</div>

<h4 id="the-arity-of-a-proc">6.5.3 The Arity of a Proc</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>lambda{||}.arity        <span style="color:#777"># =&gt; 0. No arguments expected</span>
lambda{|x| x}.arity     <span style="color:#777"># =&gt; 1. One argument expected</span>
lambda{|x,y| x+y}.arity <span style="color:#777"># =&gt; 2. Two arguments expected</span>
<span style="color:#777">################################</span>
lambda {|*args|}.arity        <span style="color:#777"># =&gt; -1.  ~-1 = -(-1)-1 = 0 arguments required</span>
lambda {|first, *rest|}.arity <span style="color:#777"># =&gt; -2.  ~-2 = -(-2)-1 = 1 argument required</span>
<span style="color:#777">################################</span>
puts lambda {}.arity  <span style="color:#777"># &amp;#x2013;1 in Ruby 1.8; 0 in Ruby 1.9</span>
</pre></div>
</div>
</div>

<h4 id="proc-equality">6.5.4 Proc Equality</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>lambda {|x| x*x } == lambda {|x| x*x }  <span style="color:#777"># =&gt; false</span>
<span style="color:#777">################################</span>
p = lambda {|x| x*x }
q = p.dup
p == q                      <span style="color:#777"># =&gt; true: the two procs are equal</span>
p.object_id == q.object_id  <span style="color:#777"># =&gt; false: they are not the same object</span>
</pre></div>
</div>
</div>

<h4 id="return-in-blocks-procs-and-lambdas">6.5.5.1 Return in blocks, procs, and lambdas</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">test</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering method</span><span style="color:#710">&quot;</span></span>
  <span style="color:#00D">1</span>.times { puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering block</span><span style="color:#710">&quot;</span></span>; <span style="color:#080;font-weight:bold">return</span> }  <span style="color:#777"># Makes test method return</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">exiting method</span><span style="color:#710">&quot;</span></span>  <span style="color:#777"># This line is never executed</span>
<span style="color:#080;font-weight:bold">end</span>
test
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">test</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering method</span><span style="color:#710">&quot;</span></span>
  p = <span style="color:#036;font-weight:bold">Proc</span>.new { puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering proc</span><span style="color:#710">&quot;</span></span>; <span style="color:#080;font-weight:bold">return</span> } 
  p.call                 <span style="color:#777"># Invoking the proc makes method return</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">exiting method</span><span style="color:#710">&quot;</span></span>  <span style="color:#777"># This line is never executed</span>
<span style="color:#080;font-weight:bold">end</span>
test
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">procBuilder</span>(message)            <span style="color:#777"># Create and return a proc</span>
  <span style="color:#036;font-weight:bold">Proc</span>.new { puts message; <span style="color:#080;font-weight:bold">return</span> } <span style="color:#777"># return returns from procBuilder</span>
  <span style="color:#777"># but procBuilder has already returned here!</span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">test</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering method</span><span style="color:#710">&quot;</span></span>
  p = procBuilder(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering proc</span><span style="color:#710">&quot;</span></span>)
  p.call                 <span style="color:#777"># Prints &quot;entering proc&quot; and raises LocalJumpError!</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">exiting method</span><span style="color:#710">&quot;</span></span>  <span style="color:#777"># This line is never executed</span>
<span style="color:#080;font-weight:bold">end</span>
test
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">test</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering method</span><span style="color:#710">&quot;</span></span>
  p = lambda { puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering lambda</span><span style="color:#710">&quot;</span></span>; <span style="color:#080;font-weight:bold">return</span> } 
  p.call                 <span style="color:#777"># Invoking the lambda does not make the method return</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">exiting method</span><span style="color:#710">&quot;</span></span>  <span style="color:#777"># This line *is* executed now</span>
<span style="color:#080;font-weight:bold">end</span>
test
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">lambdaBuilder</span>(message)        <span style="color:#777"># Create and return a lambda</span>
  lambda { puts message; <span style="color:#080;font-weight:bold">return</span> } <span style="color:#777"># return returns from the lambda</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">test</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering method</span><span style="color:#710">&quot;</span></span>
  l = lambdaBuilder(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering lambda</span><span style="color:#710">&quot;</span></span>)
  l.call                 <span style="color:#777"># Prints &quot;entering lambda&quot; </span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">exiting method</span><span style="color:#710">&quot;</span></span>  <span style="color:#777"># This line is executed</span>
<span style="color:#080;font-weight:bold">end</span>
test
</pre></div>
</div>
</div>

<h4 id="break-in-blocks-procs-and-lambdas">6.5.5.2 Break in blocks, procs and lambdas</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">test</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering test method</span><span style="color:#710">&quot;</span></span>
  proc = <span style="color:#036;font-weight:bold">Proc</span>.new { puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering proc</span><span style="color:#710">&quot;</span></span>; <span style="color:#080;font-weight:bold">break</span> }
  proc.call                    <span style="color:#777"># LocalJumpError: iterator has already returned</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">exiting test method</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>
test
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">iterator</span>(&amp;proc)
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering iterator</span><span style="color:#710">&quot;</span></span>
  proc.call  <span style="color:#777"># invoke the proc</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">exiting iterator</span><span style="color:#710">&quot;</span></span>   <span style="color:#777"># Never executed if the proc breaks</span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">test</span>
  iterator { puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering proc</span><span style="color:#710">&quot;</span></span>; <span style="color:#080;font-weight:bold">break</span> }
<span style="color:#080;font-weight:bold">end</span>
test
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">test</span>
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering test method</span><span style="color:#710">&quot;</span></span>
  lambda = lambda { puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">entering lambda</span><span style="color:#710">&quot;</span></span>; <span style="color:#080;font-weight:bold">break</span>; puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">exiting lambda</span><span style="color:#710">&quot;</span></span> }
  lambda.call  
  puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">exiting test method</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>
test
</pre></div>
</div>
</div>

<h4 id="argument-passing-to-procs-and-lambdas">6.5.5.4 Argument passing to procs and lambdas</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>p = <span style="color:#036;font-weight:bold">Proc</span>.new {|x,y| print x,y }
p.call(<span style="color:#00D">1</span>)       <span style="color:#777"># x,y=1:     nil used for missing rvalue:  Prints 1nil</span>
p.call(<span style="color:#00D">1</span>,<span style="color:#00D">2</span>)     <span style="color:#777"># x,y=1,2:   2 lvalues, 2 rvalues:         Prints 12</span>
p.call(<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>)   <span style="color:#777"># x,y=1,2,3: extra rvalue discarded:       Prints 12</span>
p.call([<span style="color:#00D">1</span>,<span style="color:#00D">2</span>])   <span style="color:#777"># x,y=[1,2]: array automatically unpacked: Prints 12</span>
<span style="color:#777">################################</span>
l = lambda {|x,y| print x,y }
l.call(<span style="color:#00D">1</span>,<span style="color:#00D">2</span>)     <span style="color:#777"># This works</span>
l.call(<span style="color:#00D">1</span>)       <span style="color:#777"># Wrong number of arguments</span>
l.call(<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>)   <span style="color:#777"># Wrong number of arguments</span>
l.call([<span style="color:#00D">1</span>,<span style="color:#00D">2</span>])   <span style="color:#777"># Wrong number of arguments</span>
l.call(*[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>])  <span style="color:#777"># Works: explicit splat to unpack the array</span>
</pre></div>
</div>
</div>

<h4 id="closures">6.6 Closures</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># multiply each element of the data array by n</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">multiply</span>(data, n)
  data.collect {|x| x*n }
<span style="color:#080;font-weight:bold">end</span>

puts multiply([<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>], <span style="color:#00D">2</span>)   <span style="color:#777"># Prints 2,4,6</span>
<span style="color:#777">################################</span>
<span style="color:#777"># Return a lambda that retains or &quot;closes over&quot; the argument n</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">multiplier</span>(n) 
  lambda {|data| data.collect{|x| x*n } }
<span style="color:#080;font-weight:bold">end</span>
doubler = multiplier(<span style="color:#00D">2</span>)     <span style="color:#777"># Get a lambda that knows how to double</span>
puts doubler.call([<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>])  <span style="color:#777"># Prints 2,4,6</span>
</pre></div>
</div>
</div>

<h4 id="closures-and-shared-variables">6.6.1 Closures and Shared Variables</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Return a pair of lambdas that share access to a local variable.</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">accessor_pair</span>(initialValue=<span style="color:#069">nil</span>)
  value = initialValue  <span style="color:#777"># A local variable shared by the returned lambdas.</span>
  getter = lambda { value }          <span style="color:#777"># Return value of local variable.</span>
  setter = lambda {|x| value = x }   <span style="color:#777"># Change value of local variable.</span>
  <span style="color:#080;font-weight:bold">return</span> getter,setter               <span style="color:#777"># Return pair of lambdas to caller.</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
getX, setX = accessor_pair(<span style="color:#00D">0</span>) <span style="color:#777"># Create accessor lambdas for initial value 0.</span>
puts getX[]        <span style="color:#777"># Prints 0. Note square brackets instead of call.</span>
setX[<span style="color:#00D">10</span>]           <span style="color:#777"># Change the value through one closure.</span>
puts getX[]        <span style="color:#777"># Prints 10. The change is visible through the other.</span>

<span style="color:#777"># Return an array of lambdas that multiply by the arguments</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">multipliers</span>(*args)
  x = <span style="color:#069">nil</span>
  args.map {|x| lambda {|y| x*y }}
<span style="color:#080;font-weight:bold">end</span>

double,triple = multipliers(<span style="color:#00D">2</span>,<span style="color:#00D">3</span>)
puts double.call(<span style="color:#00D">2</span>)    <span style="color:#777"># Prints 6 in Ruby 1.8</span>
</pre></div>
</div>
</div>

<h4 id="closures-and-bindings">6.6.2 Closures and Bindings</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Return a lambda that retains or &quot;closes over&quot; the argument n</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">multiplier</span>(n) 
  lambda {|data| data.collect{|x| x*n } }
<span style="color:#080;font-weight:bold">end</span>
doubler = multiplier(<span style="color:#00D">2</span>)     <span style="color:#777"># Get a lambda that knows how to double</span>
puts doubler.call([<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>])  <span style="color:#777"># Prints 2,4,6</span>
<span style="color:#777">################################</span>
eval(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">n=3</span><span style="color:#710">&quot;</span></span>, doubler.binding) <span style="color:#777"># Or doubler.binding.eval(&quot;n=3&quot;) in Ruby 1.9</span>
puts doubler.call([<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>])   <span style="color:#777"># Now this prints 3,6,9!</span>
<span style="color:#777">################################</span>
eval(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">n=3</span><span style="color:#710">&quot;</span></span>, doubler)
</pre></div>
</div>
</div>

<h4 id="method-objects">6.7 Method Objects</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>m = <span style="color:#00D">0</span>.method(<span style="color:#A60">:succ</span>)  <span style="color:#777"># A Method representing the succ method of Fixnum 0</span>
<span style="color:#777">################################</span>
puts m.call    <span style="color:#777"># Same as puts 0.succ. Or use puts m[].</span>
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">square</span>(x); x*x; <span style="color:#080;font-weight:bold">end</span>
puts (<span style="color:#00D">1</span>..<span style="color:#00D">10</span>).map(&amp;method(<span style="color:#A60">:square</span>))
</pre></div>
</div>
</div>

<h4 id="unbound-method-objects">6.7.1 Unbound Method Objects</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>unbound_plus = <span style="color:#036;font-weight:bold">Fixnum</span>.instance_method(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">+</span><span style="color:#710">&quot;</span></span>)
<span style="color:#777">################################</span>
plus_2 = unbound_plus.bind(<span style="color:#00D">2</span>)   <span style="color:#777"># Bind the method to the object 2</span>
<span style="color:#777">################################</span>
sum = plus_2.call(<span style="color:#00D">2</span>)    <span style="color:#777"># =&gt; 4</span>
<span style="color:#777">################################</span>
plus_3 = plus_2.unbind.bind(<span style="color:#00D">3</span>)
</pre></div>
</div>
</div>

<h4 id="functional-programming">6.8 Functional Programming</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Compute the average and standard deviation of an array of numbers</span>
mean = a.inject {|x,y| x+y } / a.size
sumOfSquares = a.map{|x| (x-mean)**<span style="color:#00D">2</span> }.inject{|x,y| x+y }
standardDeviation = <span style="color:#036;font-weight:bold">Math</span>.sqrt(sumOfSquares/(a.size-<span style="color:#00D">1</span>))
</pre></div>
</div>
</div>

<h4 id="applying-a-function-to-an-enumerable">6.8.1 Applying a Function to an Enumerable</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># This module defines methods and operators for functional programming.</span>
<span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Functional</span>

  <span style="color:#777"># Apply this function to each element of the specified Enumerable,</span>
  <span style="color:#777"># returning an array of results. This is the reverse of Enumerable.map.</span>
  <span style="color:#777"># Use | as an operator alias. Read &quot;|&quot; as &quot;over&quot; or &quot;applied over&quot;.</span>
  <span style="color:#777"># </span>
  <span style="color:#777"># Example:</span>
  <span style="color:#777">#   a = [[1,2],[3,4]]</span>
  <span style="color:#777">#   sum = lambda {|x,y| x+y}</span>
  <span style="color:#777">#   sums = sum|a   # =&gt; [3,7]</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">apply</span>(enum)
    enum.map &amp;<span style="color:#069">self</span>
  <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">alias</span> <span style="color:#06B;font-weight:bold">|</span> <span style="color:#06B;font-weight:bold">apply</span>

  <span style="color:#777"># Use this function to &quot;reduce&quot; an enumerable to a single quantity.</span>
  <span style="color:#777"># This is the inverse of Enumerable.inject.</span>
  <span style="color:#777"># Use &lt;= as an operator alias.</span>
  <span style="color:#777"># Mnemonic: &lt;= looks like a needle for injections</span>
  <span style="color:#777"># Example:</span>
  <span style="color:#777">#   data = [1,2,3,4]</span>
  <span style="color:#777">#   sum = lambda {|x,y| x+y}</span>
  <span style="color:#777">#   total = sum&lt;=data   # =&gt; 10</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">reduce</span>(enum)
    enum.inject &amp;<span style="color:#069">self</span>
  <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">alias</span> <span style="color:#06B;font-weight:bold">&lt;=</span> <span style="color:#06B;font-weight:bold">reduce</span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#777"># Add these functional programming methods to Proc and Method classes.</span>
<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Proc</span>; include <span style="color:#036;font-weight:bold">Functional</span>; <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Method</span>; include <span style="color:#036;font-weight:bold">Functional</span>; <span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
sum = lambda {|x,y| x+y }        <span style="color:#777"># A function to add two numbers</span>
mean = (sum&lt;=a)/a.size           <span style="color:#777"># Or sum.reduce(a) or a.inject(&amp;sum)</span>
deviation = lambda {|x| x-mean } <span style="color:#777"># Function to compute difference from mean</span>
square = lambda {|x| x*x }       <span style="color:#777"># Function to square a number</span>
standardDeviation = <span style="color:#036;font-weight:bold">Math</span>.sqrt((sum&lt;=square|(deviation|a))/(a.size-<span style="color:#00D">1</span>))
</pre></div>
</div>
</div>

<h4 id="composing-functions">6.8.2 Composing Functions</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Functional</span>
  <span style="color:#777"># Return a new lambda that computes self[f[args]].</span>
  <span style="color:#777"># Use * as an operator alias for compose.</span>
  <span style="color:#777"># Examples, using the * alias for this method.</span>
  <span style="color:#777"># </span>
  <span style="color:#777"># f = lambda {|x| x*x }</span>
  <span style="color:#777"># g = lambda {|x| x+1 }</span>
  <span style="color:#777"># (f*g)[2]   # =&gt; 9</span>
  <span style="color:#777"># (g*f)[2]   # =&gt; 5</span>
  <span style="color:#777"># </span>
  <span style="color:#777"># def polar(x,y)</span>
  <span style="color:#777">#   [Math.hypot(y,x), Math.atan2(y,x)]</span>
  <span style="color:#777"># end</span>
  <span style="color:#777"># def cartesian(magnitude, angle)</span>
  <span style="color:#777">#   [magnitude*Math.cos(angle), magnitude*Math.sin(angle)]</span>
  <span style="color:#777"># end</span>
  <span style="color:#777"># p,c = method :polar, method :cartesian</span>
  <span style="color:#777"># (c*p)[3,4]  # =&gt; [3,4]</span>
  <span style="color:#777"># </span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">compose</span>(f)
    <span style="color:#080;font-weight:bold">if</span> <span style="color:#069">self</span>.respond_to?(<span style="color:#A60">:arity</span>) &amp;&amp; <span style="color:#069">self</span>.arity == <span style="color:#00D">1</span>
      lambda {|*args| <span style="color:#069">self</span>[f[*args]] }
    <span style="color:#080;font-weight:bold">else</span>
      lambda {|*args| <span style="color:#069">self</span>[*f[*args]] }
    <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#777"># * is the natural operator for function composition.</span>
  <span style="color:#080;font-weight:bold">alias</span> <span style="color:#06B;font-weight:bold">*</span> <span style="color:#06B;font-weight:bold">compose</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
standardDeviation = <span style="color:#036;font-weight:bold">Math</span>.sqrt((sum&lt;=square*deviation|a)/(a.size-<span style="color:#00D">1</span>))
</pre></div>
</div>
</div>

<h4 id="partially-applying-functions">6.8.3 Partially Applying Functions</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>product = lambda {|x, y| x*y }       <span style="color:#777"># A function of two arguments</span>
double = lambda {|x| product(<span style="color:#00D">2</span>,x) }  <span style="color:#777"># Apply one argument</span>
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Functional</span>
  <span style="color:#777">#</span>
  <span style="color:#777"># Return a lambda equivalent to this one with one or more initial </span>
  <span style="color:#777"># arguments applied. When only a single argument</span>
  <span style="color:#777"># is being specified, the &gt;&gt; alias may be simpler to use.</span>
  <span style="color:#777"># Example:</span>
  <span style="color:#777">#   product = lambda {|x,y| x*y}</span>
  <span style="color:#777">#   doubler = lambda &gt;&gt; 2</span>
  <span style="color:#777">#</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">apply_head</span>(*first)
    lambda {|*rest| <span style="color:#069">self</span>[*first.concat(rest)]}
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#777">#</span>
  <span style="color:#777"># Return a lambda equivalent to this one with one or more final arguments</span>
  <span style="color:#777"># applied. When only a single argument is being specified,</span>
  <span style="color:#777"># the &lt;&lt; alias may be simpler.</span>
  <span style="color:#777"># Example:</span>
  <span style="color:#777">#  difference = lambda {|x,y| x-y }</span>
  <span style="color:#777">#  decrement = difference &lt;&lt; 1</span>
  <span style="color:#777">#</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">apply_tail</span>(*last)
    lambda {|*rest| <span style="color:#069">self</span>[*rest.concat(last)]}
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#777"># Here are operator alternatives for these methods. The angle brackets</span>
  <span style="color:#777"># point to the side on which the argument is shifted in.</span>
  <span style="color:#080;font-weight:bold">alias</span> <span style="color:#06B;font-weight:bold">&gt;&gt;</span> <span style="color:#06B;font-weight:bold">apply_head</span>    <span style="color:#777"># g = f &gt;&gt; 2 -- set first arg to 2</span>
  <span style="color:#080;font-weight:bold">alias</span> <span style="color:#06B;font-weight:bold">&lt;&lt;</span> <span style="color:#06B;font-weight:bold">apply_tail</span>    <span style="color:#777"># g = f &lt;&lt; 2 -- set last arg to 2</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
difference = lambda {|x,y| x-y }  <span style="color:#777"># Compute difference of two numbers</span>
deviation = difference&lt;&lt;mean      <span style="color:#777"># Apply second argument</span>
</pre></div>
</div>
</div>

<h4 id="memoizing-functions">6.8.4 Memoizing Functions</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Functional</span>
  <span style="color:#777">#</span>
  <span style="color:#777"># Return a new lambda that caches the results of this function and </span>
  <span style="color:#777"># only calls the function when new arguments are supplied.</span>
  <span style="color:#777">#</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">memoize</span>
    cache = {}  <span style="color:#777"># An empty cache. The lambda captures this in its closure.</span>
    lambda {|*args|
      <span style="color:#777"># notice that the hash key is the entire array of arguments!</span>
      <span style="color:#080;font-weight:bold">unless</span> cache.has_key?(args)  <span style="color:#777"># If no cached result for these args</span>
        cache[args] = <span style="color:#069">self</span>[*args]  <span style="color:#777"># Compute and cache the result</span>
      <span style="color:#080;font-weight:bold">end</span>
      cache[args]                  <span style="color:#777"># Return result from cache</span>
    }
  <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#777"># A (probably unnecessary) unary + operator for memoization</span>
  <span style="color:#777"># Mnemonic: the + operator means &quot;improved&quot;</span>
  <span style="color:#080;font-weight:bold">alias</span> <span style="color:#06B;font-weight:bold">+@</span> <span style="color:#06B;font-weight:bold">memoize</span>        <span style="color:#777"># cached_f = +f</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
<span style="color:#777"># A memoized recursive factorial function</span>
factorial = lambda {|x| <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">1</span> <span style="color:#080;font-weight:bold">if</span> x==<span style="color:#00D">0</span>; x*factorial[x-<span style="color:#00D">1</span>]; }.memoize
<span style="color:#777"># Or, using the unary operator syntax</span>
factorial = +lambda {|x| <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">1</span> <span style="color:#080;font-weight:bold">if</span> x==<span style="color:#00D">0</span>; x*factorial[x-<span style="color:#00D">1</span>]; }
<span style="color:#777">################################</span>
factorial = lambda {|x| <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">1</span> <span style="color:#080;font-weight:bold">if</span> x==<span style="color:#00D">0</span>; x*factorial[x-<span style="color:#00D">1</span>]; }
cached_factorial = +factorial <span style="color:#777"># Recursive calls aren't cached!</span>
</pre></div>
</div>
</div>

<h4 id="symbols-methods-and-procs">6.8.5 Symbols, Methods, and Procs</h4>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#777"># Increment an array of integers with the Fixnum.succ method</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>].map(&amp;<span style="color:#A60">:succ</span>)  <span style="color:#777"># =&gt; [2,3,4]</span>
<span style="color:#777">################################</span>
[<span style="color:#00D">1</span>,<span style="color:#00D">2</span>,<span style="color:#00D">3</span>].map {|n| n.succ }
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Symbol</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_proc</span>
    lambda {|receiver, *args| receiver.send(<span style="color:#069">self</span>, *args)}
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Symbol</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_proc</span>
    lambda {|receiver, *args| receiver.method(<span style="color:#069">self</span>)[*args]}
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Module</span>
  <span style="color:#777"># Access instance methods with array notation. Returns UnboundMethod,</span>
  <span style="color:#080;font-weight:bold">alias</span> <span style="color:#06B;font-weight:bold">[]</span> <span style="color:#06B;font-weight:bold">instance_method</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
<span style="color:#036;font-weight:bold">String</span>[<span style="color:#A60">:reverse</span>].bind(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>).call   <span style="color:#777"># =&gt; &quot;olleh&quot;</span>
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">UnboundMethod</span>
  <span style="color:#777"># Allow [] as an alternative to bind.  </span>
  <span style="color:#080;font-weight:bold">alias</span> <span style="color:#06B;font-weight:bold">[]</span> <span style="color:#06B;font-weight:bold">bind</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
<span style="color:#036;font-weight:bold">String</span>[<span style="color:#A60">:reverse</span>][<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello</span><span style="color:#710">&quot;</span></span>][]   <span style="color:#777"># =&gt; &quot;olleh&quot;</span>
<span style="color:#777">################################</span>
<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Module</span>
  <span style="color:#777"># Define a instance method with name sym and body f.</span>
  <span style="color:#777"># Example: String[:backwards] = lambda { reverse }</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">[]=</span>(sym, f)
    <span style="color:#069">self</span>.instance_eval { define_method(sym, f) }
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
<span style="color:#036;font-weight:bold">Enumerable</span>[<span style="color:#A60">:average</span>] = lambda <span style="color:#080;font-weight:bold">do</span>
  sum, n = <span style="color:#60E">0.0</span>, <span style="color:#00D">0</span>
  <span style="color:#069">self</span>.each {|x| sum += x; n += <span style="color:#00D">1</span> }
  <span style="color:#080;font-weight:bold">if</span> n == <span style="color:#00D">0</span>
    <span style="color:#069">nil</span>
  <span style="color:#080;font-weight:bold">else</span>
    sum/n
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
<span style="color:#777">#</span>
<span style="color:#777"># Add [] and []= operators to the Symbol class for accessing and setting</span>
<span style="color:#777"># singleton methods of objects. Read : as &quot;method&quot; and [] as &quot;of&quot;.</span>
<span style="color:#777"># So :m[o] reads &quot;method m of o&quot;.</span>
<span style="color:#777">#</span>
<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Symbol</span>
  <span style="color:#777"># Return the Method of obj named by this symbol. This may be a singleton</span>
  <span style="color:#777"># method of obj (such as a class method) or an instance method defined</span>
  <span style="color:#777"># by obj.class or inherited from a superclass.</span>
  <span style="color:#777"># Examples:</span>
  <span style="color:#777">#   creator = :new[Object]  # Class method Object.new</span>
  <span style="color:#777">#   doubler = :*[2]         # * method of Fixnum 2</span>
  <span style="color:#777">#</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">[]</span>(obj)
    obj.method(<span style="color:#069">self</span>)
  <span style="color:#080;font-weight:bold">end</span>
  
  <span style="color:#777"># Define a singleton method on object o, using Proc or Method f as its body.</span>
  <span style="color:#777"># This symbol is used as the name of the method.</span>
  <span style="color:#777"># Examples:</span>
  <span style="color:#777">#</span>
  <span style="color:#777">#  :singleton[o] = lambda { puts &quot;this is a singleton method of o&quot; }</span>
  <span style="color:#777">#  :class_method[String] = lambda { puts &quot;this is a class method&quot; }</span>
  <span style="color:#777"># </span>
  <span style="color:#777"># Note that you can't create instance methods this way. See Module.[]=</span>
  <span style="color:#777">#</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">[]=</span>(o,f)
    <span style="color:#777"># We can't use self in the block below, as it is evaluated in the </span>
    <span style="color:#777"># context of a different object. So we have to assign self to a variable.</span>
    sym = <span style="color:#069">self</span>
    <span style="color:#777"># This is the object we define singleton methods on.</span>
    eigenclass = (<span style="color:#080;font-weight:bold">class</span> &lt;&lt; <span style="color:#B06;font-weight:bold">o</span>; <span style="color:#069">self</span> <span style="color:#080;font-weight:bold">end</span>)
    <span style="color:#777"># define_method is private, so we have to use instance_eval to execute it.</span>
    eigenclass.instance_eval { define_method(sym, f) }
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
<span style="color:#777">################################</span>
dashes = <span style="color:#A60">:*</span>[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">-</span><span style="color:#710">'</span></span>]       <span style="color:#777"># Method * of '-'</span>
puts dashes[<span style="color:#00D">10</span>]        <span style="color:#777"># Prints &quot;----------&quot;</span>

y = (<span style="color:#A60">:+</span>[<span style="color:#00D">1</span>]*<span style="color:#A60">:*</span>[<span style="color:#00D">2</span>])[x]   <span style="color:#777"># Another way to write y = 2*x + 1</span>
</pre></div>
</div>
</div>

  </div>
</body>
</html>

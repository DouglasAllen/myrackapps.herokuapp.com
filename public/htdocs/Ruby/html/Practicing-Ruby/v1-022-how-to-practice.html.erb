<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/>
  <title>Practicing Ruby</title>
  <style>
    body {
      font-family: "Helvetica Neue", arial, sans-serif;
      font-size: 14px;
      line-height: 1.6;
      padding-top: 10px;
      padding-bottom: 10px;
      background-color: white;
      padding: 30px;
      color: #333;
      border: 1px solid #aaa;
      max-width: 900px;
      margin: 20px auto;
    }

    body > *:first-child {
      margin-top: 0 !important;
    }

    body > *:last-child {
      margin-bottom: 0 !important;
    }

    a {
      color: #4183C4;
      text-decoration: none;
    }

    a.absent {
      color: #cc0000;
    }

    a.anchor {
      display: block;
      padding-left: 30px;
      margin-left: -30px;
      cursor: pointer;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
    }

    h1, h2, h3, h4, h5, h6 {
      margin: 20px 0 10px;
      padding: 0;
      font-weight: bold;
      -webkit-font-smoothing: antialiased;
      cursor: text;
      position: relative;
    }

    h2:first-child, h1:first-child, h1:first-child + h2, h3:first-child, h4:first-child, h5:first-child, h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor {
      text-decoration: none;
    }

    h1 tt, h1 code {
      font-size: inherit;
    }

    h2 tt, h2 code {
      font-size: inherit;
    }

    h3 tt, h3 code {
      font-size: inherit;
    }

    h4 tt, h4 code {
      font-size: inherit;
    }

    h5 tt, h5 code {
      font-size: inherit;
    }

    h6 tt, h6 code {
      font-size: inherit;
    }

    h1 {
      font-size: 28px;
      color: black;
    }

    h2 {
      font-size: 24px;
      border-bottom: 1px solid #cccccc;
      color: black;
    }

    h3 {
      font-size: 18px;
    }

    h4 {
      font-size: 16px;
    }

    h5 {
      font-size: 14px;
    }

    h6 {
      color: #777777;
      font-size: 14px;
    }

    p, blockquote, ul, ol, dl, li, table, pre {
      margin: 3px 0;
    }

    hr {
      background: transparent url("http://tinyurl.com/bq5kskr") repeat-x 0 0;
      border: 0 none;
      color: #cccccc;
      height: 4px;
      padding: 0;
    }

    body > h2:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child + h2 {
      margin-top: 0;
      padding-top: 0;
    }

    body > h3:first-child, body > h4:first-child, body > h5:first-child, body > h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
      margin-top: 0;
      padding-top: 0;
    }

    h1 p, h2 p, h3 p, h4 p, h5 p, h6 p {
      margin-top: 0;
    }

    li p.first {
      display: inline-block;
    }

    ul, ol {
      padding-left: 30px;
    }

    ul :first-child, ol :first-child {
      margin-top: 0;
    }

    ul :last-child, ol :last-child {
      margin-bottom: 0;
    }

    dl {
      padding: 0;
    }

    dl dt {
      font-size: 14px;
      font-weight: bold;
      font-style: italic;
      padding: 0;
      margin: 15px 0 5px;
    }

    dl dt:first-child {
      padding: 0;
    }

    dl dt > :first-child {
      margin-top: 0;
    }

    dl dt > :last-child {
      margin-bottom: 0;
    }

    dl dd {
      margin: 0 0 15px;
      padding: 0 15px;
    }

    dl dd > :first-child {
      margin-top: 0;
    }

    dl dd > :last-child {
      margin-bottom: 0;
    }

    blockquote {
      border-left: 4px solid #dddddd;
      padding: 0 15px;
      color: #777777;
    }

    blockquote > :first-child {
      margin-top: 0;
    }

    blockquote > :last-child {
      margin-bottom: 0;
    }

    table {
      padding: 0;
    }
    table tr {
      border-top: 1px solid #cccccc;
      background-color: white;
      margin: 0;
      padding: 0;
    }

    table tr:nth-child(2n) {
      background-color: #f8f8f8;
    }

    table tr th {
      font-weight: bold;
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr td {
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr th :first-child, table tr td :first-child {
      margin-top: 0;
    }

    table tr th :last-child, table tr td :last-child {
      margin-bottom: 0;
    }

    img {
      max-width: 100%;
    }

    span.frame {
      display: block;
      overflow: hidden;
    }

    span.frame > span {
      border: 1px solid #dddddd;
      display: block;
      float: left;
      overflow: hidden;
      margin: 13px 0 0;
      padding: 7px;
      width: auto;
    }

    span.frame span img {
      display: block;
      float: left;
    }

    span.frame span span {
      clear: both;
      color: #333333;
      display: block;
      padding: 5px 0 0;
    }

    span.align-center {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-center > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: center;
    }

    span.align-center span img {
      margin: 0 auto;
      text-align: center;
    }

    span.align-right {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-right > span {
      display: block;
      overflow: hidden;
      margin: 13px 0 0;
      text-align: right;
    }

    span.align-right span img {
      margin: 0;
      text-align: right;
    }

    span.float-left {
      display: block;
      margin-right: 13px;
      overflow: hidden;
      float: left;
    }

    span.float-left span {
      margin: 13px 0 0;
    }

    span.float-right {
      display: block;
      margin-left: 13px;
      overflow: hidden;
      float: right;
    }

    span.float-right > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: right;
    }

    code, tt {
      font-family: "Lucida Console", "Courier New", courier;
      font-size: 12px;
      margin: 0 2px;
      padding: 3px 5px;
      white-space: nowrap;
      border: 1px solid #eaeaea;
      background-color: #f8f8f8;
      border-radius: 3px;
    }

    pre code {
      margin: 0;
      padding: 0;
      white-space: pre;
      border: none;
      background: transparent;
    }

    .highlight pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre code, pre tt {
      background-color: transparent;
      border: none;
    }

    span.line-numbers {
      margin-right: 10px;
    }

    img.logo {
      display: block;
      margin: 10px auto;
    }

    h1.logo {
      text-align: center;
      font-size: 40px;
    }
  </style>
</head>
<body>
  <div id="containter">
    <h1 class="logo">Practicing Ruby</h1>
    <img class="logo" src="../images/header.png" />
    <blockquote>
  <p><strong>NOTE:</strong> I generally remove temporal references in Practicing Ruby 
articles to keep them disconnected from a particular point in time, but
in this case I intentionally left them in because the post is written
in a sort of “diary” style. It was originally posted in January 2011.</p>
</blockquote>

<p>In the <a href="http://practicingruby.com/articles/50">previous issue</a>, I provided a
series of questions and instructions that outlined the way I practice. While
some may have been expecting code katas or other indirect exercises, my style is
more geared towards learning on the job. You start by figuring out what’s
important to you, figure out a baby-step that you can make, and then execute.
Once you’ve brought yourself one step closer to your goal, you reflect a bit on
how things are going, in particular, what parts of the project still scare you.</p>

<p>I use this technique often, in particular, when I want to get started on a new
project or explore a new area that I’m not that familiar with. As luck would
have it, I actually have a new project I need to start, and so today I’ll give
you the chance to metaphorically look over my shoulder as I work through this
exercise myself. If you haven’t read <a href="http://practicingruby.com/articles/50">Issue
#21</a>, now is a good time to do that, so
that the rest of this article makes sense.</p>

<h3 id="step-1-find-out-whats-important">Step 1: Find out what’s important</h3>

<p>What interesting problems do you need to solve?</p>

<p>Lately, this question has been one that has caused me great anxiety.The success
of Mendicant University and even Practicing Ruby to a certain extent has caused
an explosion of ideas that all feel worthwhile and important to me. But they’re
fairly easy to separate into wants and needs, and thankfully, much of what I’ve
come up with falls in the former category.</p>

<p>When I think about it, there is something that I feel I need to do sooner rather
than later. While our courses are booked up until May, we will need to start
admissions for our second trimester soon. Towards the end of last year, we
decided we wanted to do something more fun and lighthearted than an
entrance exam, but we didn’t take much action since then. With the clock
ticking down, making headway on this project would surely help give me some
peace of mind.</p>

<p>What I’d like to build is a programming quiz site that is inspired by the
<a href="http://ipsc.ksp.sk">Internet Problem Solving Contest</a> and <a href="http://projecteuler.net">Project
Euler</a>, but with an MU-themed twist. I’ll have
Mendicant’s co-founder <a href="http://twitter.com/Jordan_Byron">Jordan Byron</a> to help
me with the frontend, but since he’s busy with 100 other tasks for
MU, I’m the one who needs to build out the backend for this new app. I’ll use my
need to write this article as motivation to help me break ground on this new
project today.</p>

<h3 id="step-2-make-a-commitment">Step 2: Make a commitment</h3>

<p>I made the broad commitment to our students that we’d have a nice replacement
for MU’s currently dull admissions process before the next trimester began. But
broad commitments don’t particularly inspire action, so I needed to make a
specific commitment as well.</p>

<p>With that in mind, I told Jordan I’d have something for him to look
at today, even if it was just a small start. Since he’ll be arriving at my
home within an hour of me finishing this article, I am already feeling the
pressure of having something to show for myself, which is a good thing.</p>

<h3 id="step-3-identify-a-baby-step">Step 3: Identify a baby step</h3>

<p>The next step in this process is to come up with a small step to get you just a
little bit closer to your goal. I knew by the time I finished Issue
#21 that I’d be working on this project, so I’ve been subconsciously chewing on
my baby-step for a couple days now. This to me is totally fine, it gives my
brain a chance to think things through and makes actually sitting down and
coding something easier. Of course, the key thing is that my delivery time was
still boxed in. If you leave things open ended, you may end up
talking yourself out of building anything at all.</p>

<p>When coming up with a tiny step, I try to focus on something that is core to the
underlying project, to maximize the amount I learn from the mini spike. In the
case of our quiz application (which we’re calling PuzzleNode), validating user
submissions is one of the most important pieces of functionality.</p>

<p>What I’ll do today is do a rough proof of concept of the submission validation
system, which compares the expected output to the actual file
uploaded by a user. I like to subdivide my tasks even when working
only for an hour, so I’m going to attack this in three phases:</p>

<ol>
  <li>
    <p>A simple function that compares two files using a SHA1 hash and returns true
or false depending on whether they match.</p>
  </li>
  <li>
    <p>A tiny sinatra application that does the same, but introduces file uploads
into the picture.</p>
  </li>
  <li>
    <p>A minimal Rails app that actually records whether a submission was valid or
invalid, and properly links puzzles with their expected output.</p>
  </li>
</ol>

<p>I’m setting my time limit for an hour, so I’m not sure how far I’ll actually
get. No matter what happens, I’ll try to jot down some notes to give you a feel
for my though process as I work through this exercise.</p>

<h3 id="step-4-get-one-step-closer">Step 4: Get one step closer</h3>

<p>[06:40] I’ve got my clock set now, and I’m ready to get started. Please excuse
me while I go heads down for a bit. I’ll pop up with some brief notes here each
time I reach a transition point, and then go into more detail in the reflections
phase.</p>

<p>[06:45] Basic <a href="https://github.com/sandal/pr-issue-22">github project</a> set up for
this experiment.</p>

<p>[06:48] Add three text files, a reference which is meant to act as the expected
solution, a good file which is just a copy of the reference, and a bad file with
some modifications to make it not match the reference.</p>

<p>[06:51] Phase 1 complete!</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#F00;background-color:#FAA">$</span> ruby check_solution.rb samples/reference.txt samples/good.txt 
<span style="color:#036;font-weight:bold">GOOD</span>

<span style="color:#F00;background-color:#FAA">$</span> ruby check_solution.rb samples/reference.txt samples/bad.txt
<span style="color:#036;font-weight:bold">BAD</span>
</pre></div>
</div>
</div>

<p>Source code is dead simple, just a few lines.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">digest/sha1</span><span style="color:#710">&quot;</span></span>

expected = <span style="color:#036;font-weight:bold">Digest</span>::<span style="color:#036;font-weight:bold">SHA1</span>.hexdigest(<span style="color:#036;font-weight:bold">File</span>.read(<span style="color:#069">ARGV</span>[<span style="color:#00D">0</span>]))
actual   = <span style="color:#036;font-weight:bold">Digest</span>::<span style="color:#036;font-weight:bold">SHA1</span>.hexdigest(<span style="color:#036;font-weight:bold">File</span>.read(<span style="color:#069">ARGV</span>[<span style="color:#00D">1</span>]))

puts(expected == actual ? <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">GOOD</span><span style="color:#710">&quot;</span></span> : <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">BAD</span><span style="color:#710">&quot;</span></span>)
</pre></div>
</div>
</div>

<p>[06:54] Next step is to remind myself how file uploads work in Sinatra, an
indicator of how rusty my frontend webdev knowledge is…</p>

<p>[06:57] Google for “File uploads sinatra” and find Peter Cooper talking about
<a href="http://technotales.wordpress.com/2008/03/05/sinatra-the-simplest-thing-that-could-possibly-work/">this blog
post</a>
via Ruby Inside.</p>

<p>Outdated, but worth a shot since it’s just a one liner.</p>

<p>[07:00] File uploads working via curl. Time to integrate the phase 1 code
into my sinata app.</p>

<p>[07:06] Have something I think should work but found some unexpected
bugs. Drat!</p>

<p>[07:08] Oh, apparently I just don’t know how to use curl, working now! (albiet
with a little echo hack to add a newline)</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#F00;background-color:#FAA">$</span> curl -<span style="color:#036;font-weight:bold">F</span> <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">data=@samples/bad.txt</span><span style="color:#710">&quot;</span></span> <span style="color:#60E">127.0</span>.<span style="color:#F00;background-color:#FAA">0.1</span>:<span style="color:#00D">4567</span>/reference.txt; echo
<span style="color:#036;font-weight:bold">BAD</span>
<span style="color:#F00;background-color:#FAA">$</span> curl -<span style="color:#036;font-weight:bold">F</span> <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">data=@samples/good.txt</span><span style="color:#710">&quot;</span></span> <span style="color:#60E">127.0</span>.<span style="color:#F00;background-color:#FAA">0.1</span>:<span style="color:#00D">4567</span>/reference.txt; echo
<span style="color:#036;font-weight:bold">GOOD</span>
</pre></div>
</div>
</div>

<p>Source is still quite simple, so I can inline it here.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rubygems</span><span style="color:#710">&quot;</span></span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">sinatra</span><span style="color:#710">&quot;</span></span>
require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">digest/sha1</span><span style="color:#710">&quot;</span></span>

<span style="color:#036;font-weight:bold">ACCEPTED_FILES</span> = [<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">reference.txt</span><span style="color:#710">&quot;</span></span>]

post <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/:expected</span><span style="color:#710">&quot;</span></span> <span style="color:#080;font-weight:bold">do</span>
  raise <span style="color:#080;font-weight:bold">unless</span> <span style="color:#036;font-weight:bold">ACCEPTED_FILES</span>.include?(params[<span style="color:#A60">:expected</span>])

  expected = 
    <span style="color:#036;font-weight:bold">Digest</span>::<span style="color:#036;font-weight:bold">SHA1</span>.hexdigest(<span style="color:#036;font-weight:bold">File</span>.read(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">samples/</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>params[<span style="color:#A60">:expected</span>]<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>))

  actual   = <span style="color:#036;font-weight:bold">Digest</span>::<span style="color:#036;font-weight:bold">SHA1</span>.hexdigest(params[<span style="color:#A60">:data</span>][<span style="color:#A60">:tempfile</span>].read)

  expected == actual ? <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">GOOD</span><span style="color:#710">&quot;</span></span> : <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">BAD</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>Off we go to phase 3!</p>

<p>[07:11] I need to think up a few AR models. Off to the whiteboard, back in a
moment.</p>

<p>[07:15] I’ve decided to cheat a bit. I realized that for a very basic demo, I
don’t actually need to store the uploaded files anywhere, but instead, I just
need each puzzle to store its SHA1 fingerprint. Then, when a new submission is
made, you just hash the file uploaded by the user and compare it to the
associated puzzle.</p>

<p>This data model omits a lot, and would need a lot of love to actually be used in
our application, but it is sufficient for demonstrating just the validation
step.</p>

<pre><code>Puzzle(name: text, fingerprint: text) 
Submission(puzzle_id: integer, correct: boolean)
</code></pre>

<p>Time to go spit out a Rails skeleton, I suppose. The key thing this has saved me
is a trip through paperclip’s documentation, and a host of questions about
whether that’s still the right tool for the job and whether it works with Rails
3 smoothly. I roughly assume that the answer to each of those questions is yes,
but better to not have to answer them right now.</p>

<p>[07:22] Only 18 minutes to go and rails is still installing, sloooooow.</p>

<p>[07:24] Still installing! Should have used –no-rdoc –no-ri!</p>

<p>[07:25] Finally finished installing, while waiting I stumbled upon <a href="http://stackoverflow.com/questions/1381725/how-to-make-no-ri-no-rdoc-default-for-gem-install">this post on
disabling documentation by
default</a>.
Will need to try that out later.</p>

<p>[07:26] Doh, never going to undo my stupid muscle memory</p>

<p>$ rails puzzlenode
Usage:
  rails new APP_PATH [options]</p>

<p>[07:29] Hmm, rails comes with a .gitignore file now? That’s handy. Though I’m
pretty sure I just accidentally checked in my config/database.yml. Not
a big deal, this is just a spike, right?</p>

<p>[07:30] Wow, now is not the time to be punished by the fact that I aliased mvim
to sl on my Gentoo box in an effort to stop typing mvim where it doesn’t work.
That seemed like a good idea at the time, of course.</p>

<p>[07:32] Toot toot! Time to switch consoles, this is taking forever. Dear reader,
you <em>have</em> googled sl by now, right? :)</p>

<p>[07:39] Ran out of time, so just messed with the data models a bit in the
console to imagine their interactions. Will need to save a proper implementation
for later.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt;&gt; <span style="color:#036;font-weight:bold">Puzzle</span>.create(<span style="color:#A60">:name</span> =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Reference</span><span style="color:#710">&quot;</span></span>, <span style="color:#A60">:fingerprint</span> =&gt;
&gt;&gt; <span style="color:#036;font-weight:bold">Digest</span>::<span style="color:#036;font-weight:bold">SHA1</span>.hexdigest(<span style="color:#036;font-weight:bold">File</span>.read(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span><span style="color:#036;font-weight:bold">RAILS_ROOT</span><span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20">/samples/reference.txt</span><span style="color:#710">&quot;</span></span>)))

=&gt; <span style="color:#777">#&lt;Puzzle id: 1, name: &quot;Reference&quot;, fingerprint:</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">a59eb2c51e07e2b7369baef8a0c3cb3b5d7ed3d9</span><span style="color:#710">&quot;</span></span>, <span style="color:#606">created_at</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">2011-01-28
12:37:41</span><span style="color:#710">&quot;</span></span>, <span style="color:#606">updated_at</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">2011-01-28 12:37:41</span><span style="color:#710">&quot;</span></span>&gt;

&gt;&gt; <span style="color:#036;font-weight:bold">Submission</span>.create(<span style="color:#A60">:puzzle_id</span> =&gt; <span style="color:#00D">1</span>, <span style="color:#A60">:correct</span> =&gt; <span style="color:#069">false</span>)

=&gt; <span style="color:#777">#&lt;Submission id: 1, puzzle_id: 1, correct: false, </span>
     <span style="color:#606">created_at</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">2011-01-28 12:38:41</span><span style="color:#710">&quot;</span></span>, <span style="color:#606">updated_at</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">2011-01-28 12:38:41</span><span style="color:#710">&quot;</span></span>&gt;
&gt;&gt; <span style="color:#036;font-weight:bold">Submission</span>.create(<span style="color:#A60">:puzzle_id</span> =&gt; <span style="color:#00D">1</span>, <span style="color:#A60">:correct</span> =&gt; <span style="color:#069">false</span>)

=&gt; <span style="color:#777">#&lt;Submission id: 2, puzzle_id: 1, correct: false, </span>
   <span style="color:#606">created_at</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">2011-01-28 12:38:42</span><span style="color:#710">&quot;</span></span>, <span style="color:#606">updated_at</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">2011-01-28 12:38:42</span><span style="color:#710">&quot;</span></span>&gt;

&gt;&gt; <span style="color:#036;font-weight:bold">Submission</span>.create(<span style="color:#A60">:puzzle_id</span> =&gt; <span style="color:#00D">1</span>, <span style="color:#A60">:correct</span> =&gt; <span style="color:#069">true</span>)

=&gt; <span style="color:#777">#&lt;Submission id: 3, puzzle_id: 1, correct: true, </span>
   <span style="color:#606">created_at</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">2011-01-28 12:38:45</span><span style="color:#710">&quot;</span></span>, <span style="color:#606">updated_at</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">2011-01-28 12:38:45</span><span style="color:#710">&quot;</span></span>&gt;

&gt;&gt; <span style="color:#036;font-weight:bold">Puzzle</span>.find(<span style="color:#00D">1</span>).submissions.where(<span style="color:#A60">:correct</span> =&gt; <span style="color:#069">true</span>).count
=&gt; <span style="color:#00D">1</span>
&gt;&gt; <span style="color:#036;font-weight:bold">Puzzle</span>.find(<span style="color:#00D">1</span>).submissions.where(<span style="color:#A60">:correct</span> =&gt; <span style="color:#069">false</span>).count
=&gt; <span style="color:#00D">2</span>
</pre></div>
</div>
</div>

<p>Hah, at least my associations seem to be working correctly. I can has rails!</p>

<h3 id="step-5-reflect-on-your-progress">Step 5: Reflect on your progress</h3>

<p>This exercise went more or less as I expected it to, with a couple surprises
here and there. One thing that didn’t dawn on me until I reached stage 3 is that
I don’t necessarily need to worry about file attachments in this application.
While certain features such as having the ability to review user submissions or
display the reference output would require it, a simple alpha product could be
shipped without those features and still be quite usable.</p>

<p>The exercise hopefully also reflects a bit of realism, as I didn’t rehearse it
ahead of time and ran into some stupid things that slowed me down, which is what
might happen to anyone. That’s really okay, because in the process, I learned
some things worth looking into later on.</p>

<p>Now that I’m an hour into this project, my instructions call for me to reflect
on what scares me about it. I actually have a lot of general fears, but in order
to explain them I’d need to give a lot of context about the project and those
ideas are still fuzzy even in my own mind. That having been said, there is a 
concern that I can share which this small spike keeps reminding me of.</p>

<h3 id="what-about-this-project-scares-me">What about this project scares me?</h3>

<p>I’m not sure that I like fingerprinting as a method for
determining the validity of a solution. It scares me to think that if a problem
called for you to generate some XML, alterations to whitespace could
result in an otherwise perfectly valid submission getting rejected.</p>

<p>The way that IPSC and Project Euler solve this problem is by restricting
the submission format. In the case of IPSC this consists of bits of numbers or
text separated by newlines, and for Project Euler the solutions are always to
compute a simple number. I could adopt this strategy, but it makes me
worried that it’ll limit the kinds of problems I can run at PuzzleNode.</p>

<p>I want to avoid making the problems at PuzzleNode too academic in
nature, with a focus more on practical problem solving and creative thinking.
Both Project Euler and IPSC do a good job of this within a subset of their
problems, but most of them are algorithmic. I wonder if that’s due to the 
input constraints, and if it is, that would be bad for MU.</p>

<p>One possibility is that rather than doing a bitwise matching via a fingerprint,
I could force users to provide JSON data which I could then process and compare
based on the object structure. This would allow for much greater flexibility in
the way I validate submissions, and eliminate the failure-by-formatting issue I
pointed out before, but it’d both increase the overhead of submitting a solution
and make the backend functionality a good deal more complex.</p>

<p>I think that what I need to do is draft up a few puzzles and see how much the
current fingerprinting validation restrictions get in the way. I may be worrying
about nothing, but the only way to tell is to produce some content and see where
that brings me.</p>

<h3 id="step-6-rinse-and-repeat">Step 6: Rinse and Repeat</h3>

<p>My next step is to actually flesh out the Rails backend, since I didn’t get that
far with it. I’m glad to have found that I can defer file uploads until a bit
later, this is something I don’t think I would have realized if I started
directly by jumping into the Rails boilerplate.</p>

<p>Once I have a minimal system functioning, my next step will be to come up with
a few more problems to test it against. I already have one idea in mind;
generating more should be easy.</p>

<p>With my next step planned, I feel confident that this project will keep 
moving forward.</p>

<h3 id="closing-thoughts">Closing Thoughts</h3>

<p>This is a real outline of how I practice. At first, when I wrote up the set of
instructions, I thought formalizing it would make it feel artificial to me. But
honestly, once I got rolling on the spike, things happened pretty much the way
they always would, and the comments I left were just the thoughts that came up
in my mind as I went along. In that sense, it didn’t feel like practice.</p>

<p>You’ll notice that I start with what I know and work outwards from there. I
rarely try to think too hard about what I need to know ahead of time, because I
find it causes me to study the wrong things at the wrong time. A more formal
approach might have lead me to study paperclip up front, because this process
involves file uploads. But the 20-30 minutes that might have costed me we found
through experimentation is something that I can put off for several weeks
without it affecting my progress.</p>

<p>I tend not to plug into the firehose of information coming from books, blogs,
and reddit/HN for the same reason. Soaking up that material is begging to find a
solution in search of a problem, rather than the other way around. It’s always
easy to ask for a recommendation at the time you actually need something, and
Google is pretty good at digging up well read blog posts or articles about
whatever tool you might need, and so I put off studying until it is necessary.</p>

<p>I don’t do a whole lot of code katas, or little practice exercises that I can’t
actually use for something. I will certainly do those things for entertainment,
but I don’t schedule ‘practice time’ in my day to day life and honestly, I never
have. There is no shortage of necessary learning that takes place when chasing
practical goals, and the reward is much greater than just having an abstract
feeling of learning a bit more, you end up with something you can use.</p>

<p>The more I can make my life my practice, the less I need to be disciplined about
making time for formal academic exercises. I admit that there are
a lot of things about my lifestyle and circumstances that make me especially
blessed, but I wasn’t always in a fortunate position and would give 
similar advice even when I was struggling to make ends meet.</p>

<p>So in closing, it may be true that the way to Carnegie Hall is via the
“Practice! Practice! Practice!” path, but in my mind, that means less time
playing with yourself in the comfort of your own home, and more time on small
stages until they lead you to a slightly bigger stage which you can then occupy
until it too, becomes too small.</p>

<p>This is how I practice. I hope hearing about it has been useful to you.</p>

<p><b>UPDATE 2011.09.09</b>: <i> The <a href="http://puzzlenode.com">PuzzleNode website</a>
was successfully launched on time, and has been used to conduct three entrance
exams for Mendicant University already. The puzzles there are language agnostic,
and may be fun to try out even if you aren’t planning to apply to MU. But I’d be
just as happy to hear that you’re too busy working on real projects that you
care a lot about instead.</i></p>

<blockquote>
  <p><strong>NOTE:</strong> This article has also been published on the Ruby Best Practices blog. 
There <a href="http://blog.rubybestpractices.com/posts/gregory/054-issue-22-how-to-practice.html#disqus_thread">may be additional commentary</a> 
over there worth taking a look at.</p>
</blockquote>

  </div>
</body>
</html>

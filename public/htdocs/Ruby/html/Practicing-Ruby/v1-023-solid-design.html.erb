<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/>
  <title>Practicing Ruby</title>
  <style>
    body {
      font-family: "Helvetica Neue", arial, sans-serif;
      font-size: 14px;
      line-height: 1.6;
      padding-top: 10px;
      padding-bottom: 10px;
      background-color: white;
      padding: 30px;
      color: #333;
      border: 1px solid #aaa;
      max-width: 900px;
      margin: 20px auto;
    }

    body > *:first-child {
      margin-top: 0 !important;
    }

    body > *:last-child {
      margin-bottom: 0 !important;
    }

    a {
      color: #4183C4;
      text-decoration: none;
    }

    a.absent {
      color: #cc0000;
    }

    a.anchor {
      display: block;
      padding-left: 30px;
      margin-left: -30px;
      cursor: pointer;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
    }

    h1, h2, h3, h4, h5, h6 {
      margin: 20px 0 10px;
      padding: 0;
      font-weight: bold;
      -webkit-font-smoothing: antialiased;
      cursor: text;
      position: relative;
    }

    h2:first-child, h1:first-child, h1:first-child + h2, h3:first-child, h4:first-child, h5:first-child, h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor {
      text-decoration: none;
    }

    h1 tt, h1 code {
      font-size: inherit;
    }

    h2 tt, h2 code {
      font-size: inherit;
    }

    h3 tt, h3 code {
      font-size: inherit;
    }

    h4 tt, h4 code {
      font-size: inherit;
    }

    h5 tt, h5 code {
      font-size: inherit;
    }

    h6 tt, h6 code {
      font-size: inherit;
    }

    h1 {
      font-size: 28px;
      color: black;
    }

    h2 {
      font-size: 24px;
      border-bottom: 1px solid #cccccc;
      color: black;
    }

    h3 {
      font-size: 18px;
    }

    h4 {
      font-size: 16px;
    }

    h5 {
      font-size: 14px;
    }

    h6 {
      color: #777777;
      font-size: 14px;
    }

    p, blockquote, ul, ol, dl, li, table, pre {
      margin: 3px 0;
    }

    hr {
      background: transparent url("http://tinyurl.com/bq5kskr") repeat-x 0 0;
      border: 0 none;
      color: #cccccc;
      height: 4px;
      padding: 0;
    }

    body > h2:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child + h2 {
      margin-top: 0;
      padding-top: 0;
    }

    body > h3:first-child, body > h4:first-child, body > h5:first-child, body > h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
      margin-top: 0;
      padding-top: 0;
    }

    h1 p, h2 p, h3 p, h4 p, h5 p, h6 p {
      margin-top: 0;
    }

    li p.first {
      display: inline-block;
    }

    ul, ol {
      padding-left: 30px;
    }

    ul :first-child, ol :first-child {
      margin-top: 0;
    }

    ul :last-child, ol :last-child {
      margin-bottom: 0;
    }

    dl {
      padding: 0;
    }

    dl dt {
      font-size: 14px;
      font-weight: bold;
      font-style: italic;
      padding: 0;
      margin: 15px 0 5px;
    }

    dl dt:first-child {
      padding: 0;
    }

    dl dt > :first-child {
      margin-top: 0;
    }

    dl dt > :last-child {
      margin-bottom: 0;
    }

    dl dd {
      margin: 0 0 15px;
      padding: 0 15px;
    }

    dl dd > :first-child {
      margin-top: 0;
    }

    dl dd > :last-child {
      margin-bottom: 0;
    }

    blockquote {
      border-left: 4px solid #dddddd;
      padding: 0 15px;
      color: #777777;
    }

    blockquote > :first-child {
      margin-top: 0;
    }

    blockquote > :last-child {
      margin-bottom: 0;
    }

    table {
      padding: 0;
    }
    table tr {
      border-top: 1px solid #cccccc;
      background-color: white;
      margin: 0;
      padding: 0;
    }

    table tr:nth-child(2n) {
      background-color: #f8f8f8;
    }

    table tr th {
      font-weight: bold;
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr td {
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr th :first-child, table tr td :first-child {
      margin-top: 0;
    }

    table tr th :last-child, table tr td :last-child {
      margin-bottom: 0;
    }

    img {
      max-width: 100%;
    }

    span.frame {
      display: block;
      overflow: hidden;
    }

    span.frame > span {
      border: 1px solid #dddddd;
      display: block;
      float: left;
      overflow: hidden;
      margin: 13px 0 0;
      padding: 7px;
      width: auto;
    }

    span.frame span img {
      display: block;
      float: left;
    }

    span.frame span span {
      clear: both;
      color: #333333;
      display: block;
      padding: 5px 0 0;
    }

    span.align-center {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-center > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: center;
    }

    span.align-center span img {
      margin: 0 auto;
      text-align: center;
    }

    span.align-right {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-right > span {
      display: block;
      overflow: hidden;
      margin: 13px 0 0;
      text-align: right;
    }

    span.align-right span img {
      margin: 0;
      text-align: right;
    }

    span.float-left {
      display: block;
      margin-right: 13px;
      overflow: hidden;
      float: left;
    }

    span.float-left span {
      margin: 13px 0 0;
    }

    span.float-right {
      display: block;
      margin-left: 13px;
      overflow: hidden;
      float: right;
    }

    span.float-right > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: right;
    }

    code, tt {
      font-family: "Lucida Console", "Courier New", courier;
      font-size: 12px;
      margin: 0 2px;
      padding: 3px 5px;
      white-space: nowrap;
      border: 1px solid #eaeaea;
      background-color: #f8f8f8;
      border-radius: 3px;
    }

    pre code {
      margin: 0;
      padding: 0;
      white-space: pre;
      border: none;
      background: transparent;
    }

    .highlight pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre code, pre tt {
      background-color: transparent;
      border: none;
    }

    span.line-numbers {
      margin-right: 10px;
    }

    img.logo {
      display: block;
      margin: 10px auto;
    }

    h1.logo {
      text-align: center;
      font-size: 40px;
    }
  </style>
</head>
<body>
  <div id="containter">
    <h1 class="logo">Practicing Ruby</h1>
    <img class="logo" src="../images/header.png" />
    <p>SOLID is a collection of five object oriented design principles that go nicely
together. Here’s a super brief summary pulled from <a href="http://en.wikipedia.org/wiki/SOLID">the wikipedia
page</a> on the topic:</p>

<ul>
  <li>
    <p>Single responsibility principle: an object should have only a single
responsibility.</p>
  </li>
  <li>
    <p>Open/closed principle: an object should be open for extension, but closed for
modification.</p>
  </li>
  <li>
    <p>Liskov substitution principle: objects in a program should be replaceable with
instances of their subtypes without altering the correctness of that program.</p>
  </li>
  <li>
    <p>Interface segregation principle: many client specific interfaces are better
than one general purpose interface.</p>
  </li>
  <li>
    <p>Dependency inversion principle: depend upon abstractions, do not depend upon
concretions</p>
  </li>
</ul>

<p>The term SOLID was coined by Uncle Bob Martin to group together these important
concepts. I had heard of each of the design principles SOLID covers over the
years, but didn’t really think much of them until I attended a great talk by
Sandi Metz at GoRuCo 2009. Fortunately, Confreaks recorded <a href="http://confreaks.net/videos/240-goruco2009-solid-object-oriented-design">Sandi’s
talk</a>
so I won’t need to try to summarize it here.</p>

<p>I’d strongly recommend watching that video before moving on, because it will go
through SOLID in a lot more detail than what I plan to do in this article. You
might also watch <a href="http://confreaks.net/videos/185-rubyconf2009-solid-ruby">another video on the same topic by Jim
Weirich</a>, which like
pretty much any other talk Jim has done, is likely to blow your mind.</p>

<p>Rather than giving a tutorial on these principles, I’m going to trust you to
either read up on them or watch the videos I’ve linked to. This way, we can
focus on what I think is a much more interesting problem: How to apply these
ideas to real code.</p>

<h3 id="single-responsibility-principle">Single responsibility principle</h3>

<p>The idea that an object should have only a single responsibility shouldn’t come
as a surprise. This concept is one of the selling points for object oriented
languages that sets them apart from the more procedural systems that preceded
them. The hard part about putting this idea into practice is figuring out just
how wide to cast the ‘single responsibility’ net.</p>

<p>In my experience, most objects are born with just one goal in mind, and so
adhere to this principle at least superficially in the early stages of
greenfield projects. It’s later when systems get more complex that our objects
lose their identity. To demonstrate this phenomena, we can look at the life
cycle of the Document object from my PDF generation library Prawn.</p>

<p>Back in early 2008, when the project was just beginning, my idea was that the
job of the Document class would be to wrap the low level concept of a Document
at the PDF layer, with a few extra convenience functions at the high level. For
a sketch of what that looked like at the time, we can take a look at the
object’s public methods.</p>

<pre><code>Directly implemented on Prawn::Document
  start_new_page, page_count, page_size, page_layout, render, render_file

Mixed in via Prawn::Document::Graphics
  line_width=, line, line_to, curve_to, curve, circle_at, ellipse_at,
  polygon, rectangle, stroke, fill, fill_color, stroke_color

Mixed in via Prawn::Document::PageGeometry
  page_dimensions
</code></pre>

<p>This is so early in Prawn’s history that it didn’t even have text support yet.
While the API wasn’t perfectly well factored at this point in time, the fact
that almost all the above methods directly produced PDF instructions or
manipulated low level structures made me feel that it was a reasonably cohesive
set of features.</p>

<p>Fast forward by a year, and we end up with feature explosion on <code>Document</code>.
Here’s what shipped in Prawn 0.4.1:</p>

<pre><code>Directly implemented on Prawn::Document
  start_new_page, page_count, cursor, render, render_file, bounds,
  bounds=, move_up, move_down, pad_top, pad_bottom, pad, mask,
  compression_enabled?, y, margin_box, margins, page_size,
  page_layout, font_size

Included via Prawn::Document::Text
  text, text_options, height_of (via Prawn::Document::Text::Wrapping),
  naive_wrap (via Prawn::Document::Text::Wrapping)

Included via Prawn::Document::PageGeometry
  page_dimensions

Included via Prawn::Document::Internals
  ref, add_content, proc_set, page_resources, page_fonts, 
  page_xobjects, names

Included via Prawn::Document::Annotations
  annotate, text_annotation, link_annotation

Included via Prawn::Document::Destinations
  dests, add_dest, dest_xyz, dest_fit,  dest_fit_horizontally, 
  dest_fit_vertically, dest_fit_rect, dest_fit_bounds,
  dest_fit_bounds_horizontally, dest_fit_bounds_vertically

Included via Prawn::Graphics
  move_to, line_to, curve_to, rectangle, line_width=, line_width,
  line, horizontal_line, horizontal_rule, vertical_line, curve,
  circle_at, ellipse_at, polygon, stroke, stroke_bounds, fill,
  fill_and_stroke, fill_color (via Prawn::Document::Color), 
  stroke_color (via Prawn::Document::Color)

Included via Prawn::Images
  image
</code></pre>

<p>The above list of methods is almost embarrassingly scattershot, but it was due
to an oversight. The mistake I made was thinking that splitting different
aspects of functionality into modules was a valid way of respecting the single
responsibility principle. But this is deeply flawed thinking, because the end
result of pulling in roughly 50 methods into a single object by mixing in 8
modules results in a single object, <code>Prawn::Document</code> having 60+ public methods
all sharing the same state and namespace. Any illusion of a physical separation
of concerns is all smoke and mirrors here.</p>

<p>Once an object gets this fat, thinking about the cohesiveness of the interface
is the most minor detail to be worried about. I’ve focused on the 60 public
methods here, but if we count private methods, they would easily exceed 100.
Sometimes folks think that private methods in mixins don’t actually get mixed
into the base object, but that’s an incorrect assumption, making this problem
much, much worse.</p>

<p>Having close to two hundred methods living in one space causes you to run into
really basic, fundamental problems such as namespace clashes on method names and
variables. It also makes data corruption downright easy, because it’s hard to
keep track of how a couple hundred methods manipulate a common dataset. Once you
reach this point, you’re back in procedural coding land where all manners of bad
things can happen.</p>

<p>Now that I’ve sufficiently kicked my own ass, I can tell you the solution to
this problem is simple, if not easy to refactor towards once you’ve already made
the mess: you just introduce more objects. To do so, we need to identify the
different concerns and group them together, putting abstraction barriers between
their implementations and the behaviors they provide.</p>

<p>An easy realization to make is that over time, Prawn’s <code>Document</code> became two
different things at the conceptual level. When we see methods like
<code>page_xobjects</code>, <code>ref</code>, and <code>proc_set</code>, we know that there are some low level
tools in use here. But what about methods like move_up, move_down, text, image,
and others like them? These are clearly meant for something that resembles a
domain specific language, and Prawn does look gorgeous at the high level, just
see the simple example below to see what I mean.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#036;font-weight:bold">Prawn</span>::<span style="color:#036;font-weight:bold">Document</span>.generate(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">hello.pdf</span><span style="color:#710">'</span></span>) <span style="color:#080;font-weight:bold">do</span> 
  text <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Hello Prawn!</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span> 
</pre></div>
</div>
</div>

<p>With 20/20 hindset, the solution to this problem is obvious: Produce a whole
layer of low level tooling that closely follows the PDF spec, creating objects
for managing things like a PDF-level page, the rendering of raw PDF strings,
etc. Make as many objects as necessary to do that, and then maybe provide a
facade that makes interacting with them a bit easier.</p>

<p>Then, for the higher level features, do the same thing. Have an object who’s job
is to provide nice looking methods that rely on Prawn’s lower level
objects to do the dirty work. Dedicate whole objects or even clusters of objects
to text, images, graphics, and any other cluster of functionality that
previously was mixed into Document directly. The objects might require a bit
more wiring, but the facade can hide that by doing things like the pseudo-code
below.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">text</span>(contents, options={})
  text_element = <span style="color:#036;font-weight:bold">Prawn</span>::<span style="color:#036;font-weight:bold">TextElement</span>.new(contents, options)
  text_element.render_on(current_page)
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>Naming the benefits of this over the previous design would take a long time, but
we’ve at least cut out those pesky namespace and data corruption concerns
while providing a cohesive API.</p>

<p>While I don’t think that the scale of our design problem in Prawn is comparable
to what most Ruby hackers are likely to experience in their day to day work, it
does show just how bad things can get when you start dealing with very complex
systems. Prawn has improved a lot since its 0.4.1 release, but undoing the
damage that was done by neglecting this for so long has been a slow and painful
process for us.</p>

<p>The real lesson here is that you can’t respect SRP without real abstraction
barriers. SRP is about more than just creating a cohesive API, you actually need
to create a physical separation of concerns at the implementation level of your
system.</p>

<p>Since it’s very likely that you’re experiencing this sort of issue on a smaller
scale in the projects you’re working on, keeping the story about what happened
to me in Prawn in mind may help you learn from my mistakes instead of your own.</p>

<h3 id="openclosed-principle">Open/closed principle</h3>

<p>The open/closed principle tells us that an object should be open for extension,
but closed for modification. This can mean a lot of different things, but the
basic idea is that when you introduce a new behavior to an existing system,
rather than modifying old objects you should create new objects which inherit
from or delegate to the target object you wish to extend. The theoretical payoff
is that taking this approach improves the stability of your application by
preventing existing objects from changing frequently, which also makes
dependency chains a bit less fragile because there are less moving parts to
worry about.</p>

<p>Personally, I feel that treating this principle as an absolute law would lead to
the creation of a lot of unnecessary wrapper objects that could make your
application harder to understand and maintain, so much that it might outweigh
the stability benefits you’d gain. But that doesn’t mean these ideas don’t have
their value, in fact, they provide an excellent alternative to extensive
monkeypatching of third party code.</p>

<p>To illustrate this, I’d like to talk about 
<a href="https://github.com/carlosantoniodasilva/i18n_alchemy">i18n_alchemy</a>, a project
by Carlos Antonio da Silva that was built as a student project for his Mendicant
University core course. The goal of this project was to make it easy to add
localizations for numeric, time, and date values in ActiveRecord.</p>

<p>Early on in the course, Carlos came to me with an implementation that
more-or-less followed the standard operating procedure for developing Rails
plugins. While Carlos shouldn’t be faulted for following community trends here,
the weapon of choice was a shotgun blast into an <code>ActiveRecord::Base</code> object’s
namespace, via a mixin which could be used on a per-model level. By including
this module, you would end up with behavior that looked a bit like this:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>some_model = <span style="color:#036;font-weight:bold">SomeModel</span>.where(something)
some_model.a_number     <span style="color:#777">#=&gt; &lt;a localized value&gt;</span>
some_model.a_number_raw <span style="color:#777">#=&gt; &lt;the original numeric value&gt;</span>
</pre></div>
</div>
</div>

<p>Now, there are pros and cons to this approach, but I felt pretty sure that we
could do better, and through conversations with Carlos, we settled on a much
better design that didn’t make such far reaching changes to the model objects.
Before I explain how it works, I’d like to show an example of how i18n_alchemy
works now:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>some_model = <span style="color:#036;font-weight:bold">SomeModel</span>.where(something)
some_model.a_number     <span style="color:#777">#=&gt; &lt;the original numeric value&gt;</span>

localized_model = some_model.localized
localized_model.a_number <span style="color:#777">#=&gt; &lt;a localized value&gt;</span>
</pre></div>
</div>
</div>

<p>In this new implementation, you do have to explicitly ask for a localized
object, but that small change gains us a lot. The module that gives us
<code>SomeModel#localized</code> only introduces that one method, rather than a hook that
gets run for every <code>ActiveRecord::Base</code> method. That means that
ordinary calls to models extended by i18n_alchemy still work as they always did.</p>

<p>Our localized model act differently, but it’s actually not an instance of
SomeModel at all. Instead, it is a simple proxy object that defines special
accessors for the methods that i18n_localized, delegating everything else to the
target model instance.</p>

<p>This makes it possible for the consumer to choose when it’d be best to work with
the localized object, and when it’d be best to work with the model directly.
Unlike the first implementation which breaks the ordinary expected
behavior of an ActiveRecord model, this approach creates a new entity which can
have new behaviors while reusing old functionality.</p>

<p>We were both pretty proud of the results here, because it gives some of the
convenient feel of mixing in some new functionality into an existing Ruby object
without the many downsides. This of course is only a single example of how you
can use OCP in your own code, but I think it’s a particularly good one.</p>

<h3 id="liskov-substitution-principle">Liskov substitution principle</h3>

<p>The idea behind Liskov substitution is that functions that are designed operate
on a given type of object should work without modification when they operate on
objects that belong to a subtype of the original type. In many object oriented
languages, the type of an object is closely tied to its class, and so in those
languages, this principle mostly describes a rule about a relationship between a
subclass and a superclass. In Ruby, this concept is a bit more fluid, and
probably requires a bit more explanation up front.</p>

<p>When we talk about the type of an object in Ruby, we’re concerned with
what messages that object responds to rather than what class that object is an
instance of. This seems like a subtle difference, but it has a profound
impact on how we think about thing. In Ruby, type checking can range from very
strict to none at all, as shown by the examples below.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>  <span style="color:#777">## Different ways of type checking, from most to least coarse ##</span>

  <span style="color:#777"># verify the class of an object matches a specific class</span>
  object.class == <span style="color:#036;font-weight:bold">Array</span>

  <span style="color:#777"># verify object's class descends from a specific class</span>
  object.kind_of?(<span style="color:#036;font-weight:bold">Array</span>)   

  <span style="color:#777"># verify a specific module is mixed into this object</span>
  object.kind_of?(<span style="color:#036;font-weight:bold">Enumerable</span>)
  
  <span style="color:#777"># verify object claims to understand the specified message</span>
  object.respond_to?(<span style="color:#A60">:sort</span>)   

  <span style="color:#777"># don't verify, trust object to either behave or raise an error</span>
  object.sort                 
</pre></div>
</div>
</div>

<p>Regardless of the level of granularity of the definition, objects that are meant
to be treated as subtypes of a base type should not break the contracts of the
base type. This is a very hard standard to live up to when dealing with ordinary
class inheritance or module mixins, since you basically need to know the
behavior specifications for everything in the ancestry chain, and so the rule of
thumb is basically not to inherit from anything or mix in a module unless you’re
fairly certain that the behavior you’re implementing will not interfere with the
internal operations of your ancestors.</p>

<p>To demonstrate a bit of a weird LSP issue, let’s think about what happens when
you subclass an <code>ActiveRecord::Base</code> object. Technically speaking, if we give
ourselves a pass for breaking signature of methods provided by Object, we’d
still need to keep track of all the behaviors <code>ActiveRecord::Base</code> provides, and
take care not to violate them. Here’s a brief list of method names, but keep in
mind we’d also need to match signatures and return values.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt;&gt; <span style="color:#036;font-weight:bold">ActiveRecord</span>::<span style="color:#036;font-weight:bold">Base</span>.instance_methods(<span style="color:#069">false</span>).sort
=&gt; [<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">==</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">[]</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">[]=</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">attribute_for_inspect</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">attribute_names</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">attribute_present?</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">attribute_types_cached_by_default</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">attributes</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">attributes=</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">attributes_before_type_cast</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">becomes</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">cache_key</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">clone</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">colorize_logging</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">column_for_attribute</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">configurations</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">connection</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">connection_handler</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">decrement</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">decrement!</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">default_scoping</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">default_timezone</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">delete</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">destroy</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">destroy_without_callbacks</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">destroy_without_transactions</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">destroyed?</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">eql?</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">freeze</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">frozen?</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">has_attribute?</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hash</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">id</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">id=</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">id_before_type_cast</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">include_root_in_json</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">increment</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">increment!</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">inspect</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lock_optimistically</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">logger</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">nested_attributes_options</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">new_record?</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">partial_updates</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">partial_updates?</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">pluralize_table_names</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">primary_key_prefix_type</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">quoted_id</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">readonly!</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">readonly?</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">record_timestamps</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">reload</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">reload_without_autosave_associations</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">reload_without_dirty</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">save</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">save!</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">save_without_dirty</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">save_without_dirty!</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">save_without_transactions</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">save_without_transactions!</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">save_without_validation</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">save_without_validation!</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">schema_format</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">skip_time_zone_conversion_for_attributes</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">store_full_sti_class</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">store_full_sti_class?</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">table_name_prefix</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">table_name_suffix</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">time_zone_aware_attributes</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">timestamped_migrations</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">to_param</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">toggle</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">toggle!</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">update_attribute</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">update_attributes</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">update_attributes!</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">valid?</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">valid_without_callbacks?</span><span style="color:#710">&quot;</span></span>,
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">write_attribute</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">write_attribute_without_dirty</span><span style="color:#710">&quot;</span></span>]
</pre></div>
</div>
</div>

<p>Hopefully your impression after reading this list is that LSP is basically
impossible to be a purist about, but let’s try to come up with a plausible
violation that isn’t some obscure edge case. For example, what happens if we’re
building a database model for describing a linux system configuration, which has
a field called logger in it? You can certainly at least get away with the
migration for it without Rails complaining, using something like the code shown
below.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">CreateLinuxConfigs</span> &lt; <span style="color:#036;font-weight:bold">ActiveRecord</span>::<span style="color:#036;font-weight:bold">Migration</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#069">self</span>.<span style="color:#06B;font-weight:bold">up</span>
    create_table <span style="color:#A60">:linux_configs</span> <span style="color:#080;font-weight:bold">do</span> |t|
      t.text <span style="color:#A60">:logger</span>
      t.timestamps
    <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#069">self</span>.<span style="color:#06B;font-weight:bold">down</span>
    drop_table <span style="color:#A60">:linux_configs</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>The standard behavior of <code>ActiveRecord</code>’s models is to provide dynamic accessors
to a record’s database fields, which means we should expect the following
behavior:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>config        = <span style="color:#036;font-weight:bold">LinuxConfig</span>.new
config.logger = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">syslog-ng</span><span style="color:#710">&quot;</span></span>
config.logger <span style="color:#777">#=&gt; &quot;syslog-ng&quot;</span>
</pre></div>
</div>
</div>

<p>But because <code>ActiveRecord::Base</code> also implements a method called <code>logger</code>, and the
dynamic attribute lookup is just a method_missing hack, we end up with a
different behavior:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>config        = <span style="color:#036;font-weight:bold">LinuxConfig</span>.new
config.logger = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">syslog-ng</span><span style="color:#710">&quot;</span></span> 
config.logger <span style="color:#777">#=&gt; #&lt;ActiveSupport::BufferedLogger:0x00000000b6de38 </span>
              <span style="color:#777">#     @level=0, @buffer={}, @auto_flushing=1, </span>
              <span style="color:#777">#     @guard=#&lt;Mutex:0x00000000b6dde8&gt;,</span>
              <span style="color:#777">#     @log=#&lt;File:/home/x/demo/log/development.log&gt;&gt;</span>
</pre></div>
</div>
</div>

<p>If you’ve been following closely, you probably saw this coming from a mile away,
even if you couldn’t predict the exact behavior. It’s worth mentioning that even
Rails knows that this sort of setup will lead to bad things, but their checks
which raise an error when they spot this LSP violation apparently aren’t
comprehensive. But to be fair, if we try to set this at the time our record was
initialized, or if we try to use write_attribute, we get a pretty decent error
message.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt;&gt; config = <span style="color:#036;font-weight:bold">LinuxConfig</span>.new(<span style="color:#A60">:logger</span> =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">syslog-ng</span><span style="color:#710">&quot;</span></span>)
<span style="color:#036;font-weight:bold">ActiveRecord</span>::<span style="color:#036;font-weight:bold">DangerousAttributeError</span>: logger is defined by <span style="color:#036;font-weight:bold">ActiveRecord</span>
</pre></div>
</div>
</div>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt;&gt; config = <span style="color:#036;font-weight:bold">LinuxConfig</span>.new
=&gt; <span style="color:#777">#&lt;LinuxConfig id: nil, logger: nil, created_at: nil, updated_at: nil&gt;</span>
&gt;&gt; config.write_attribute(<span style="color:#A60">:logger</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">syslog-ng</span><span style="color:#710">&quot;</span></span>)
<span style="color:#036;font-weight:bold">ActiveRecord</span>::<span style="color:#036;font-weight:bold">DangerousAttributeError</span>: logger is defined by <span style="color:#036;font-weight:bold">ActiveRecord</span>
</pre></div>
</div>
</div>

<p>This sort of proactive error checking is actually more than we should expect
from most parent classes, <code>ActiveRecord::Base</code> just takes special consideration
because it is so widely used. You can’t expect every object you might subclass
to even try to catch these sorts of violations, and it’s not a great idea to
introduce this sort of logic into your own base classes without carefully
considering the context. Of course, that doesn’t mean that there aren’t measures
you can take to avoid LSP violations in code that you design yourself.</p>

<p>I don’t want to go into too much detail here, but there are two techniques I
like to use for mitigating LSP issues. The first one is object composition, and
the second is defining per-object behavior. Just as an experiment, I’ve thrown
together a rethinking of how <code>ActiveRecord</code> could handle dynamic accessors in a
slightly more robust way.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">delegate</span><span style="color:#710">&quot;</span></span>

<span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">DynamicFinderProxy</span>

  extend <span style="color:#069">self</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">build_proxy</span>(record)
    proxy = <span style="color:#036;font-weight:bold">SimpleDelegator</span>.new(record)
    record.attribute_names.each <span style="color:#080;font-weight:bold">do</span> |a|
      proxy.singleton_class.instance_eval <span style="color:#080;font-weight:bold">do</span>
        define_method(a) { read_attribute(a) }
        define_method(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>a<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20">=</span><span style="color:#710">&quot;</span></span>) { |v| write_attribute(a,v) }
      <span style="color:#080;font-weight:bold">end</span>
    <span style="color:#080;font-weight:bold">end</span>

    proxy
  <span style="color:#080;font-weight:bold">end</span>

<span style="color:#080;font-weight:bold">end</span>

<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">FakeActiveRecord</span>

  <span style="color:#080;font-weight:bold">class</span> &lt;&lt; <span style="color:#B06;font-weight:bold">self</span>
    <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">new</span>
      obj = allocate
      obj.send(<span style="color:#A60">:initialize</span>)
      <span style="color:#036;font-weight:bold">DynamicFinderProxy</span>.build_proxy(obj)
    <span style="color:#080;font-weight:bold">end</span>

    <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">column_names</span>(*names)
      <span style="color:#33B">@column_names</span> = names <span style="color:#080;font-weight:bold">unless</span> names.empty?
      <span style="color:#33B">@column_names</span>
    <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">attribute_names</span>
    <span style="color:#069">self</span>.class.column_names
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">read_attribute</span>(a)
    logger.puts(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Reading </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>a<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>)
    instance_variable_get(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">@</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>a<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>)
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">write_attribute</span>(a,v)
    logger.puts(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Writing </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>a<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>)
    instance_variable_set(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">@</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>a<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>,v)
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">logger</span>
    <span style="color:#069">STDOUT</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">LinuxConfig</span> &lt; <span style="color:#036;font-weight:bold">FakeActiveRecord</span>
  column_names <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">logger</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">crontab</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>

record = <span style="color:#036;font-weight:bold">LinuxConfig</span>.new
record.logger = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">syslog-ng</span><span style="color:#710">&quot;</span></span>
p record.logger
</pre></div>
</div>
</div>

<p>Now, I’ll admit that there is some deep voodoo in this code, but it at least
indicates to me that we should be thinking differently about our options in
Ruby. We have more than just vanilla inheritance to play with, and even ordinary
mixins have their limitations, so maybe we need a whole new set of design
principles that take Ruby’s deeply dynamic nature into account? Or perhaps I’ve
just passed the midway point in a very long article and have decided to go off
on a little tangent to keep myself entertained. I’ll let you be the judge.</p>

<h3 id="interface-segregation-principle">Interface segregation principle</h3>

<p>I’ve seen a couple different interpretations of the interface segregation
principle, with the most narrow ones almost directly outlining the use case for
Java-style interfaces, which is to prevent code from specifying that an object
must be a specific type when all that is required is a certain set of methods to
have a meaningful implementation.</p>

<p>Ruby offers a lot of flexibility and its dynamic typing makes a lot of interface
segregation principle violations just go away on their own. That having been
said, we still see a lot of <code>is_a?()</code> and <code>respond_to?()</code> checks which are both
a form of LSP violation.</p>

<p>To protect against those violations, the best bet is to embrace duck typing as
much as possible. Since this article is already super long and we’ve already
covered duck typing extensively in issues
<a href="http://practicingruby.com/articles/43">#14</a> and
<a href="http://practicingruby.com/articles/44">#15</a> of Practicing Ruby, It would be
sufficient to simply re-read those articles if you need a refresher and then
promptly move on to the next principle. But in case you want to dig deeper, here
are a couple more articles related to this topic that you should definitely read
if you haven’t seen them before. All three are about how to get around
explicitly naming classes in case statements, which is a form of LSP violation.</p>

<ul>
  <li>
    <p><a href="http://sandimetz.com/2009/06/ruby-case-statements-and-kindof.html">Ruby case statements and kind_of?(Sandi Metz)</a></p>
  </li>
  <li>
    <p><a href="http://blog.rubybestpractices.com/posts/aaronp/001_double_dispatch_dance.html">The Double Dispatch Dance (Aaron Patterson)</a></p>
  </li>
  <li>
    <p><a href="http://blog.rubybestpractices.com/posts/gregory/008-decorator-delegator-disco.html">The Decorator Delegator Disco (Gregory Brown)</a></p>
  </li>
</ul>

<p>That should add an extra hour or so of homework for you. This is getting a bit
crazy though, so let’s hit that last principle and call it a day.</p>

<h3 id="dependency-inversion-principle">Dependency inversion principle</h3>

<p>You probably already know about the values of dependency inversion (aka
dependency injection) if you’ve been working in Ruby for a while now. You also
probably know that unlike some other languages, there really isn’t a need for DI
frameworks because it implements all the necessary tools for good DI at the
language level. But in case you didn’t get the memo, I’ll go through a quick
example of how dependency inversion can come in handy.</p>

<p>Suppose we have a simple object, like a <code>Roster</code>, which keeps track of a list of
people, and we have a <code>RosterPrinter</code> which creates formatted output from that
list. Then we might end up with some code similar to what is shown below.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Roster</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">initialize</span>        
    <span style="color:#33B">@participants</span> = []
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">&lt;&lt;</span>(new_participant)
    <span style="color:#33B">@participants</span> &lt;&lt; new_participant
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">participant_names</span>
    <span style="color:#33B">@participants</span>.map { |e| e.full_name }
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_s</span>
    <span style="color:#036;font-weight:bold">RosterPrinter</span>.new(participant_names).to_s
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">RosterPrinter</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">initialize</span>(participant_names)
    <span style="color:#33B">@participant_names</span> = participant_names
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_s</span>
    <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Participants:</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span> +
    <span style="color:#33B">@participant_names</span>.map { |e| <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">* </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>e<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span> }.join(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>)
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>The nice thing about this code is that it separates the presentation of a roster
from its data representation, bringing it in line with the single
responsibility principle. But the problem with it is that <code>Roster</code> and
<code>RosterPrinter</code> are needlessly coupled, which limits the value of
separating the objects in the first place. Modifying <code>Roster#to_s()</code> can
solve this problem.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Roster</span>
  <span style="color:#777"># other methods same as before</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_s</span>(printer=<span style="color:#036;font-weight:bold">RosterPrinter</span>)
    printer.new(participant_names).to_s
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#777"># usage</span>
roster.to_s 
</pre></div>
</div>
</div>

<p>This new code is functionally equivalent to our previous example when called
with no arguments, but opens a whole host of new opportunities. For example, we
can trivially swap in any printer object we’d like now.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">HTMLRosterPrinter</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">initialize</span>(participant_names)
    <span style="color:#33B">@participant_names</span> = participant_names
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">to_s</span>
    <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">&lt;h3&gt;Participants&lt;/h3&gt;&lt;ul&gt;</span><span style="color:#710">&quot;</span></span>+
    <span style="color:#33B">@participant_names</span>.map { |e| <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">&lt;li&gt;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>e<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20">&lt;/li&gt;</span><span style="color:#710">&quot;</span></span> } +
    <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">&lt;/ul&gt;
  end
end

# usage
roster.to_s(HTMLRosterPrinter)
</span></span></pre></div>
</div>
</div>

<p>By injecting the printer object into <code>Roster</code>, we avoid resorting to
something as uncouth as creating a <code>Roster</code> subclass for the sole purpose of
wiring up the <code>HTMLRosterPrinter</code>.</p>

<p>Of course, the most common place that talk about dependency inversion comes up
is when folks are thinking about automated testing. While Ruby makes it possible
to mock out calls to pretty much any object, it’s a whole lot cleaner to pass in
raw mock objects than it is to set expectations on real objects.</p>

<p>Dependency inversion can really come in handy, but it’s important to provide
sensible defaults so that you don’t end up forcing consumers of your API to do a
lot of tedious wiring. The trick is to make it so you can swap out
implementations easily, it’s not as important for your code to have no opinion
about which implementation it should use. Folks sometimes forget this and as a
result their code gets quite annoying to work with. However, Ruby makes it easy
to provide defaults, so there is no real reason why this issue can’t be averted.</p>

<h3 id="reflections">Reflections</h3>

<p>This article is much longer than I expected it would be, but I feel like I’ve
just scratched the surface. An interesting thing about the SOLID principles is
that they all sort of play into each other, so you tend to get the most out of
them by looking at all five concepts at once rather than each one in isolation.</p>

<p>One thing I want to emphasize is that when I make use of SOLID or any other set
of design principles, I use them as a metric rather than a set of
constructive rules. I don’t typically set out designing a system with all of
these different guidelines in mind, as that would give me a claustrophobic
feeling. However, when the time comes to sanity check a new design or make
incremental improvements to an old one during a refactoring session, SOLID
provides a good checklist for pinpointing areas of my code that might deserve
some rethinking.</p>

<p>Sometimes you break these rules by accident, and that’s okay. Sometimes you
break them because you are making a conscious trade to avoid some other bad
thing from happening, and that’s okay too. As long as you’re regularly checking
your assumptions about things and actually caring about the overall design of
your system, you shouldn’t feel guilty for not following these guidelines
perfectly. In fact, it is more dangerous to blindly follow design principles to
the letter than it is to completely ignore them.</p>

<p>We have much, much more design discussion to come, so hopefully you enjoyed this
article. :)</p>

<blockquote>
  <p><strong>NOTE:</strong> This article has also been published on the Ruby Best Practices blog. There 
<a href="http://blog.rubybestpractices.com/posts/gregory/055-issue-23-solid-design.html#disqus_thread">may be additional commentary</a> 
over there worth taking a look at.</p>
</blockquote>


  </div>
</body>
</html>

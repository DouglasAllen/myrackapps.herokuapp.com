<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/>
  <title>Practicing Ruby</title>
  <style>
    body {
      font-family: "Helvetica Neue", arial, sans-serif;
      font-size: 14px;
      line-height: 1.6;
      padding-top: 10px;
      padding-bottom: 10px;
      background-color: white;
      padding: 30px;
      color: #333;
      border: 1px solid #aaa;
      max-width: 900px;
      margin: 20px auto;
    }

    body > *:first-child {
      margin-top: 0 !important;
    }

    body > *:last-child {
      margin-bottom: 0 !important;
    }

    a {
      color: #4183C4;
      text-decoration: none;
    }

    a.absent {
      color: #cc0000;
    }

    a.anchor {
      display: block;
      padding-left: 30px;
      margin-left: -30px;
      cursor: pointer;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
    }

    h1, h2, h3, h4, h5, h6 {
      margin: 20px 0 10px;
      padding: 0;
      font-weight: bold;
      -webkit-font-smoothing: antialiased;
      cursor: text;
      position: relative;
    }

    h2:first-child, h1:first-child, h1:first-child + h2, h3:first-child, h4:first-child, h5:first-child, h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor {
      text-decoration: none;
    }

    h1 tt, h1 code {
      font-size: inherit;
    }

    h2 tt, h2 code {
      font-size: inherit;
    }

    h3 tt, h3 code {
      font-size: inherit;
    }

    h4 tt, h4 code {
      font-size: inherit;
    }

    h5 tt, h5 code {
      font-size: inherit;
    }

    h6 tt, h6 code {
      font-size: inherit;
    }

    h1 {
      font-size: 28px;
      color: black;
    }

    h2 {
      font-size: 24px;
      border-bottom: 1px solid #cccccc;
      color: black;
    }

    h3 {
      font-size: 18px;
    }

    h4 {
      font-size: 16px;
    }

    h5 {
      font-size: 14px;
    }

    h6 {
      color: #777777;
      font-size: 14px;
    }

    p, blockquote, ul, ol, dl, li, table, pre {
      margin: 3px 0;
    }

    hr {
      background: transparent url("http://tinyurl.com/bq5kskr") repeat-x 0 0;
      border: 0 none;
      color: #cccccc;
      height: 4px;
      padding: 0;
    }

    body > h2:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child + h2 {
      margin-top: 0;
      padding-top: 0;
    }

    body > h3:first-child, body > h4:first-child, body > h5:first-child, body > h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
      margin-top: 0;
      padding-top: 0;
    }

    h1 p, h2 p, h3 p, h4 p, h5 p, h6 p {
      margin-top: 0;
    }

    li p.first {
      display: inline-block;
    }

    ul, ol {
      padding-left: 30px;
    }

    ul :first-child, ol :first-child {
      margin-top: 0;
    }

    ul :last-child, ol :last-child {
      margin-bottom: 0;
    }

    dl {
      padding: 0;
    }

    dl dt {
      font-size: 14px;
      font-weight: bold;
      font-style: italic;
      padding: 0;
      margin: 15px 0 5px;
    }

    dl dt:first-child {
      padding: 0;
    }

    dl dt > :first-child {
      margin-top: 0;
    }

    dl dt > :last-child {
      margin-bottom: 0;
    }

    dl dd {
      margin: 0 0 15px;
      padding: 0 15px;
    }

    dl dd > :first-child {
      margin-top: 0;
    }

    dl dd > :last-child {
      margin-bottom: 0;
    }

    blockquote {
      border-left: 4px solid #dddddd;
      padding: 0 15px;
      color: #777777;
    }

    blockquote > :first-child {
      margin-top: 0;
    }

    blockquote > :last-child {
      margin-bottom: 0;
    }

    table {
      padding: 0;
    }
    table tr {
      border-top: 1px solid #cccccc;
      background-color: white;
      margin: 0;
      padding: 0;
    }

    table tr:nth-child(2n) {
      background-color: #f8f8f8;
    }

    table tr th {
      font-weight: bold;
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr td {
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr th :first-child, table tr td :first-child {
      margin-top: 0;
    }

    table tr th :last-child, table tr td :last-child {
      margin-bottom: 0;
    }

    img {
      max-width: 100%;
    }

    span.frame {
      display: block;
      overflow: hidden;
    }

    span.frame > span {
      border: 1px solid #dddddd;
      display: block;
      float: left;
      overflow: hidden;
      margin: 13px 0 0;
      padding: 7px;
      width: auto;
    }

    span.frame span img {
      display: block;
      float: left;
    }

    span.frame span span {
      clear: both;
      color: #333333;
      display: block;
      padding: 5px 0 0;
    }

    span.align-center {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-center > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: center;
    }

    span.align-center span img {
      margin: 0 auto;
      text-align: center;
    }

    span.align-right {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-right > span {
      display: block;
      overflow: hidden;
      margin: 13px 0 0;
      text-align: right;
    }

    span.align-right span img {
      margin: 0;
      text-align: right;
    }

    span.float-left {
      display: block;
      margin-right: 13px;
      overflow: hidden;
      float: left;
    }

    span.float-left span {
      margin: 13px 0 0;
    }

    span.float-right {
      display: block;
      margin-left: 13px;
      overflow: hidden;
      float: right;
    }

    span.float-right > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: right;
    }

    code, tt {
      font-family: "Lucida Console", "Courier New", courier;
      font-size: 12px;
      margin: 0 2px;
      padding: 3px 5px;
      white-space: nowrap;
      border: 1px solid #eaeaea;
      background-color: #f8f8f8;
      border-radius: 3px;
    }

    pre code {
      margin: 0;
      padding: 0;
      white-space: pre;
      border: none;
      background: transparent;
    }

    .highlight pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre code, pre tt {
      background-color: transparent;
      border: none;
    }

    span.line-numbers {
      margin-right: 10px;
    }

    img.logo {
      display: block;
      margin: 10px auto;
    }

    h1.logo {
      text-align: center;
      font-size: 40px;
    }
  </style>
</head>
<body>
  <div id="containter">
    <h1 class="logo">Practicing Ruby</h1>
    <img class="logo" src="../images/header.png" />
    <p>My article on the <a href="http://practicingruby.com/articles/52">SOLID design
principles</a> was inspired by a great talk
I saw by Sandi Metz at GoRuCo 2009. Coincidentally, this  article is inspired by
another great talk I saw in 2009, called <a href="http://confreaks.net/videos/77-mwrc2009-the-building-blocks-of-modularity">The Building Blocks of
Modularity</a>.
This talk was given by Jim Weirich at MWRC, and if you haven’t seen it yet, I
urge you to stop what you’re doing and watch it right now.</p>

<p>In the talk, Jim jokingly claims he’s presenting on the “Grand Unified Theory of
Software Development”. Personally, I think that isn’t too far off the mark,
because connascence is a fundamentally simple concept when compared to things
like the SOLID principles or any of other design concepts we’ll be studying in
this series.</p>

<h3 id="brief-introduction-to-connascence-for-the-uninitiated">Brief introduction to connascence for the uninitiated</h3>

<p>Since I didn’t know the concept of connascence even existed before seeing Jim’s
talk, and because it’s not a super common discussion topic even among design
geeks, we should at least steal some <a href="http://en.wikipedia.org/wiki/Connascent_software_components">content from
Wikipedia</a> to frame
our discussion around:</p>

<blockquote>
  <p><i>“Two software components are connascent if a change in one would require the other to be modified in order to maintain the overall correctness of the system. Connascence is a way to characterize and reason about certain types of complexity in software systems.”</i></p>
</blockquote>

<p>If you haven’t watched Jim’s talk yet, I’ll remind you to go ahead and do that
now. But if some reason you can’t or won’t, you should know that the kinds of
complexity that connascence can be used to reason about all have
to do with coupling. The relationship between the concept of connascence to the
concept of coupling becomes a little more clear when you look at the various
kinds of connascence that can be found in software systems. Below I’ve listed
out the various kinds of connascence in order from weakest to strongest:</p>

<ul>
  <li><b>Name:</b> when multiple components must agree on the name of an entity.</li>
  <li><b>Type:</b> when multiple components must agree on the type of an entity.</li>
  <li><b>Meaning:</b> when multiple components must agree on the meaning of specific values.</li>
  <li><b>Position:</b> when multiple components must agree on the order of values.</li>
  <li><b>Algorithm:</b> when multiple components must agree on a particular algorithm.</li>
  <li><b>Execution (order):</b> when the order of execution of multiple components is important.</li>
  <li><b>Timing:</b> when the timing of the execution of multiple components is important.</li>
  <li><b>Identity:</b> when multiple components must reference the entity. </li>
</ul>

<p>Knowing the various kinds of connascence gives us a metric for determining the characteristics and severity of the coupling in our systems. The idea is simple: The more remote the connection between two clusters of code, the weaker the connascence between them should be.</p>

<p>Good design principles encourages us to move from tight coupling to looser
coupling where possible. But connascence allows us to be much more specific
about what kinds of problems we’re dealing with, which makes it easier to reason
about the types of refactorings that can be used to weaken the connascence
between components.</p>

<p>In this article, I will show how you can convert instance of Type, Meaning, 
Position, and Algorithm-based
connascence down to Connascence of Name. While all forms of connascence are
worth studying, these ones are the most likely to appear in your daily work.</p>

<h3 id="connascence-of-name">Connascence of Name</h3>

<p>Name based coupling exists when a name change in one place requires a code
change in other places. Being the weakest form of connascence, it’s also by far
the most common. Every module, class, method and variable we create introduces
connascence of name, assuming it is actually used for something. As an example,
consider the following code:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>mailer = <span style="color:#036;font-weight:bold">Mailer</span>.new
mailer.deliver(<span style="color:#A60">:to</span>      =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">gregory.t.brown@gmail.com</span><span style="color:#710">&quot;</span></span>, 
               <span style="color:#A60">:from</span>    =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">fake@fake.com</span><span style="color:#710">&quot;</span></span>,
               <span style="color:#A60">:subject</span> =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">You have won a lifetime supply of...</span><span style="color:#710">&quot;</span></span>,
               <span style="color:#A60">:body</span>    =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Dear Sir, I am pleased to inform...</span><span style="color:#710">&quot;</span></span>)
</pre></div>
</div>
</div>

<p>In just this script, we see an incredible amount of name based coupling. Any of
the following trivial changes to Mailer would cause all code that depends on it
to break immediately.</p>

<ul>
  <li>
    <p>Wrapping the Mailer class definition in a namespace, e.g. <code>FancyUnicorn::Mailer</code></p>
  </li>
  <li>
    <p>Renaming the <code>deliver()</code> method to <code>send_message()</code></p>
  </li>
  <li>
    <p>Renaming any of the keys in the hash passed to <code>deliver()</code>, i.e. changing
the <code>:to</code> key so that it reads <code>:recipient</code></p>
  </li>
</ul>

<p>But the fact is, there isn’t really any way around this sort of coupling in most
scenarios, and it’s not necessarily a sign of a problem. That having been said,
the reason why naming things is so important in computer science is because even
loosely coupled, highly cohesive systems have copious amounts of name based
coupling, which have widespread effects that only increase as systems get more
complex.</p>

<p>Sometimes, it is possible to eliminate Connascence of Name and the the coupling
that comes along with it. For example, consider this way of defining class
methods in Ruby:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Mailer</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#036;font-weight:bold">Mailer</span>.<span style="color:#06B;font-weight:bold">configure</span>(*args)
    <span style="color:#777">#...</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>There is a clear dependence in this code between the second line of code and the
first, in which if the first line changes, so too must the second line. We can
rewrite this to avoid that coupling, if we just take advantage of Ruby’s <code>self</code>
keyword here:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Mailer</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#069">self</span>.<span style="color:#06B;font-weight:bold">configure</span>(*args)
    <span style="color:#777">#...</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>But while eliminating Connascense of Name is desireable when it is both possible
and convenient to do so, it’s not always realistic. We need to accept that
because names don’t change all that often, a little bit of CoN is often
harmless. In fact, when given the choice between CoN and other forms of
connascence, name based coupling is preferable. We will now take
a look at the other forms of connascence to see why that is the case.</p>

<h3 id="connascence-of-type">Connascence of Type</h3>

<p>Folks like to think that Ruby is immune to typing issues, but that 
assumption is often far too optimistic. The following code is a 
direct example of Connascence of Type:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">average</span>(values)
   raise <span style="color:#036;font-weight:bold">ArgumentError</span> <span style="color:#080;font-weight:bold">unless</span> values.kind_of?(<span style="color:#036;font-weight:bold">Array</span>)

   values.inject(<span style="color:#A60">:+</span>) / values.size.to_f
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>One might attempt to resolve the problem by moving away from strict class
checking and instead use a <code>respond_to?()</code> check:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">average</span>(values)
   <span style="color:#080;font-weight:bold">unless</span> values.respond_to?(<span style="color:#A60">:inject</span>) &amp;&amp; values.respond_to?(<span style="color:#A60">:size</span>)
     raise <span style="color:#036;font-weight:bold">ArgumentError</span> 
   <span style="color:#080;font-weight:bold">end</span>

   values.inject(<span style="color:#A60">:+</span>) / values.size.to_f
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>This certainly loosens the type coupling, but does not eliminate it. If we
accept the notion that the type of a Ruby object is defined by what that object
can do, <code>respond_to?()</code> is still a form of type check, done at the method level
instead of at the level of the class hierarchy. It can sometimes even result in
false negatives, because not all code which implements dynamic behavior through
<code>method_missing()</code> updates <code>respond_to?()</code> to add those methods. This can lead
to code similar to previous example to fail with certain kinds of proxy objects,
even though they implement all necessary behaviors.</p>

<p>To truly free ourselves from Connascence of Type, one option is to just remove
the guard clause and let Ruby bubble up with an exception for objects that don’t
work as our code expects them to. But sometimes, we want to make sure our
debugging isn’t harder than it needs to be. Here’s an alternative that preserves
the error handling in a way that is free of type dependencies:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">average</span>(values)
   values.inject(<span style="color:#A60">:+</span>) / values.size.to_f
<span style="color:#080;font-weight:bold">rescue</span> <span style="color:#036;font-weight:bold">NoMethodError</span>
   raise <span style="color:#036;font-weight:bold">ArgumentError</span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">The average() function can only </span><span style="color:#710">&quot;</span></span> +
                        <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">operate on collections which implement </span><span style="color:#710">&quot;</span></span> +
                        <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">the inject() and size() methods</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>If this feels a bit overkill, it’s because it probably is. But the general idea
of removing the <code>kind_of?()</code> and <code>respond_to?()</code> checks is a good one, because
it puts us squarely back in the realm of Connascence of Name. Our dependency is
now simply that the values object has a pair of methods with the names
<code>inject()</code> and <code>size()</code>.</p>

<h3 id="connascence-of-meaning">Connascence of Meaning</h3>

<p>In its most basic form, Connascence of Meaning is all about magic values. For
example, consider a legacy access control system in
which an admin is given the value 0, a manager 1, and an ordinary user 2. You
could end up writing code like this:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">if</span> user.access_level == <span style="color:#00D">0</span>
  shoot_nukes_at_moon
<span style="color:#080;font-weight:bold">else</span>
  raise <span style="color:#036;font-weight:bold">AccessDeniedError</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>The trouble is, once you’ve littered your system with hard-coded numeric values,
you will have a hard time remembering what they do, and will have a hard time
hunting them down when they need to be changed. To fix this issue, we can modify
our hypothetical <code>User</code> object:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">User</span>
  <span style="color:#036;font-weight:bold">ACCESS_LEVELS</span> = { <span style="color:#00D">0</span> =&gt; <span style="color:#A60">:admin</span>, <span style="color:#00D">1</span> =&gt; <span style="color:#A60">:manager</span>, <span style="color:#00D">2</span> =&gt; <span style="color:#A60">:user</span> }

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">admin?</span>
    <span style="color:#036;font-weight:bold">ACCESS_LEVELS</span>[access_level] == <span style="color:#A60">:admin</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>We try to avoid repeating Connascence of Meaning even in the more local context
of the <code>User</code> class by storing the actual role mappings in a constant. We then
provide a convenience method <code>User#admin?</code> to be used externally, resulting in
newly minted caller code that looks like this:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">if</span> user.admin?
  shoot_nukes_at_moon
<span style="color:#080;font-weight:bold">else</span>
  raise <span style="color:#036;font-weight:bold">AccessDeniedError</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>Now I don’t know about you, but I think I’d be much less likely to accidentally
nuke the moon if the code were written this way. We haven’t totally 
eliminated the <code>Connascence of Meaning</code>, but we’ve moved it to a hyper-local 
context within a single constant on the User model. Because all of the 
calling code is now just exhibiting Connascence of Name, this is a great 
refactoring.</p>

<h3 id="connascence-of-position">Connascence of Position</h3>

<p>Connascence of Position is something that we see every day in Ruby because
method parameters are ordered. If we go to our mailer example, we could have
just as easily written the <code>Mailer#deliver()</code> method to use explicitly ordered
parameters, similar to what is shown in the example below.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Mailer</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">deliver</span>(to, from, subject, message)
    <span style="color:#777"># ...</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>APIs like this annoy the heck out of me, because the calling code typically
doesn’t give any hints at why the arguments are specified in a particular order.
Take a look at how opaque things get when we just try to reproduce our previous
example using this slightly different API:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>mailer.deliver(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">gregory.t.brown@gmail.com</span><span style="color:#710">&quot;</span></span>, 
               <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">fake@fake.com</span><span style="color:#710">&quot;</span></span>,
               <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">You have won a lifetime supply of...</span><span style="color:#710">&quot;</span></span>,
               <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Dear Sir, I am pleased to inform...</span><span style="color:#710">&quot;</span></span>)
</pre></div>
</div>
</div>

<p>Looking at this code, it’s very difficult to determine who is the sender and who
is the recipient, and even more difficult to think about how you might introduce
default values into the mix. Every change to the ordering or length of the list
of arguments can lead to broken code in remote places in your codebase. For all
of these reasons, Rubyists tend to prefer hash-based pseudo-keyword arguments
for all but the most straightforward method signatures.</p>

<p>However, introducing keyword arguments isn’t the only way to reduce CoP in
method signatures to CoN. Another alternative that is perhaps underused is to
simply create objects that provide all the necessary attributes that you would
typically use a hash for. In this case, we can envision a simple <code>Message</code>
object being introduced:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>message = <span style="color:#036;font-weight:bold">Message</span>.new
message.to      = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">gregory.t.brown@gmail.com</span><span style="color:#710">&quot;</span></span>
message.from    = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">fake@fake.com</span><span style="color:#710">&quot;</span></span>
message.subject = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">You have won a lifetime supply of...</span><span style="color:#710">&quot;</span></span>
message.body    = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Dear Sir, I am pleazed to inform...</span><span style="color:#710">&quot;</span></span>

mailer.deliver(message)
</pre></div>
</div>
</div>

<p>Assuming that the <code>Mailer#deliver</code> method just depends on the attribute readers
for those attributes, this is functionally equivalent to the hash based code but
offers a number of advantages. <code>Message</code> is now a reusable, independently
testable entity that can do things like validations internally. This moves some
of the error checking and simple transformation code that might be needed to use
a parameters hash into a more local setting. With a little creativity, it’s
relatively easy to make the API look a little nicer by letting <code>Mailer#deliver</code>
create the message object for you.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>mailer.deliver <span style="color:#080;font-weight:bold">do</span> |message|
  message.to      = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">gregory.t.brown@gmail.com</span><span style="color:#710">&quot;</span></span>
  message.from    = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">fake@fake.com</span><span style="color:#710">&quot;</span></span>
  message.subject = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">You have won a lifetime supply of...</span><span style="color:#710">&quot;</span></span>
  message.body    = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Dear Sir, I am pleazed to inform...</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>This sort of API is fairly common in Ruby as well, but probably not as common as
it should be. So next time you’re faced with the CoP problem when dealing with
method arguments, consider fixing it by putting a nice shiny new object in
place.</p>

<p>It’s worth noting that Connascence of Position is certainly not limited to
method arguments in Ruby. Anywhere in which a change in position of some data
requires you to change code elsewhere, you’ve got a CoP issue, and should think
about how to reduce it if possible.</p>

<h3 id="connascence-of-algorithm">Connascence of Algorithm</h3>

<p>Connascence of Algorithm often looks and smells a bit like the DRY principle.
But there are many cases in which code that violates DRY doesn’t have a CoA
problem, and some rare cases where the opposite is true. The key thing about CoA
is the dependency between two or more clusters of code.</p>

<p>The following example is a CoA example from the wild, from a programming quiz
site that we’re working on as part of Mendicant University’s admission process.
First, you can see a fairly DRY model which is meant to compare uploaded
solutions to the actual answer for a given puzzle.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Puzzle</span> &lt; <span style="color:#036;font-weight:bold">ActiveRecord</span>::<span style="color:#036;font-weight:bold">Base</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">file=</span>(tempfile)
    write_attribute <span style="color:#A60">:fingerprint</span>, sha1(tempfile)
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">valid_solution?</span>(tempfile)
    fingerprint == sha1(tempfile)
  <span style="color:#080;font-weight:bold">end</span>

  private

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">sha1</span>(tempfile)
    <span style="color:#036;font-weight:bold">Digest</span>::<span style="color:#036;font-weight:bold">SHA1</span>.hexdigest(tempfile.read)
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>Internally, this code is fairly free of CoA, particularly because the algorithm
for fingerprinting solutions has been extracted into the <code>Puzzle#sha1()</code> helper.
But because this is a private method, I ended up with tests that explicitly do
the hashing themselves to verify that the <code>Puzzle#file=()</code> method is working as
expected.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>test <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">must be able to create a fingerprint for a file</span><span style="color:#710">&quot;</span></span> <span style="color:#080;font-weight:bold">do</span>
  tempfile = <span style="color:#036;font-weight:bold">Tempfile</span>.new(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">puzzle_sample</span><span style="color:#710">&quot;</span></span>)
  tempfile &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Sample Text</span><span style="color:#710">&quot;</span></span>
  tempfile.rewind

  expected_fingerprint = <span style="color:#036;font-weight:bold">Digest</span>::<span style="color:#036;font-weight:bold">SHA1</span>.hexdigest(tempfile.read)
  tempfile.rewind

  puzzle = <span style="color:#036;font-weight:bold">Puzzle</span>.new(<span style="color:#A60">:file</span> =&gt; tempfile)

  assert_equal expected_fingerprint, puzzle.fingerprint
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>This has an upside in that it sanity checks the exact behavior, ensuring that
the tempfile is actually hashed via SHA1. But since the focus of the test is
more on ensuring that a hash was generated rather than the way it was generated,
we might be able to improve this by extracting the fingerprinting code into its
own module.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Fingerprint</span>
  extend <span style="color:#069">self</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">[]</span>(stream)
    <span style="color:#036;font-weight:bold">Digest</span>::<span style="color:#036;font-weight:bold">SHA1</span>.hexdigest(stream.read)
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>Then, I could rewrite the code and tests to look like they do below:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Puzzle</span> &lt; <span style="color:#036;font-weight:bold">ActiveRecord</span>::<span style="color:#036;font-weight:bold">Base</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">file=</span>(tempfile)
    write_attribute <span style="color:#A60">:fingerprint</span>, <span style="color:#036;font-weight:bold">Fingerprint</span>[tempfile]
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">valid_solution?</span>(tempfile)
    fingerprint == <span style="color:#036;font-weight:bold">Fingerprint</span>[tempfile]
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>test <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">must be able to create a fingerprint for a file</span><span style="color:#710">&quot;</span></span> <span style="color:#080;font-weight:bold">do</span>
  tempfile = <span style="color:#036;font-weight:bold">Tempfile</span>.new(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">puzzle_sample</span><span style="color:#710">&quot;</span></span>)
  tempfile &lt;&lt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Sample Text</span><span style="color:#710">&quot;</span></span>
  tempfile.rewind

  expected_fingerprint = <span style="color:#036;font-weight:bold">Fingerprint</span>[tempfile]
  tempfile.rewind

  puzzle = <span style="color:#036;font-weight:bold">Puzzle</span>.new(<span style="color:#A60">:file</span> =&gt; tempfile)

  assert_equal expected_fingerprint, puzzle.fingerprint
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>The end result would be that the algorithm for how I was generating digital
fingerprints for the solutions could change, and I would not need to update my
tests, as long as the names of everything stayed the same.</p>

<p>In this case, arguably just fully applying the DRY principle would lead us to
the same place, but the concept of connascence lets us think about the
consequences of DRY in a less abstract way. Like all the other types of
connascence, there is a lot more we could talk about here, but in the interest
of time, we’ll skip the details for now.</p>

<h3 id="reflections">Reflections</h3>

<p>While we dug deep into some heavy theory in <a href="http://practicingruby.com/articles/52">last week’s SOLID
article</a>, I tried to keep the connascence
examples simple, practical, and common. But that is not to say that connascence
isn’t every bit as deep a concept as SOLID, and your investigations should not
stop at the examples I’ve shown here.</p>

<p>In the two articles to follow this one, we’ll be looking at particular patterns
and techniques that can help you design better code. Now that you’re armed with
both the SOLID principles and the metrics of connascence, you have a solid basis
for thinking about these problems in more specific contexts. I encourage you to
re-read these first two articles as you continue on with this series, and get
back to me with any questions you might have.</p>

<blockquote>
  <p><strong>NOTE:</strong> This article has also been published on the Ruby Best Practices blog. 
There <a href="http://blog.rubybestpractices.com/posts/gregory/056-issue-24-connascence.html#disqus_thread">may be additional commentary</a> 
over there worth taking a look at.</p>
</blockquote>

  </div>
</body>
</html>

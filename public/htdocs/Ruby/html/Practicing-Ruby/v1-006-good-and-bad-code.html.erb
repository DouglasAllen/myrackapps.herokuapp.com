<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/>
  <title>Practicing Ruby</title>
  <style>
    body {
      font-family: "Helvetica Neue", arial, sans-serif;
      font-size: 14px;
      line-height: 1.6;
      padding-top: 10px;
      padding-bottom: 10px;
      background-color: white;
      padding: 30px;
      color: #333;
      border: 1px solid #aaa;
      max-width: 900px;
      margin: 20px auto;
    }

    body > *:first-child {
      margin-top: 0 !important;
    }

    body > *:last-child {
      margin-bottom: 0 !important;
    }

    a {
      color: #4183C4;
      text-decoration: none;
    }

    a.absent {
      color: #cc0000;
    }

    a.anchor {
      display: block;
      padding-left: 30px;
      margin-left: -30px;
      cursor: pointer;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
    }

    h1, h2, h3, h4, h5, h6 {
      margin: 20px 0 10px;
      padding: 0;
      font-weight: bold;
      -webkit-font-smoothing: antialiased;
      cursor: text;
      position: relative;
    }

    h2:first-child, h1:first-child, h1:first-child + h2, h3:first-child, h4:first-child, h5:first-child, h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor {
      text-decoration: none;
    }

    h1 tt, h1 code {
      font-size: inherit;
    }

    h2 tt, h2 code {
      font-size: inherit;
    }

    h3 tt, h3 code {
      font-size: inherit;
    }

    h4 tt, h4 code {
      font-size: inherit;
    }

    h5 tt, h5 code {
      font-size: inherit;
    }

    h6 tt, h6 code {
      font-size: inherit;
    }

    h1 {
      font-size: 28px;
      color: black;
    }

    h2 {
      font-size: 24px;
      border-bottom: 1px solid #cccccc;
      color: black;
    }

    h3 {
      font-size: 18px;
    }

    h4 {
      font-size: 16px;
    }

    h5 {
      font-size: 14px;
    }

    h6 {
      color: #777777;
      font-size: 14px;
    }

    p, blockquote, ul, ol, dl, li, table, pre {
      margin: 3px 0;
    }

    hr {
      background: transparent url("http://tinyurl.com/bq5kskr") repeat-x 0 0;
      border: 0 none;
      color: #cccccc;
      height: 4px;
      padding: 0;
    }

    body > h2:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child + h2 {
      margin-top: 0;
      padding-top: 0;
    }

    body > h3:first-child, body > h4:first-child, body > h5:first-child, body > h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
      margin-top: 0;
      padding-top: 0;
    }

    h1 p, h2 p, h3 p, h4 p, h5 p, h6 p {
      margin-top: 0;
    }

    li p.first {
      display: inline-block;
    }

    ul, ol {
      padding-left: 30px;
    }

    ul :first-child, ol :first-child {
      margin-top: 0;
    }

    ul :last-child, ol :last-child {
      margin-bottom: 0;
    }

    dl {
      padding: 0;
    }

    dl dt {
      font-size: 14px;
      font-weight: bold;
      font-style: italic;
      padding: 0;
      margin: 15px 0 5px;
    }

    dl dt:first-child {
      padding: 0;
    }

    dl dt > :first-child {
      margin-top: 0;
    }

    dl dt > :last-child {
      margin-bottom: 0;
    }

    dl dd {
      margin: 0 0 15px;
      padding: 0 15px;
    }

    dl dd > :first-child {
      margin-top: 0;
    }

    dl dd > :last-child {
      margin-bottom: 0;
    }

    blockquote {
      border-left: 4px solid #dddddd;
      padding: 0 15px;
      color: #777777;
    }

    blockquote > :first-child {
      margin-top: 0;
    }

    blockquote > :last-child {
      margin-bottom: 0;
    }

    table {
      padding: 0;
    }
    table tr {
      border-top: 1px solid #cccccc;
      background-color: white;
      margin: 0;
      padding: 0;
    }

    table tr:nth-child(2n) {
      background-color: #f8f8f8;
    }

    table tr th {
      font-weight: bold;
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr td {
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr th :first-child, table tr td :first-child {
      margin-top: 0;
    }

    table tr th :last-child, table tr td :last-child {
      margin-bottom: 0;
    }

    img {
      max-width: 100%;
    }

    span.frame {
      display: block;
      overflow: hidden;
    }

    span.frame > span {
      border: 1px solid #dddddd;
      display: block;
      float: left;
      overflow: hidden;
      margin: 13px 0 0;
      padding: 7px;
      width: auto;
    }

    span.frame span img {
      display: block;
      float: left;
    }

    span.frame span span {
      clear: both;
      color: #333333;
      display: block;
      padding: 5px 0 0;
    }

    span.align-center {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-center > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: center;
    }

    span.align-center span img {
      margin: 0 auto;
      text-align: center;
    }

    span.align-right {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-right > span {
      display: block;
      overflow: hidden;
      margin: 13px 0 0;
      text-align: right;
    }

    span.align-right span img {
      margin: 0;
      text-align: right;
    }

    span.float-left {
      display: block;
      margin-right: 13px;
      overflow: hidden;
      float: left;
    }

    span.float-left span {
      margin: 13px 0 0;
    }

    span.float-right {
      display: block;
      margin-left: 13px;
      overflow: hidden;
      float: right;
    }

    span.float-right > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: right;
    }

    code, tt {
      font-family: "Lucida Console", "Courier New", courier;
      font-size: 12px;
      margin: 0 2px;
      padding: 3px 5px;
      white-space: nowrap;
      border: 1px solid #eaeaea;
      background-color: #f8f8f8;
      border-radius: 3px;
    }

    pre code {
      margin: 0;
      padding: 0;
      white-space: pre;
      border: none;
      background: transparent;
    }

    .highlight pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre code, pre tt {
      background-color: transparent;
      border: none;
    }

    span.line-numbers {
      margin-right: 10px;
    }

    img.logo {
      display: block;
      margin: 10px auto;
    }

    h1.logo {
      text-align: center;
      font-size: 40px;
    }
  </style>
</head>
<body>
  <div id="containter">
    <h1 class="logo">Practicing Ruby</h1>
    <img class="logo" src="../images/header.png" />
    <p>In this issue and the next one, I’d like to demonstrate one of my favorite learning exercises while inviting you to follow along at home. It’s something I usually do while teaching in a one-on-one setting, but I think we can adapt it for a broader audience and still get a lot out of it.</p>

<p>In this exercise, the goal is to first produce some bad code, and then steadily improve it while explaining why each change is an improvement. I usually start with a very simple problem but then add some twists about how to implement it to make sure it comes out pretty bad.</p>

<p>One surefire way of writing bad code without resorting to intentionally writing things worse than they should be is to eliminate a few of Ruby’s key organizational tools. In particular, if you want to write ugly code without it seeming fake, it is easy to do so if you never write any user defined functions, classes, or modules. So we’ll do exactly that!</p>

<h3 id="implementing-tic-tac-toe-as-a-single-procedure">Implementing Tic-Tac-Toe as a single procedure.</h3>

<p>I’ve chosen the game <a href="http://en.wikipedia.org/wiki/Tic-Tac-Toe">Tic-Tac-Toe</a> as the problem to focus on, because it only involves a few simple rules and can be implemented by anyone who has basic programming skills.</p>

<p>In fact, if you ignore end game conditions and error handling, you can get a simple prompt for a two player game with just a few lines of Ruby.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>board = [[<span style="color:#069">nil</span>,<span style="color:#069">nil</span>,<span style="color:#069">nil</span>],
         [<span style="color:#069">nil</span>,<span style="color:#069">nil</span>,<span style="color:#069">nil</span>],
         [<span style="color:#069">nil</span>,<span style="color:#069">nil</span>,<span style="color:#069">nil</span>]]

players = [<span style="color:#A60">:X</span>, <span style="color:#A60">:O</span>].cycle

loop <span style="color:#080;font-weight:bold">do</span>
  current_player = players.next
  puts board.map { |row| row.map { |e| e || <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> </span><span style="color:#710">&quot;</span></span> }.join(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">|</span><span style="color:#710">&quot;</span></span>) }.join(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>)
  print <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#D20">&gt;&gt; </span><span style="color:#710">&quot;</span></span>
  row, col = gets.split.map { |e| e.to_i }
  puts
  board[row][col] = current_player
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>But of course, the devil is in the details. To get a fully playable game, you need some basic error checking to ensure that you can’t play out of bounds or on top of another player’s marker. You also need to figure out when a player has won, and when the game has ended in a draw. While this doesn’t sound like a lot of work, you’ll see in the code below how much complexity these simple changes add.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>board   = [[<span style="color:#069">nil</span>,<span style="color:#069">nil</span>,<span style="color:#069">nil</span>],
           [<span style="color:#069">nil</span>,<span style="color:#069">nil</span>,<span style="color:#069">nil</span>],
           [<span style="color:#069">nil</span>,<span style="color:#069">nil</span>,<span style="color:#069">nil</span>]]

left_diagonal  = [[<span style="color:#00D">0</span>,<span style="color:#00D">0</span>],[<span style="color:#00D">1</span>,<span style="color:#00D">1</span>],[<span style="color:#00D">2</span>,<span style="color:#00D">2</span>]]
right_diagonal = [[<span style="color:#00D">2</span>,<span style="color:#00D">0</span>],[<span style="color:#00D">1</span>,<span style="color:#00D">1</span>],[<span style="color:#00D">0</span>,<span style="color:#00D">2</span>]]

players = [<span style="color:#A60">:X</span>, <span style="color:#A60">:O</span>].cycle

current_player = players.next

loop <span style="color:#080;font-weight:bold">do</span>
  puts board.map { |row| row.map { |e| e || <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> </span><span style="color:#710">&quot;</span></span> }.join(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">|</span><span style="color:#710">&quot;</span></span>) }.join(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>)
  print <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#D20">&gt;&gt; </span><span style="color:#710">&quot;</span></span>
  row, col = gets.split.map { |e| e.to_i }
  puts

  <span style="color:#080;font-weight:bold">begin</span>
    cell_contents = board.fetch(row).fetch(col)
  <span style="color:#080;font-weight:bold">rescue</span> <span style="color:#036;font-weight:bold">IndexError</span>
    puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Out of bounds, try another position</span><span style="color:#710">&quot;</span></span>
    <span style="color:#080;font-weight:bold">next</span>
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">if</span> cell_contents
    puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Cell occupied, try another position</span><span style="color:#710">&quot;</span></span>
    <span style="color:#080;font-weight:bold">next</span>
  <span style="color:#080;font-weight:bold">end</span>

  board[row][col] = current_player

  lines = []

  [left_diagonal, right_diagonal].each <span style="color:#080;font-weight:bold">do</span> |line|
    lines &lt;&lt; line <span style="color:#080;font-weight:bold">if</span> line.include?([row,col])
  <span style="color:#080;font-weight:bold">end</span>

  lines &lt;&lt; (<span style="color:#00D">0</span>..<span style="color:#00D">2</span>).map { |c1| [row, c1] }
  lines &lt;&lt; (<span style="color:#00D">0</span>..<span style="color:#00D">2</span>).map { |r1| [r1, col] }

  win = lines.any? <span style="color:#080;font-weight:bold">do</span> |line|
    line.all? { |row,col| board[row][col] == current_player }
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">if</span> win
    puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>current_player<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20"> wins!</span><span style="color:#710">&quot;</span></span>
    exit
  <span style="color:#080;font-weight:bold">end</span>

  <span style="color:#080;font-weight:bold">if</span> board.flatten.compact.length == <span style="color:#00D">9</span>
    puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">It's a draw!</span><span style="color:#710">&quot;</span></span>
    exit
  <span style="color:#080;font-weight:bold">end</span>

  current_player = players.next
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>While relatively short, you need to read through the whole script to really understand how any part of it operates. Of course, this script did not spring together fully formed, there was a thought process that drove it to this final implementation. For those curious, you can <a href="https://gist.github.com/24ef3c8209877c1946bb">follow my stream of consciousness notes</a> about what I was building and why in a step by step fashion.</p>

<p>Seeing these notes will hopefully give you a bit of a sense of how this process might have gone if we were pair programming on this project, working in tiny iterations to push forward just a little bit farther each time. If so, you might already be catching a glimpse of what this exercise is all about. Otherwise, there is still more for us to do!</p>

<h3 id="what-happens-next">What Happens Next?</h3>

<p>I’ve placed my bad tictactoe example in a <a href="https://github.com/sandal/tictactoe/tree/7fd72a33aec33f75909d8c9d59a43423b0f66b24">repository on github</a>. If you’d like to participate, please fork this repository and make one change to the code at a time, leaving detailed reasoning in each commit message as to why you’re making the change. Once you’re happy with what you’ve got, post a link in the comments section on this post so others can check out what you have done.</p>

<p>In the next issue, I will post my own iterative set of improvements, as well as links to some reader submissions. I will also summarize the lessons that can be learned from using this technique, and provide a few suggestions for other problems to attempt in this fashion.</p>

<h3 id="reflections">Reflections</h3>

<p>Please leave any questions, thoughts, or suggestions in the comments section below. These articles are much better when they’re treated as discussions rather than monologues. </p>

<blockquote>
  <p><strong>NOTE:</strong> This article has also been published on the Ruby Best Practices blog. There <a href="http://blog.rubybestpractices.com/posts/gregory/035-issue-6-good-and-bad-code.html#disqus_thread">may be additional commentary</a> 
over there worth taking a look at.</p>
</blockquote>

  </div>
</body>
</html>

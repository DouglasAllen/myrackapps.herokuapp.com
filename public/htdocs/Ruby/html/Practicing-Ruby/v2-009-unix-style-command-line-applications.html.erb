<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/>
  <title>Practicing Ruby</title>
  <style>
    body {
      font-family: "Helvetica Neue", arial, sans-serif;
      font-size: 14px;
      line-height: 1.6;
      padding-top: 10px;
      padding-bottom: 10px;
      background-color: white;
      padding: 30px;
      color: #333;
      border: 1px solid #aaa;
      max-width: 900px;
      margin: 20px auto;
    }

    body > *:first-child {
      margin-top: 0 !important;
    }

    body > *:last-child {
      margin-bottom: 0 !important;
    }

    a {
      color: #4183C4;
      text-decoration: none;
    }

    a.absent {
      color: #cc0000;
    }

    a.anchor {
      display: block;
      padding-left: 30px;
      margin-left: -30px;
      cursor: pointer;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
    }

    h1, h2, h3, h4, h5, h6 {
      margin: 20px 0 10px;
      padding: 0;
      font-weight: bold;
      -webkit-font-smoothing: antialiased;
      cursor: text;
      position: relative;
    }

    h2:first-child, h1:first-child, h1:first-child + h2, h3:first-child, h4:first-child, h5:first-child, h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor {
      text-decoration: none;
    }

    h1 tt, h1 code {
      font-size: inherit;
    }

    h2 tt, h2 code {
      font-size: inherit;
    }

    h3 tt, h3 code {
      font-size: inherit;
    }

    h4 tt, h4 code {
      font-size: inherit;
    }

    h5 tt, h5 code {
      font-size: inherit;
    }

    h6 tt, h6 code {
      font-size: inherit;
    }

    h1 {
      font-size: 28px;
      color: black;
    }

    h2 {
      font-size: 24px;
      border-bottom: 1px solid #cccccc;
      color: black;
    }

    h3 {
      font-size: 18px;
    }

    h4 {
      font-size: 16px;
    }

    h5 {
      font-size: 14px;
    }

    h6 {
      color: #777777;
      font-size: 14px;
    }

    p, blockquote, ul, ol, dl, li, table, pre {
      margin: 3px 0;
    }

    hr {
      background: transparent url("http://tinyurl.com/bq5kskr") repeat-x 0 0;
      border: 0 none;
      color: #cccccc;
      height: 4px;
      padding: 0;
    }

    body > h2:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    body > h1:first-child + h2 {
      margin-top: 0;
      padding-top: 0;
    }

    body > h3:first-child, body > h4:first-child, body > h5:first-child, body > h6:first-child {
      margin-top: 0;
      padding-top: 0;
    }

    a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
      margin-top: 0;
      padding-top: 0;
    }

    h1 p, h2 p, h3 p, h4 p, h5 p, h6 p {
      margin-top: 0;
    }

    li p.first {
      display: inline-block;
    }

    ul, ol {
      padding-left: 30px;
    }

    ul :first-child, ol :first-child {
      margin-top: 0;
    }

    ul :last-child, ol :last-child {
      margin-bottom: 0;
    }

    dl {
      padding: 0;
    }

    dl dt {
      font-size: 14px;
      font-weight: bold;
      font-style: italic;
      padding: 0;
      margin: 15px 0 5px;
    }

    dl dt:first-child {
      padding: 0;
    }

    dl dt > :first-child {
      margin-top: 0;
    }

    dl dt > :last-child {
      margin-bottom: 0;
    }

    dl dd {
      margin: 0 0 15px;
      padding: 0 15px;
    }

    dl dd > :first-child {
      margin-top: 0;
    }

    dl dd > :last-child {
      margin-bottom: 0;
    }

    blockquote {
      border-left: 4px solid #dddddd;
      padding: 0 15px;
      color: #777777;
    }

    blockquote > :first-child {
      margin-top: 0;
    }

    blockquote > :last-child {
      margin-bottom: 0;
    }

    table {
      padding: 0;
    }
    table tr {
      border-top: 1px solid #cccccc;
      background-color: white;
      margin: 0;
      padding: 0;
    }

    table tr:nth-child(2n) {
      background-color: #f8f8f8;
    }

    table tr th {
      font-weight: bold;
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr td {
      border: 1px solid #cccccc;
      text-align: left;
      margin: 0;
      padding: 6px 13px;
    }

    table tr th :first-child, table tr td :first-child {
      margin-top: 0;
    }

    table tr th :last-child, table tr td :last-child {
      margin-bottom: 0;
    }

    img {
      max-width: 100%;
    }

    span.frame {
      display: block;
      overflow: hidden;
    }

    span.frame > span {
      border: 1px solid #dddddd;
      display: block;
      float: left;
      overflow: hidden;
      margin: 13px 0 0;
      padding: 7px;
      width: auto;
    }

    span.frame span img {
      display: block;
      float: left;
    }

    span.frame span span {
      clear: both;
      color: #333333;
      display: block;
      padding: 5px 0 0;
    }

    span.align-center {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-center > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: center;
    }

    span.align-center span img {
      margin: 0 auto;
      text-align: center;
    }

    span.align-right {
      display: block;
      overflow: hidden;
      clear: both;
    }

    span.align-right > span {
      display: block;
      overflow: hidden;
      margin: 13px 0 0;
      text-align: right;
    }

    span.align-right span img {
      margin: 0;
      text-align: right;
    }

    span.float-left {
      display: block;
      margin-right: 13px;
      overflow: hidden;
      float: left;
    }

    span.float-left span {
      margin: 13px 0 0;
    }

    span.float-right {
      display: block;
      margin-left: 13px;
      overflow: hidden;
      float: right;
    }

    span.float-right > span {
      display: block;
      overflow: hidden;
      margin: 13px auto 0;
      text-align: right;
    }

    code, tt {
      font-family: "Lucida Console", "Courier New", courier;
      font-size: 12px;
      margin: 0 2px;
      padding: 3px 5px;
      white-space: nowrap;
      border: 1px solid #eaeaea;
      background-color: #f8f8f8;
      border-radius: 3px;
    }

    pre code {
      margin: 0;
      padding: 0;
      white-space: pre;
      border: none;
      background: transparent;
    }

    .highlight pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }

    pre code, pre tt {
      background-color: transparent;
      border: none;
    }

    span.line-numbers {
      margin-right: 10px;
    }

    img.logo {
      display: block;
      margin: 10px auto;
    }

    h1.logo {
      text-align: center;
      font-size: 40px;
    }
  </style>
</head>
<body>
  <div id="containter">
    <h1 class="logo">Practicing Ruby</h1>
    <img class="logo" src="../../assets/images/header.png" />
    <p>Ruby is best known as a web development language, but in its early days it was
mainly used on the command line. In this article, we’ll get back to those roots by building a partial implementation of the standard Unix command <code>cat</code>.</p>

<p>The core purpose of the <code>cat</code> utility is to read in a list of input files, concatenate them, and output the resulting text to the command line. You can also use <code>cat</code> for a few other useful things, such as adding line numbers and suppressing extraneous whitespace. If we stick to these commonly used features, the core functionality of <code>cat</code> is something even a novice programmer would be able to implement without too much effort.</p>

<p>The tricky part of building a <code>cat</code> clone is that it involves more than just
some basic text manipulation; you also need to know about some 
stream processing and error handling techniques that are common in Unix
utilities. The <a href="https://gist.github.com/1293709">acceptance tests</a> 
that I’ve used to compare the original <code>cat</code> utility to my Ruby-based <code>rcat</code> 
tool reveal some of the extra details that need to be considered when
building this sort of command line application.</p>

<p>If you are already fairly comfortable with building command line tools, you may
want to try implementing your own version of <code>rcat</code> before reading on. But don’t
worry if you wouldn’t even know where to start: I’ve provided a 
detailed walkthrough of my solution that will teach you everything 
that you need to know.</p>

<blockquote>
  <p><strong>NOTE:</strong> You’ll need to have the source code for <a href="https://github.com/elm-city-craftworks/rcat">my implementation of rcat</a> easily accessible as you work through the rest of this article. Please either clone the repository now or keep the GitHub file browser open while reading.</p>
</blockquote>

<h3 id="building-an-executable-script">Building an executable script</h3>

<p>Our first task is to make it possible to run the <code>rcat</code> script without having to type something like <code>ruby path/to/rcat</code> each time we run it. This task can be done in three easy steps.</p>

<p><strong>1) Add a shebang line to your script.</strong></p>

<p>If you look at <code>bin/rcat</code> in my code, you’ll see that it starts with the following line:</p>

<pre><code>#!/usr/bin/env ruby
</code></pre>

<p>This line (commonly called a shebang line) tells the shell what interpreter to use to process the rest of the file. Rather than providing a path directly to the Ruby interpreter, I instead use the path to the standard <code>env</code> utility. This step allows <code>env</code> to figure out which <code>ruby</code> executable is present in our current environment and to use that interpreter to process the rest of the file. This approach is preferable because it is <a href="http://en.wikipedia.org/wiki/Shebang_line#Portability">more portable</a> than hard-coding a path to a particular Ruby install. Although Ruby can be installed in any number of places, the somewhat standardized location of <code>env</code> makes it reasonably dependable.</p>

<p><strong>2) Make your script executable.</strong></p>

<p>Once the shebang line is set up, it’s necessary to update the permissions on the <code>bin/rcat</code> file. Running the following command from the project root will make <code>bin/rcat</code> executable:</p>

<pre><code>$ chmod +x bin/rcat
</code></pre>

<p>Although the executable has not yet been added to the shell’s lookup path, it is now possible to test it by providing an explicit path to the executable.</p>

<pre><code>$ ./bin/rcat data/gettysburg.txt
Four score and seven years ago, our fathers brought forth on this continent a
new nation, conceived in Liberty and dedicated to the proposition that all men
are created equal.

... continued ...
</code></pre>

<p><strong>3) Add your script to the shell’s lookup path.</strong></p>

<p>The final step is to add the executable to the shell’s lookup path so that it can be called as a simple command. In Bash-like shells, the path is updated by modifying the <code>PATH</code> environment variable, as shown in the following example:</p>

<pre><code>$ export PATH=/Users/seacreature/devel/rcat/bin:$PATH
</code></pre>

<p>This command prepends the <code>bin</code> folder in my rcat project to the existing contents of the <code>PATH</code>, which makes it possible for the current shell to call the <code>rcat</code> command without specifying a direct path to the executable, similar to how we call ordinary Unix commands:</p>

<pre><code>$ rcat data/gettysburg.txt
Four score and seven years ago, our fathers brought forth on this continent a
new nation, conceived in Liberty and dedicated to the proposition that all men
are created equal.

... continued ...
</code></pre>

<p>To confirm that you’ve followed these steps correctly and that things are working as expected, you can now run the acceptance tests. If you see anything different than the following output, retrace your steps and see whether you’ve made a mistake somewhere. If not, please leave a comment and I’ll try to help you out.</p>

<pre><code>$ ruby tests.rb 
You passed the tests, yay!
</code></pre>

<p>Assuming that you have a working <code>rcat</code> executable, we can now move on to talk about how the actual program is implemented.</p>

<h3 id="stream-processing-techniques">Stream processing techniques</h3>

<p>We now can turn our focus to the first few acceptance tests from the <em>tests.rb</em> file. The thing that all these use cases have in common is that they involve very simple processing of input and output streams, and nothing more. </p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>cat_output  = <span style="background-color:hsla(120,100%,50%,0.06)"><span style="color:#161">`</span><span style="color:#2B2">cat </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>gettysburg_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#161">`</span></span>
rcat_output = <span style="background-color:hsla(120,100%,50%,0.06)"><span style="color:#161">`</span><span style="color:#2B2">rcat </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>gettysburg_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#161">`</span></span>

fail <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Failed 'cat == rcat'</span><span style="color:#710">&quot;</span></span> <span style="color:#080;font-weight:bold">unless</span> cat_output == rcat_output

<span style="color:#777">############################################################################</span>

cat_output  = <span style="background-color:hsla(120,100%,50%,0.06)"><span style="color:#161">`</span><span style="color:#2B2">cat </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>gettysburg_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#2B2"> </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>spaced_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#161">`</span></span>
rcat_output = <span style="background-color:hsla(120,100%,50%,0.06)"><span style="color:#161">`</span><span style="color:#2B2">rcat </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>gettysburg_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#2B2"> </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>spaced_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#161">`</span></span>

fail <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Failed 'cat [f1 f2] == rcat [f1 f2]'</span><span style="color:#710">&quot;</span></span> <span style="color:#080;font-weight:bold">unless</span> cat_output == rcat_output

<span style="color:#777">############################################################################</span>

cat_output  = <span style="background-color:hsla(120,100%,50%,0.06)"><span style="color:#161">`</span><span style="color:#2B2">cat &lt; </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>spaced_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#161">`</span></span>
rcat_output = <span style="background-color:hsla(120,100%,50%,0.06)"><span style="color:#161">`</span><span style="color:#2B2">rcat &lt; </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>spaced_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#161">`</span></span>

fail <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Failed 'cat &lt; file == rcat &lt; file</span><span style="color:#710">&quot;</span></span> <span style="color:#080;font-weight:bold">unless</span> cat_output == rcat_output
</pre></div>
</div>
</div>

<p>If we needed only to pass these three tests, we’d be in luck. Ruby provides a special stream object called <code>ARGF</code> that combines multiple input files into a single stream or falls back to standard input if no files are provided. Our entire script could look something like this:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#069">ARGF</span>.each_line { |line| print line }
</pre></div>
</div>
</div>

<p>However, the real <code>cat</code> utility does a lot more than what <code>ARGF</code> provides,
so it was necessary to write some custom code to handle stream processing:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">RCat</span>
  <span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Application</span>
    <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">initialize</span>(argv)
      <span style="color:#33B">@params</span>, <span style="color:#33B">@files</span> = parse_options(argv)

      <span style="color:#33B">@display</span>        = <span style="color:#036;font-weight:bold">RCat</span>::<span style="color:#036;font-weight:bold">Display</span>.new(<span style="color:#33B">@params</span>)
    <span style="color:#080;font-weight:bold">end</span>

    <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">run</span>
      <span style="color:#080;font-weight:bold">if</span> <span style="color:#33B">@files</span>.empty?
        <span style="color:#33B">@display</span>.render(<span style="color:#069">STDIN</span>)
      <span style="color:#080;font-weight:bold">else</span>
        <span style="color:#33B">@files</span>.each <span style="color:#080;font-weight:bold">do</span> |filename|
          <span style="color:#036;font-weight:bold">File</span>.open(filename) { |f| <span style="color:#33B">@display</span>.render(f) }
        <span style="color:#080;font-weight:bold">end</span> 
      <span style="color:#080;font-weight:bold">end</span>
    <span style="color:#080;font-weight:bold">end</span>

    <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">parse_options</span>(argv)
      <span style="color:#777"># ignore this for now</span>
    <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>The main difference between this code and the <code>ARGF</code>-based approach is that <code>RCat::Application#run</code> creates a new stream for each file. This comes in handy later when working on support for empty line suppression and complex line numbering but also complicates the implementation of the <code>RCat::Display</code> object. In the following example, I’ve stripped away the code that is related to these more complicated features to make it a bit easier for you to see the overall flow of things:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">RCat</span>
  <span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Display</span>
    <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">render</span>(data)
      lines = data.each_line
      loop { render_line(lines) }
    <span style="color:#080;font-weight:bold">end</span>

    private

    <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">render_line</span>(lines)
      current_line = lines.next 
      print current_line
    <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>The use of <code>loop</code> instead of an ordinary Ruby iterator might feel a bit strange here, but it works fairly well in combination with <code>Enumerator#next</code>. The following irb session demonstrates how the two interact with one another:</p>

<pre><code>&gt;&gt; lines = "a\nb\nc\n".each_line
=&gt; #&lt;Enumerator: "a\nb\nc\n":each_line&gt;
&gt;&gt; loop { p lines.next }
"a\n"
"b\n"
"c\n"
=&gt; nil

&gt;&gt; lines = "a\nb\nc\n".each_line
=&gt; #&lt;Enumerator: "a\nb\nc\n":each_line&gt;
&gt;&gt; lines.next
=&gt; "a\n"
&gt;&gt; lines.next
=&gt; "b\n"
&gt;&gt; lines.next
=&gt; "c\n"

&gt;&gt; lines.next
StopIteration: iteration reached an end
  from (irb):8:in `next'
  from (irb):8
  from /Users/seacreature/.rvm/rubies/ruby-1.9.3-rc1/bin/irb:16:in `&lt;main&gt;'

&gt;&gt; loop { raise StopIteration }
=&gt; nil
</code></pre>

<p>Using this pattern makes it possible for <code>render_line</code> to actually consume more
than one line from the input stream at once. If you work through the logic that
is necessary to get the following test to pass, you might catch a glimpse of the
benefits of this technique:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>cat_output  = <span style="background-color:hsla(120,100%,50%,0.06)"><span style="color:#161">`</span><span style="color:#2B2">cat -s </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>spaced_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#161">`</span></span>
rcat_output = <span style="background-color:hsla(120,100%,50%,0.06)"><span style="color:#161">`</span><span style="color:#2B2">rcat -s </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>spaced_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#161">`</span></span>

fail <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Failed 'cat -s == rcat -s'</span><span style="color:#710">&quot;</span></span> <span style="color:#080;font-weight:bold">unless</span> cat_output == rcat_output
</pre></div>
</div>
</div>

<p>Tracing the executation path for <code>rcat -s</code> will lead you to this line of code in
<code>render_line</code>, which is the whole reason I decided to use this
<code>Enumerator</code>-based implementation:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>lines.next <span style="color:#080;font-weight:bold">while</span> lines.peek.chomp.empty?
</pre></div>
</div>
</div>

<p>This code does an arbitrary amount of line-by-line lookahead until either a nonblank line is found or the end of the file is reached. It does so in a purely stateless and memory-efficient manner and is perhaps the most interesting line of code in this entire project. The downside of this approach is that it requires the entire <code>RCat::Display</code> object to be designed from the ground up to work with <code>Enumerator</code> objects. However, I struggled to come up with an alternative implementation that didn’t involve some sort of complicated state machine/buffering mechanism that would be equally cumbersome to work with.</p>

<p>As tempting as it is to continue discussing the pros and cons of the different
ways of solving this particular problem, it’s probably best for us to get back on
track and look at some more basic problems that arise when working on
command-line applications. I will now turn to the <code>parse_options</code> method that I asked you 
to treat as a black box in our earlier examples.</p>

<h3 id="options-parsing">Options parsing</h3>

<p>Ruby provides two standard libraries for options parsing: <code>GetoptLong</code> and <code>OptionParser</code>. Though both are fairly complex tools, <code>OptionParser</code> looks and feels a lot more like ordinary Ruby code while simultaneously managing to be much more powerful. The implementation of <code>RCat::Application#parse_options</code> makes it clear what a good job <code>OptionParser</code> does when it comes to making easy things easy:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">RCat</span>
  <span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Application</span>
    <span style="color:#777"># other code omitted</span>

    <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">parse_options</span>(argv)
      params = {}
      parser = <span style="color:#036;font-weight:bold">OptionParser</span>.new 

      parser.on(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">-n</span><span style="color:#710">&quot;</span></span>) { params[<span style="color:#A60">:line_numbering_style</span>] ||= <span style="color:#A60">:all_lines</span>         }
      parser.on(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">-b</span><span style="color:#710">&quot;</span></span>) { params[<span style="color:#A60">:line_numbering_style</span>]   = <span style="color:#A60">:significant_lines</span> }
      parser.on(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">-s</span><span style="color:#710">&quot;</span></span>) { params[<span style="color:#A60">:squeeze_extra_newlines</span>] = <span style="color:#069">true</span>               }
      
      files = parser.parse(argv)

      [params, files]
    <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>The job of <code>OptionParser#parse</code> is to take an arguments array and match it against the callbacks defined via the <code>OptionParser#on</code> method. Whenever a flag is matched, the associated block for that flag is executed. Finally, any unmatched arguments are returned. In the case of <code>rcat</code>, the unmatched arguments consist of the list of files we want to concatenate and display. The following example demonstrates what’s going on in <code>RCat::Application</code>:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">optparse</span><span style="color:#710">&quot;</span></span>

puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ARGV is </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span><span style="color:#069">ARGV</span>.inspect<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>

params = {}
parser = <span style="color:#036;font-weight:bold">OptionParser</span>.new 

parser.on(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">-n</span><span style="color:#710">&quot;</span></span>) { params[<span style="color:#A60">:line_numbering_style</span>] ||= <span style="color:#A60">:all_lines</span>         }
parser.on(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">-b</span><span style="color:#710">&quot;</span></span>) { params[<span style="color:#A60">:line_numbering_style</span>]   = <span style="color:#A60">:significant_lines</span> }
parser.on(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">-s</span><span style="color:#710">&quot;</span></span>) { params[<span style="color:#A60">:squeeze_extra_newlines</span>] = <span style="color:#069">true</span>               }

files = parser.parse(<span style="color:#069">ARGV</span>)

puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">params are </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>params.inspect<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>
puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">files are </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>files.inspect<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>
</pre></div>
</div>
</div>

<p>Try running this script with various options and see what you end up with. You should get something similar to the output shown here:</p>

<p>~~~`
$ ruby option_parser_example.rb -ns data/*.txt
ARGV is [“-ns”, “data/gettysburg.txt”, “data/spaced_out.txt”]
params are {:line_numbering_style=&gt;:all_lines, :squeeze_extra_newlines=&gt;true}
files are [“data/gettysburg.txt”, “data/spaced_out.txt”]</p>

<p>$ ruby option_parser_example.rb data/*.txt
ARGV is [“data/gettysburg.txt”, “data/spaced_out.txt”]
params are {}
files are [“data/gettysburg.txt”, “data/spaced_out.txt”]
~~~</p>

<p>Although <code>rcat</code> requires us to parse only the most basic form of arguments, <code>OptionParser</code> is capable of a whole lot more than what I’ve shown here. Be sure to check out its <a href="http://ruby-doc.org/stdlib-1.9.2/libdoc/optparse/rdoc/OptionParser.html#method-i-parse">API documentation</a> to see the full extent of what it can do.</p>

<p>Now that I’ve covered how to get data in and out of our <code>rcat</code> application, we can talk a bit about how it does <code>cat</code>-style formatting for line numbering.</p>

<h3 id="basic-text-formatting">Basic text formatting</h3>

<p>Formatting text for the console can be a bit cumbersome, but some things are easier than they seem. For example, the tidy output of <code>cat -n</code> shown here is not especially hard to implement:</p>

<pre style="font-size: 0.8em">
$ cat -n data/gettysburg.txt 
   1  Four score and seven years ago, our fathers brought forth on this continent a
   2  new nation, conceived in Liberty and dedicated to the proposition that all men
   3  are created equal.
   4  
   5  Now we are engaged in a great civil war, testing whether that nation, or any
   6  nation so conceived and so dedicated, can long endure. We are met on a great
   7  battle-field of that war. We have come to dedicate a portion of that field as a
   8  final resting place for those who here gave their lives that that nation might
   9  live. It is altogether fitting and proper that we should do this.
  10  
  11  But, in a larger sense, we can not dedicate -- we can not consecrate -- we can
  12  not hallow -- this ground. The brave men, living and dead, who struggled here
  13  have consecrated it far above our poor power to add or detract. The world will
  14  little note nor long remember what we say here, but it can never forget what
  15  they did here. It is for us the living, rather, to be dedicated here to the
  16  unfinished work which they who fought here have thus far so nobly advanced. It
  17  is rather for us to be here dedicated to the great task remaining before us --
  18  that from these honored dead we take increased devotion to that cause for which
  19  they gave the last full measure of devotion -- that we here highly resolve that
  20  these dead shall not have died in vain -- that this nation, under God, shall
  21  have a new birth of freedom -- and that government of the people, by the people,
  22  for the people, shall not perish from the earth.
</pre>

<p>On my system, <code>cat</code> seems to assume a fixed-width column with space for up to six digits. This format looks great for any file with fewer than a million lines in it, but eventually breaks down once you cross that boundary.</p>

<pre><code>$ ruby -e "1_000_000.times { puts 'blah' }" | cat -n | tail
999991    blah
999992    blah
999993    blah
999994    blah
999995    blah
999996    blah
999997    blah
999998    blah
999999    blah
1000000    blah
</code></pre>

<p>This design decision makes implementing the formatting code for this feature a whole lot easier. The <code>RCat::Display#print_labeled_line</code> method shows that it’s possible to implement this kind of formatting with a one-liner:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">print_labeled_line</span>(line)
  print <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>line_number.to_s.rjust(<span style="color:#00D">6</span>)<span style="font-weight:bold;color:#666">}</span></span><span style="color:#b0b">\t</span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>line<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span> 
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>Although the code in this example is sufficient for our needs in <code>rcat</code>, it’s worth mentioning that <code>String</code> also supports the <code>ljust</code> and <code>center</code> methods. All three of these justification methods can optionally take a second argument, which causes them to use an arbitrary string as padding rather than a space character; this feature is sometimes useful for creating things like ASCII status bars or tables.</p>

<p>I’ve worked on a lot of different command-line report formats before, and I can tell you that streamable, fixed-width output is the easiest kind of reporting you’ll come by. Things get a lot more complicated when you have to support variable-width columns or render elements that span multiple rows and columns. I won’t get into the details of how to do those things here, but feel free to leave a comment if you’re interested in hearing more on that topic.</p>

<h3 id="error-handling-and-exit-codes">Error handling and exit codes</h3>

<p>The techniques we’ve covered so far are enough to get most of <code>rcat</code>’s tests passing, but the following three scenarios require a working knowledge of how Unix commands tend to handle errors. Read through them and do the best you can to make sense of what’s going on.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="background-color:hsla(120,100%,50%,0.06)"><span style="color:#161">`</span><span style="color:#2B2">cat </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>gettysburg_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#161">`</span></span>
cat_success = <span style="color:#d70">$?</span>

<span style="background-color:hsla(120,100%,50%,0.06)"><span style="color:#161">`</span><span style="color:#2B2">rcat </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>gettysburg_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#161">`</span></span>
rcat_success = <span style="color:#d70">$?</span>

<span style="color:#080;font-weight:bold">unless</span> cat_success.exitstatus == <span style="color:#00D">0</span> &amp;&amp; rcat_success.exitstatus == <span style="color:#00D">0</span>
  fail <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Failed 'cat and rcat success exit codes match</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#777">############################################################################</span>

cat_out, cat_err, cat_process    = <span style="color:#036;font-weight:bold">Open3</span>.capture3(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">cat some_invalid_file</span><span style="color:#710">&quot;</span></span>)
rcat_out, rcat_err, rcat_process = <span style="color:#036;font-weight:bold">Open3</span>.capture3(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rcat some_invalid_file</span><span style="color:#710">&quot;</span></span>) 

<span style="color:#080;font-weight:bold">unless</span> cat_process.exitstatus == <span style="color:#00D">1</span> &amp;&amp; rcat_process.exitstatus == <span style="color:#00D">1</span>
  fail <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Failed 'cat and rcat exit codes match on bad file</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#080;font-weight:bold">unless</span> rcat_err == <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rcat: No such file or directory - some_invalid_file</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>
  fail <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Failed 'cat and rcat error messages match on bad file'</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#777">############################################################################</span>


cat_out, cat_err, cat_proccess  = <span style="color:#036;font-weight:bold">Open3</span>.capture3(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">cat -x </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>gettysburg_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>)
rcat_out,rcat_err, rcat_process = <span style="color:#036;font-weight:bold">Open3</span>.capture3(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rcat -x </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>gettysburg_file<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>) 

<span style="color:#080;font-weight:bold">unless</span> cat_process.exitstatus == <span style="color:#00D">1</span> &amp;&amp; rcat_process.exitstatus == <span style="color:#00D">1</span>
  fail <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Failed 'cat and rcat exit codes match on bad switch</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#080;font-weight:bold">unless</span> rcat_err == <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rcat: invalid option: -x</span><span style="color:#b0b">\n</span><span style="color:#D20">usage: rcat [-bns] [file ...]</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>
  fail <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Failed 'rcat provides usage instructions when given invalid option</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>The first test verifies exit codes for successful calls to <code>cat</code> and <code>rcat</code>. In Unix programs, exit codes are a means to pass information back to the shell about whether a command finished successfully. The right way to signal that things worked as expected is to return an exit code of 0, which is exactly what Ruby does whenever a program exits normally without error.</p>

<p>Whenever we run a shell command in Ruby using backticks, a <code>Process::Status</code> object is created and is then assigned to the <code>$?</code> global variable. This object contains (among other things) the exit status of the command that was run. Although it looks a bit cryptic, we’re able to use this feature to verify in our first test that both <code>cat</code> and <code>rcat</code> finished their jobs successfully without error.</p>

<p>The second and third tests require a bit more heavy lifting because in these scenarios, we want to capture not only the exit status of these commands, but also whatever text they end up writing to the STDERR stream. To do so, we use the <code>Open3</code> standard library. The <code>Open3.capture3</code> method runs a shell command and then returns whatever was written to STDOUT and STDERR, as well as a <code>Process::Status</code> object similar to the one we pulled out of <code>$?</code> earlier. </p>

<p>If you look at <em>bin/rcat</em>, you’ll find the code that causes these tests to pass:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">begin</span>
  <span style="color:#036;font-weight:bold">RCat</span>::<span style="color:#036;font-weight:bold">Application</span>.new(<span style="color:#069">ARGV</span>).run
<span style="color:#080;font-weight:bold">rescue</span> <span style="color:#036;font-weight:bold">Errno</span>::<span style="color:#036;font-weight:bold">ENOENT</span> =&gt; err
  abort <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rcat: </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>err.message<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">rescue</span> <span style="color:#036;font-weight:bold">OptionParser</span>::<span style="color:#036;font-weight:bold">InvalidOption</span> =&gt; err
  abort <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rcat: </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>err.message<span style="font-weight:bold;color:#666">}</span></span><span style="color:#b0b">\n</span><span style="color:#D20">usage: rcat [-bns] [file ...]</span><span style="color:#710">&quot;</span></span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>The <code>abort</code> method provides a means to write some text to STDERR and then exit with a nonzero code. The previous code provides functionality equivalent to the following, more explicit code:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">begin</span>
  <span style="color:#036;font-weight:bold">RCat</span>::<span style="color:#036;font-weight:bold">Application</span>.new(<span style="color:#069">ARGV</span>).run
<span style="color:#080;font-weight:bold">rescue</span> <span style="color:#036;font-weight:bold">Errno</span>::<span style="color:#036;font-weight:bold">ENOENT</span> =&gt; err
  <span style="color:#d70">$stderr</span>.puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rcat: </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>err.message<span style="font-weight:bold;color:#666">}</span></span><span style="color:#710">&quot;</span></span>
  exit(<span style="color:#00D">1</span>)
<span style="color:#080;font-weight:bold">rescue</span> <span style="color:#036;font-weight:bold">OptionParser</span>::<span style="color:#036;font-weight:bold">InvalidOption</span> =&gt; err
  <span style="color:#d70">$stderr</span>.puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">rcat: </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>err.message<span style="font-weight:bold;color:#666">}</span></span><span style="color:#b0b">\n</span><span style="color:#D20">usage: rcat [-bns] [file ...]</span><span style="color:#710">&quot;</span></span>
  exit(<span style="color:#00D">1</span>)
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>Looking back on things, the errors I’ve rescued here are somewhat low level, and
it might have been better to rescue them where they occur and then reraise
custom errors provided by <code>RCat</code>. This approach would lead to code similar to
what is shown below:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span style="color:#080;font-weight:bold">begin</span>
  <span style="color:#036;font-weight:bold">RCat</span>::<span style="color:#036;font-weight:bold">Application</span>.new(<span style="color:#069">ARGV</span>).run
<span style="color:#080;font-weight:bold">rescue</span> <span style="color:#036;font-weight:bold">RCat</span>::<span style="color:#036;font-weight:bold">Errors</span>::<span style="color:#036;font-weight:bold">FileNotFound</span> =&gt; err
  <span style="color:#777"># ...</span>
<span style="color:#080;font-weight:bold">rescue</span> <span style="color:#036;font-weight:bold">RCat</span>::<span style="color:#036;font-weight:bold">Errors</span>::<span style="color:#036;font-weight:bold">InvalidParameter</span> =&gt; err
  <span style="color:#777"># ..</span>
<span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>Regardless of how these exceptions are labeled, it’s important to note that I intentionally let them bubble all the way up to the outermost layer and only then rescue them and call <code>Kernel#exit</code>. Intermingling <code>exit</code> calls within control flow or modeling logic makes debugging nearly impossible and also makes automated testing a whole lot harder.</p>

<p>Another thing to note about this code is that I write my error messages to <code>STDERR</code> rather than <code>STDOUT</code>. Unix-based systems give us these two different streams for a reason: they let us separate debugging output and functional output so that they can be redirected and manipulated independently. Mixing the two together makes it much more difficult for commands to be chained together in a pipeline, going against the <a href="http://en.wikipedia.org/wiki/Unix_philosophy">Unix philosophy</a>.</p>

<p>Error handling is a topic that could easily span several articles. But when it comes to building command-line applications, you’ll be in pretty good shape if you remember just two things: use <code>STDERR</code> instead of <code>STDOUT</code> for debugging output, and make sure to exit with a nonzero status code if your application fails to do what it is supposed to do. Following those two simple rules will make your application play a whole lot nicer with others.</p>

<h3 id="reflections">Reflections</h3>

<p>Holy cow, this was a hard article to write! When I originally decided to write a <code>cat</code> clone, I worried that the example would be too trivial and boring to be worth writing about. However, once I actually implemented it and sat down to write this article, I realized that building command-line applications that respect Unix philosophy and play nice with others is harder than it seems on the surface.</p>

<p>Rather than treating this article as a definitive reference for how to build good command-line applications, perhaps we can instead use it as a jumping-off point for future topics to cover in a more self-contained fashion. I’d love to hear your thoughts on what topics in particular interested you and what areas you think should have been covered in greater detail.</p>

<blockquote>
  <p>NOTE: If you’d like to learn more about this topic, consider doing the Practicing Ruby self-guided course on <a href="https://practicingruby.com/articles/study-guide-1?u=dc2ab0f9bb">Streams, Files, and Sockets</a>. You’ve already completed one of its reading exercises by working through this article!</p>
</blockquote>

  </div>
</body>
</html>
